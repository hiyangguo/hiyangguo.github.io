{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/uploads/head.jpg","path":"uploads/head.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/path/to/alipay-reward-image.png","path":"path/to/alipay-reward-image.png","modified":0,"renderable":0},{"_id":"source/path/to/wechat-reward-image.png","path":"path/to/wechat-reward-image.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1480862449000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1480862449000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1480862449000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1480862449000},{"_id":"source/favicon.ico","hash":"a7d9e1dd69141b1610035145d1fd3d6c53a43f9d","modified":1480862449000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1480862449000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1480862449000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1480862449000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1480862449000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1480862449000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1480862449000},{"_id":"themes/next/_config.yml","hash":"ed2a9639bb3f58fd915f49b23ca700859ba22b99","modified":1480862449000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1480862449000},{"_id":"source/_posts/【译】javascript中的undefined可以被重写.md","hash":"2c7dbc2dfbf7f26c99b459040baa3754a742df6a","modified":1480862449000},{"_id":"source/_posts/揭秘命名函数表达式.md","hash":"77bd4e05e75c133a4f0c68a8b267433a6b6f155f","modified":1480862449000},{"_id":"source/_posts/编写高质量JavaScript代码的基本要点.md","hash":"8ee911e1a62c227e8b06c0e666c59e6e52128d18","modified":1480862449000},{"_id":"source/categories/index.md","hash":"b8d1ba611728293932b3853434028c22120c7c61","modified":1480862449000},{"_id":"source/tags/index.md","hash":"63cb09c121e6bbf14539520b82c6cc70d35b1b13","modified":1480862449000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1480862449000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1480862449000},{"_id":"source/uploads/head.jpg","hash":"fcc71839f43311b5ac275e94fb287f1b8515b326","modified":1480862449000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1480862449000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1480862449000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1480862449000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1480862449000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1480862449000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1480862449000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1480862449000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1480862449000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1480862449000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1480862449000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1480862449000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1480862449000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1480862449000},{"_id":"themes/next/layout/_layout.swig","hash":"80ce3f7197604f2930a49665479ba9e7c2a821b1","modified":1480862449000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1480862449000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1480862449000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1480862449000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1480862449000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1480862449000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1480862449000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1480862449000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1480862449000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1480862449000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1480862449000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1480862449000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862449000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1480862449000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1480862449000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1480862449000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1480862449000},{"_id":"themes/next/layout/_macro/post.swig","hash":"f12f108c1f8e91cc55d49805d42c1fd96cdf51a6","modified":1480862449000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b8aaa008aafe4c6e325f7513719e1c251430883e","modified":1480862449000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1480862449000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a3ef28678467c45ee9416b41b943252e8036285","modified":1480862449000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1a43dde8c7bc53891be26b915a172b1f01e6bc26","modified":1480862449000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1480862449000},{"_id":"themes/next/layout/_partials/head.swig","hash":"ca56f92e2fa82b03853869f5073ee1a5626a4796","modified":1480862449000},{"_id":"themes/next/layout/_partials/header.swig","hash":"f3627f51810bc906e4020a3fef61bc3629b63581","modified":1480862449000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1480862449000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1480862449000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1480862449000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1480862449000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1480862449000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1480862449000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1480862449000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1480862449000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1480862449000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1480862449000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1480862449000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1480862449000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1480862449000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1480862449000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1480862449000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1480862449000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1480862449000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1480862449000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1480862449000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1480862449000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1480862449000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480862449000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1480862449000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1480862449000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1480862449000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1480862449000},{"_id":"source/path/to/alipay-reward-image.png","hash":"d3fb5774a98debc7a7494f2937237ebd023cc77a","modified":1480862449000},{"_id":"source/path/to/wechat-reward-image.png","hash":"6eab45c8b392ccf9cc9f0924c2d6c7a6fafd936e","modified":1480862449000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862449000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862449000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862449000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862449000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862449000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862449000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1480862449000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1480862449000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1480862449000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1480862449000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1480862449000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1480862449000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1480862449000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1480862449000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1480862449000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1480862449000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1480862449000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1480862449000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1480862449000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"82a2ac14d4200480a36bf10abcc3cc554ad744d6","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/hypers-analytics.swig","hash":"1f2d1beee60f27f3bf6c03d30533bf6f33c55097","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1480862449000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1480862449000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1480862449000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1480862449000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1480862449000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c5b28519b446c2af1e8754a6ae4d766823e6b348","modified":1480862449000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"3f0d6aa424f434e82ea507f740eeff110f996269","modified":1480862449000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1480862449000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1480862449000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1480862449000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1480862449000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1480862449000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1480862449000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1480862449000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1480862449000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1480862449000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1480862449000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1480862449000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1480862449000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1480862449000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1480862449000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1480862449000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1480862449000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1480862449000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1480862449000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1480862449000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1480862449000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1480862449000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1480862449000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1480862449000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1480862449000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1480862449000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1480862449000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1480862449000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1480862449000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1480862449000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1480862449000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1480862449000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1480862449000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"7b206cd8921bc042f8e37a74aea1abc8a5ec8ab4","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1480862449000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1480862449000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1480862449000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1480862449000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1480862449000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1480862449000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"5357db10656b260f8b332c67bb06e486bc64a4ad","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"12c3579807fe1dedffdd423761b447a2c2352790","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5433b6bc9d8f0c4685e760b326445ac51245b0a8","modified":1480862449000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480862449000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1480862449000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1480862449000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1480862449000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1480862449000}],"Category":[{"name":"翻译","_id":"ciwarqf8z0004qdcdje8n1f3a"},{"name":"深入理解JavaScript","_id":"ciwarqf950007qdcdf97fk0k3"}],"Data":[],"Page":[{"title":"分类","date":"2016-12-03T18:05:21.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2016-12-04 02:05:21\ntype: \"categories\"\n---\n","updated":"2016-12-04T14:40:49.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ciwarqf8s0001qdcdeq6e0sad","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-12-03T18:08:25.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-12-04 02:08:25\ntype: \"tags\"\n---\n","updated":"2016-12-04T14:40:49.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ciwarqf8w0003qdcd6qspf8gl","content":"","excerpt":"","more":""}],"Post":[{"title":"【译】javascript中的undefined可以被重写","_content":"\n众所周知,当声明一个变量，并且没有给赋值的情况下，它的初始值是`undefined`。\n但是在javascript中，怎么检查一个值是否为`undefined`呢？\n# 简单的回答\n在现代浏览器中，你可以安全的比较变量是否为`undefined`\n```\nif (name === undefined) {...}\n```\n一些人反对直接使用`undefined`变量进行比较，因为在旧的浏览器中允许它的值被重新赋值，比如下面这样:\n```javascript\nundefined = \"test\"\n```\n在被重新赋值后,使用`undefined`指令将不能正确的检测一个变量是否被赋值。\n不过，这个行为在2009年的[ECMAScript 5][1]被修复了。\n\n<!-- more -->\n\n>15.1.1.3 undefined\n> The value of undefined is undefined (see 8.1). This property has the attributes { **[[Writable]]: false**, [[Enumerable]]: false, [[Configurable]]: false }.\n\n在现代浏览器中，`undefined`的值将不能被重写\n\n#我们需要支持ie8或者更古老的浏览器怎么办\n通常`undefined`指令是安全的。在应用中并没有什么理由需要修改`undefined`的值。\n[Thomas的回答](http://stackoverflow.com/questions/3390396/how-to-check-for-undefined-in-javascript/3390635#3390635)使用具有说服力的推理，论证了这一点。\n\n> I don't hear people telling me that I shouldn't use setTimeout because someone can\n> 我不听别人告诉我，我不应该使用`setTimeout`，因为有的人像这样用:\n```\nwindow.setTimeout = function () {\n    alert(\"Got you now!\");\n};\n```\n>下面一行，“它可以被重新赋值”，raw === undefined返回false\n如果你仍然很在意,有两个方法可以检查一个值是否为`undefined`，即使全局`window.undefined`已经被重写\n```\nif (name === void(0)) {...}\n```\n在这个例子中0没有任何实际意义,你想要使用 `1` or `function(){}`也无所谓。 `void(anything)`都会计算得到`undefiend`\n\n另外一种选择，你可以使用`typeof`操作符安全地检查是否已经被赋值。你可以检查一个值的类型是否为\"undefined\"代替与全局的`undefined`比较.\n```\nif (typeof name === \"undefined\") {...}\n```\n注意第二个选择与前一个方案稍微有点差异.尽管`name`没有被声明,`typeof`会返回他是`undefined`。如果你直接使用name与`undefined`or `void(0)`你会得到`ReferenceError`异常的错误.\n\n#但是不要使用void(0)指令\n在代码中避免使用`void(0)`或者` typeof x === \"undefined\"`，你可以使用`isUndefined function`方法把他们包起来，这样你使用的时候就不用再特意说明了.\n```javascript\nfunction isUndefined(value){\n    //获得undefined，保证它没有被重新赋值\n    var undefined = void(0);\n    return value === undefined;\n}\n```\n一些工具库已经部署了这个方法,例如:` _.isUndefined`，[underscore中的isUndefined方法][2]\n#\n>[原文地址](how-to-check-for-undefined-in-javascript)\n>原文标题：在javascript中怎样检查undefiend\n>初次翻译，如有错误，欢迎指正\n\n  [1]: https://es5.github.io/#x15.1.1.3\n  [2]: http://underscorejs.org/#isUndefined","source":"_posts/【译】javascript中的undefined可以被重写.md","raw":"---\ntitle: 【译】javascript中的undefined可以被重写\ncategories: 翻译\ntags:\n  - JavaScript\n  - 翻译\n---\n\n众所周知,当声明一个变量，并且没有给赋值的情况下，它的初始值是`undefined`。\n但是在javascript中，怎么检查一个值是否为`undefined`呢？\n# 简单的回答\n在现代浏览器中，你可以安全的比较变量是否为`undefined`\n```\nif (name === undefined) {...}\n```\n一些人反对直接使用`undefined`变量进行比较，因为在旧的浏览器中允许它的值被重新赋值，比如下面这样:\n```javascript\nundefined = \"test\"\n```\n在被重新赋值后,使用`undefined`指令将不能正确的检测一个变量是否被赋值。\n不过，这个行为在2009年的[ECMAScript 5][1]被修复了。\n\n<!-- more -->\n\n>15.1.1.3 undefined\n> The value of undefined is undefined (see 8.1). This property has the attributes { **[[Writable]]: false**, [[Enumerable]]: false, [[Configurable]]: false }.\n\n在现代浏览器中，`undefined`的值将不能被重写\n\n#我们需要支持ie8或者更古老的浏览器怎么办\n通常`undefined`指令是安全的。在应用中并没有什么理由需要修改`undefined`的值。\n[Thomas的回答](http://stackoverflow.com/questions/3390396/how-to-check-for-undefined-in-javascript/3390635#3390635)使用具有说服力的推理，论证了这一点。\n\n> I don't hear people telling me that I shouldn't use setTimeout because someone can\n> 我不听别人告诉我，我不应该使用`setTimeout`，因为有的人像这样用:\n```\nwindow.setTimeout = function () {\n    alert(\"Got you now!\");\n};\n```\n>下面一行，“它可以被重新赋值”，raw === undefined返回false\n如果你仍然很在意,有两个方法可以检查一个值是否为`undefined`，即使全局`window.undefined`已经被重写\n```\nif (name === void(0)) {...}\n```\n在这个例子中0没有任何实际意义,你想要使用 `1` or `function(){}`也无所谓。 `void(anything)`都会计算得到`undefiend`\n\n另外一种选择，你可以使用`typeof`操作符安全地检查是否已经被赋值。你可以检查一个值的类型是否为\"undefined\"代替与全局的`undefined`比较.\n```\nif (typeof name === \"undefined\") {...}\n```\n注意第二个选择与前一个方案稍微有点差异.尽管`name`没有被声明,`typeof`会返回他是`undefined`。如果你直接使用name与`undefined`or `void(0)`你会得到`ReferenceError`异常的错误.\n\n#但是不要使用void(0)指令\n在代码中避免使用`void(0)`或者` typeof x === \"undefined\"`，你可以使用`isUndefined function`方法把他们包起来，这样你使用的时候就不用再特意说明了.\n```javascript\nfunction isUndefined(value){\n    //获得undefined，保证它没有被重新赋值\n    var undefined = void(0);\n    return value === undefined;\n}\n```\n一些工具库已经部署了这个方法,例如:` _.isUndefined`，[underscore中的isUndefined方法][2]\n#\n>[原文地址](how-to-check-for-undefined-in-javascript)\n>原文标题：在javascript中怎样检查undefiend\n>初次翻译，如有错误，欢迎指正\n\n  [1]: https://es5.github.io/#x15.1.1.3\n  [2]: http://underscorejs.org/#isUndefined","slug":"【译】javascript中的undefined可以被重写","published":1,"date":"2016-12-04T14:40:49.000Z","updated":"2016-12-04T14:40:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwarqf8n0000qdcd0v0q71dq","content":"<p>众所周知,当声明一个变量，并且没有给赋值的情况下，它的初始值是<code>undefined</code>。<br>但是在javascript中，怎么检查一个值是否为<code>undefined</code>呢？</p>\n<h1 id=\"简单的回答\"><a href=\"#简单的回答\" class=\"headerlink\" title=\"简单的回答\"></a>简单的回答</h1><p>在现代浏览器中，你可以安全的比较变量是否为<code>undefined</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (name === undefined) &#123;...&#125;</div></pre></td></tr></table></figure></p>\n<p>一些人反对直接使用<code>undefined</code>变量进行比较，因为在旧的浏览器中允许它的值被重新赋值，比如下面这样:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">undefined</span> = <span class=\"string\">\"test\"</span></div></pre></td></tr></table></figure></p>\n<p>在被重新赋值后,使用<code>undefined</code>指令将不能正确的检测一个变量是否被赋值。<br>不过，这个行为在2009年的<a href=\"https://es5.github.io/#x15.1.1.3\" target=\"_blank\" rel=\"external\">ECMAScript 5</a>被修复了。</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>15.1.1.3 undefined<br>The value of undefined is undefined (see 8.1). This property has the attributes { <strong>[[Writable]]: false</strong>, [[Enumerable]]: false, [[Configurable]]: false }.</p>\n</blockquote>\n<p>在现代浏览器中，<code>undefined</code>的值将不能被重写</p>\n<p>#我们需要支持ie8或者更古老的浏览器怎么办<br>通常<code>undefined</code>指令是安全的。在应用中并没有什么理由需要修改<code>undefined</code>的值。<br><a href=\"http://stackoverflow.com/questions/3390396/how-to-check-for-undefined-in-javascript/3390635#3390635\" target=\"_blank\" rel=\"external\">Thomas的回答</a>使用具有说服力的推理，论证了这一点。</p>\n<blockquote>\n<p>I don’t hear people telling me that I shouldn’t use setTimeout because someone can<br>我不听别人告诉我，我不应该使用<code>setTimeout</code>，因为有的人像这样用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.setTimeout = function () &#123;</div><div class=\"line\">    alert(&quot;Got you now!&quot;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>下面一行，“它可以被重新赋值”，raw === undefined返回false<br>如果你仍然很在意,有两个方法可以检查一个值是否为<code>undefined</code>，即使全局<code>window.undefined</code>已经被重写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (name === void(0)) &#123;...&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>在这个例子中0没有任何实际意义,你想要使用 <code>1</code> or <code>function(){}</code>也无所谓。 <code>void(anything)</code>都会计算得到<code>undefiend</code></p>\n<p>另外一种选择，你可以使用<code>typeof</code>操作符安全地检查是否已经被赋值。你可以检查一个值的类型是否为”undefined”代替与全局的<code>undefined</code>比较.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (typeof name === &quot;undefined&quot;) &#123;...&#125;</div></pre></td></tr></table></figure></p>\n<p>注意第二个选择与前一个方案稍微有点差异.尽管<code>name</code>没有被声明,<code>typeof</code>会返回他是<code>undefined</code>。如果你直接使用name与<code>undefined</code>or <code>void(0)</code>你会得到<code>ReferenceError</code>异常的错误.</p>\n<p>#但是不要使用void(0)指令<br>在代码中避免使用<code>void(0)</code>或者<code>typeof x === &quot;undefined&quot;</code>，你可以使用<code>isUndefined function</code>方法把他们包起来，这样你使用的时候就不用再特意说明了.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isUndefined</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//获得undefined，保证它没有被重新赋值</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"literal\">undefined</span> = <span class=\"keyword\">void</span>(<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> value === <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>一些工具库已经部署了这个方法,例如:<code>_.isUndefined</code>，<a href=\"http://underscorejs.org/#isUndefined\" target=\"_blank\" rel=\"external\">underscore中的isUndefined方法</a><br>#</p>\n<blockquote>\n<p><a href=\"how-to-check-for-undefined-in-javascript\">原文地址</a><br>原文标题：在javascript中怎样检查undefiend<br>初次翻译，如有错误，欢迎指正</p>\n</blockquote>\n","excerpt":"<p>众所周知,当声明一个变量，并且没有给赋值的情况下，它的初始值是<code>undefined</code>。<br>但是在javascript中，怎么检查一个值是否为<code>undefined</code>呢？</p>\n<h1 id=\"简单的回答\"><a href=\"#简单的回答\" class=\"headerlink\" title=\"简单的回答\"></a>简单的回答</h1><p>在现代浏览器中，你可以安全的比较变量是否为<code>undefined</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (name === undefined) &#123;...&#125;</div></pre></td></tr></table></figure></p>\n<p>一些人反对直接使用<code>undefined</code>变量进行比较，因为在旧的浏览器中允许它的值被重新赋值，比如下面这样:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"literal\">undefined</span> = <span class=\"string\">\"test\"</span></div></pre></td></tr></table></figure></p>\n<p>在被重新赋值后,使用<code>undefined</code>指令将不能正确的检测一个变量是否被赋值。<br>不过，这个行为在2009年的<a href=\"https://es5.github.io/#x15.1.1.3\">ECMAScript 5</a>被修复了。</p>","more":"<blockquote>\n<p>15.1.1.3 undefined<br>The value of undefined is undefined (see 8.1). This property has the attributes { <strong>[[Writable]]: false</strong>, [[Enumerable]]: false, [[Configurable]]: false }.</p>\n</blockquote>\n<p>在现代浏览器中，<code>undefined</code>的值将不能被重写</p>\n<p>#我们需要支持ie8或者更古老的浏览器怎么办<br>通常<code>undefined</code>指令是安全的。在应用中并没有什么理由需要修改<code>undefined</code>的值。<br><a href=\"http://stackoverflow.com/questions/3390396/how-to-check-for-undefined-in-javascript/3390635#3390635\">Thomas的回答</a>使用具有说服力的推理，论证了这一点。</p>\n<blockquote>\n<p>I don’t hear people telling me that I shouldn’t use setTimeout because someone can<br>我不听别人告诉我，我不应该使用<code>setTimeout</code>，因为有的人像这样用:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">window.setTimeout = function () &#123;</div><div class=\"line\">    alert(&quot;Got you now!&quot;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>下面一行，“它可以被重新赋值”，raw === undefined返回false<br>如果你仍然很在意,有两个方法可以检查一个值是否为<code>undefined</code>，即使全局<code>window.undefined</code>已经被重写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (name === void(0)) &#123;...&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>在这个例子中0没有任何实际意义,你想要使用 <code>1</code> or <code>function(){}</code>也无所谓。 <code>void(anything)</code>都会计算得到<code>undefiend</code></p>\n<p>另外一种选择，你可以使用<code>typeof</code>操作符安全地检查是否已经被赋值。你可以检查一个值的类型是否为”undefined”代替与全局的<code>undefined</code>比较.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (typeof name === &quot;undefined&quot;) &#123;...&#125;</div></pre></td></tr></table></figure></p>\n<p>注意第二个选择与前一个方案稍微有点差异.尽管<code>name</code>没有被声明,<code>typeof</code>会返回他是<code>undefined</code>。如果你直接使用name与<code>undefined</code>or <code>void(0)</code>你会得到<code>ReferenceError</code>异常的错误.</p>\n<p>#但是不要使用void(0)指令<br>在代码中避免使用<code>void(0)</code>或者<code>typeof x === &quot;undefined&quot;</code>，你可以使用<code>isUndefined function</code>方法把他们包起来，这样你使用的时候就不用再特意说明了.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isUndefined</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//获得undefined，保证它没有被重新赋值</span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"literal\">undefined</span> = <span class=\"keyword\">void</span>(<span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> value === <span class=\"literal\">undefined</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>一些工具库已经部署了这个方法,例如:<code>_.isUndefined</code>，<a href=\"http://underscorejs.org/#isUndefined\">underscore中的isUndefined方法</a><br>#</p>\n<blockquote>\n<p><a href=\"how-to-check-for-undefined-in-javascript\">原文地址</a><br>原文标题：在javascript中怎样检查undefiend<br>初次翻译，如有错误，欢迎指正</p>\n</blockquote>"},{"title":"揭秘命名函数表达式","_content":"\n# 前言\n网上还没用发现有人对命名函数表达式进去重复深入的讨论，正因为如此，网上出现了各种各样的误解，本文将从原理和实践两个方面来探讨`JavaScript`关于命名函数表达式的优缺点。\n简单的说，命名函数表达式只有一个用户，那就是在==Debug==或者==Profiler==分析的时候来描述函数的名称，也可以使用函数名实现递归，但很快你就会发现其实是不切实际的。当然，如果你不关注调试，那就没什么可担心的了，否则，如果你想了解兼容性方面的东西的话，你还是应该继续往下看看。\n我们先开始看看，什么叫函数表达式，然后再说一下现代调试器如何处理这些表达式，如果你已经对这方面很熟悉的话，请直接跳过此小节。\n本文中后半部分说了好多JScript,基本上是过时的东西，我觉得直接略过就行\n\n<!-- more -->\n \n# 函数表达式和函数声明\n在`ECMAScript`中，创建函数的最常用的两个方法是**函数表达式**和**函数声明**，两者期间的区别是有点晕，因为`ECMAScript`规范只明确了一点：函数声明必须带有标示符（==Identifier==）（就是大家常说的函数名称），而函数表达式则可以省略这个标示符：\n \n1. 函数声明:\n```javascript\nfunction 函数名称 (参数：可选){ 函数体 }\n```\n2. 函数表达式：\n```javascript\nfunction 函数名称（可选）(参数：可选){ 函数体 }\n```\n \n所以，可以看出，如果不声明函数名称，它肯定是表达式，可如果声明了函数名称的话，如何判断是函数声明还是函数表达式呢？==ECMAScript==是通过上下文来区分的，如果`function foo(){}`是作为赋值表达式的一部分的话，那它就是一个函数表达式，如果`function foo(){}`被包含在一个函数体内，或者位于程序的最顶部的话，那它就是一个函数声明。\n \n```javascript\nfunction foo(){} // 声明，因为它是程序的一部分\n \nvar bar = function foo(){}; // 表达式，因为它是赋值表达式的一部分\n \nnew function bar(){}; // 表达式，因为它是new表达式\n \n(function(){\n    function bar(){} // 声明，因为它是函数体的一部分\n})();\n```\n \n还有一种函数表达式不太常见，就是被括号括住的`(function foo(){})`，他是表达式的原因是因为括号 `()`是一个分组操作符，它的内部只能包含表达式，我们来看几个例子：\n \n```javascript\nfunction foo(){} // 函数声明\n \n(function foo(){}); // 函数表达式：包含在分组操作符内\n \ntry {\n    (var x = 5); // 分组操作符，只能包含表达式而不能包含语句：这里的var就是语句\n} catch(err) {\n    // SyntaxError\n}\n```\n \n你可以会想到，在使用eval对JSON进行执行的时候，JSON字符串通常被包含在一个圆括号里：`eval('(' + json + ')')`，这样做的原因就是因为分组操作符，也就是这对括号，会让解析器强制将JSON的花括号解析成表达式而不是代码块。\n \n```javascript\ntry {\n    { \"x\": 5 }; // \"{\" 和 \"}\" 做解析成代码块\n} catch(err) {\n    // SyntaxError\n}\n \n({ \"x\": 5 }); // 分组操作符强制将\"{\" 和 \"}\"作为对象字面量来解析\n```\n \n表达式和声明存在着十分微妙的差别，首先，函数声明会在任何表达式被解析和求值之前先被解析和求值，即使你的声明在代码的最后一行，它也会在同作用域内第一个表达式之前被解析/求值，参考如下例子，函数fn是在alert之后声明的，但是在alert执行的时候，fn已经有定义了：\n```javascript\nalert(fn());\n \nfunction fn() {\n    return 'Hello world!';\n}\n```\n \n另外，还有一点需要提醒一下，函数声明在条件语句内虽然可以用，但是没有被标准化，也就是说不同的环境可能有不同的执行结果，所以这样情况下，最好使用函数表达式：\n```javascript\n// 千万别这样做！\n// 因为有的浏览器会返回first的这个function，而有的浏览器返回的却是第二个\n \nif (true) {\n    function foo() {\n      return 'first';\n    }\n}else {\n    function foo() {\n      return 'second';\n    }\n}\nfoo();\n \n// 相反，这样情况，我们要用函数表达式\nvar foo;\nif (true) {\n    foo = function() {\n      return 'first';\n    };\n}else {\n    foo = function() {\n      return 'second';\n    };\n}\nfoo();\n```\n \n函数声明的实际规则如下：\n \n>函数声明只能出现在程序或函数体内。从句法上讲，它们 不能出现在Block（块）（{ ... }）中，例如不能出现在 if、while 或 for 语句中。因为 Block（块） 中只能包含Statement语句， 而不能包含函数声明这样的源元素。另一方面，仔细看一看规则也会发现，唯一可能让表达式出现在Block（块）中情形，就是让它作为表达式语句的一部分。但是，规范明确规定了表达式语句不能以关键字function开头。而这实际上就是说，函数表达式同样也不能出现在Statement语句或Block（块）中（因为Block（块）就是由Statement语句构成的）。\n \n# 函数语句\n \n在ECMAScript的语法扩展中，有一个是函数语句，目前只有基于[Gecko](http://baike.baidu.com/link?url=gre8zdQLIoY1uzdgpsokc6hMoV8Uh2IaunRbQ-DyvWG2HusZUT2XFEcRKKvF997lPyxLi8EsBYRuOhMo0sRGea)的浏览器实现了该扩展，所以对于下面的例子，我们仅是抱着学习的目的来看，一般来说不推荐使用（除非你针对Gecko浏览器进行开发）。\n \n1. 一般语句能用的地方，函数语句也能用，当然也包括Block块中：\n```javascript\nif (true) {\n    function f(){ }\n}else {\n    function f(){ }\n}\n```\n \n2. 函数语句可以像其他语句一样被解析，包含基于条件执行的情形\n```javascript\nif (true) {\n    function foo(){ return 1; }\n}else {\n    function foo(){ return 2; }\n}\nfoo(); // 1\n// 注：其它客户端会将foo解析成函数声明\n// 因此，第二个foo会覆盖第一个，结果返回2，而不是1\n```\n \n3. 函数语句不是在变量初始化期间声明的，而是在运行时声明的——与函数表达式一样。不过，函数语句的标识符一旦声明能在函数的整个作用域生效了。标识符有效性正是导致函数语句与函数表达式不同的关键所在（下一小节我们将会展示命名函数表达式的具体行为）。\n```javascript\n// 此刻，foo还没用声明\ntypeof foo; // \"undefined\"\nif (true) {\n    // 进入这里以后，foo就被声明在整个作用域内了\n    function foo(){ return 1; }\n}else {\n    // 从来不会走到这里，所以这里的foo也不会被声明\n    function foo(){ return 2; }\n}\ntypeof foo; // \"function\"\n```\n不过，我们可以使用下面这样的符合标准的代码来模式上面例子中的函数语句：\n```javascript\nvar foo;\nif (true) {\n    foo = function foo(){ return 1; };\n}else {\n    foo = function foo() { return 2; };\n}\n```\n \n4. 函数语句和函数声明（或命名函数表达式）的字符串表示类似，也包括标识符：\n```javascript\nif (true) {\n    function foo(){ return 1; }\n}\nString(foo); // function foo() { return 1; }\n```\n \n5. 另外一个，早期基于[Gecko](http://baike.baidu.com/link?url=gre8zdQLIoY1uzdgpsokc6hMoV8Uh2IaunRbQ-DyvWG2HusZUT2XFEcRKKvF997lPyxLi8EsBYRuOhMo0sRGea)的实现（Firefox 3及以前版本）中存在一个bug，即函数语句覆盖函数声明的方式不正确。在这些早期的实现中，函数语句不知何故不能覆盖函数声明：\n```javascript\n// 函数声明\nfunction foo(){ return 1; }\nif (true) {\n    // 用函数语句重写\n    function foo(){ return 2; }\n}\nfoo(); // FF3以下返回1，FF3.5以上返回2\n// 不过，如果前面是函数表达式，则没用问题\nvar foo = function(){ return 1; };\nif (true) {\n    function foo(){ return 2; }\n}\nfoo(); // 所有版本都返回2\n```\n再次强调一点，上面这些例子只是在某些浏览器支持，所以推荐大家不要使用这些，除非你就在特性的浏览器上做开发。\n \n# 命名函数表达式\n \n函数表达式在实际应用中还是很常见的，在web开发中友个常用的模式是基于对某种特性的测试来伪装函数定义，从而达到性能优化的目的，但由于这种方式都是在同一作用域内，所以基本上一定要用函数表达式：\n```javascript\n// 该代码来自Garrett Smith的APE Javascript library库(http://dhtmlkitchen.com/ape/)\nvar contains = (function() {\n    var docEl = document.documentElement;\n \n    if (typeof docEl.compareDocumentPosition != 'undefined') {\n      return function(el, b) {\n        return (el.compareDocumentPosition(b) & 16) !== 0;\n      };\n    }\n    else if (typeof docEl.contains != 'undefined') {\n      return function(el, b) {\n        return el !== b && el.contains(b);\n      };\n    }\n    return function(el, b) {\n      if (el === b) return false;\n      while (el != b && (b = b.parentNode) != null);\n      return el === b;\n    };\n})();\n```\n \n提到命名函数表达式，理所当然，就是它得有名字，前面的例子var bar = function foo(){};就是一个有效的命名函数表达式，但有一点需要记住：这个名字只在新定义的函数作用域内有效，因为规范规定了标示符不能在外围的作用域内有效：\n```javascript\nvar f = function foo(){\n    return typeof foo; // foo是在内部作用域内有效\n};\n// foo在外部用于是不可见的\ntypeof foo; // \"undefined\"\nf(); // \"function\"\n```\n既然，这么要求，那命名函数表达式到底有啥用啊？为啥要取名？\n正如我们开头所说：给它一个名字就是可以让调试过程更方便，因为在调试的时候，如果在调用栈中的每个项都有自己的名字来描述，那么调试过程就太爽了，感受不一样嘛。\n \n# 调试器中的函数名\n \n如果一个函数有名字，那调试器在调试的时候会将它的名字显示在调用的栈上。有些调试器（Firebug）有时候还会为你们函数取名并显示，让他们和那些应用该函数的便利具有相同的角色，可是通常情况下，这些调试器只安装简单的规则来取名，所以说没有太大价格，我们来看一个例子：\n```javascript\nfunction foo(){\n    return bar();\n}\nfunction bar(){\n    return baz();\n}\nfunction baz(){\n    debugger;\n}\nfoo();\n \n// 这里我们使用了3个带名字的函数声明\n// 所以当调试器走到debugger语句的时候，Firebug的调用栈上看起来非常清晰明了\n// 因为很明白地显示了名称\nbaz\nbar\nfoo\nexpr_test.html()\n```\n \n通过查看调用栈的信息，我们可以很明了地知道foo调用了bar, bar又调用了baz（而foo本身有在expr_test.html文档的全局作用域内被调用），不过，还有一个比较爽地方，就是刚才说的Firebug为匿名表达式取名的功能：\n```javascript\nfunction foo(){\n    return bar();\n}\nvar bar = function(){\n    return baz();\n}\nfunction baz(){\n    debugger;\n}\nfoo();\n \n// Call stack\nbaz\nbar() //看到了么？\nfoo\nexpr_test.html()\n```\n \n然后，当函数表达式稍微复杂一些的时候，调试器就不那么聪明了，我们只能在调用栈中看到问号：\n \n```javascript\nfunction foo(){\n    return bar();\n  }\n  var bar = (function(){\n    if (window.addEventListener) {\n      return function(){\n        return baz();\n      };\n    }\n    else if (window.attachEvent) {\n      return function() {\n        return baz();\n      };\n    }\n  })();\n  function baz(){\n    debugger;\n  }\n  foo();\n \n  // Call stack\n  baz\n  (?)() // 这里可是问号哦\n  foo\n  expr_test.html()\n```\n \n另外，当把函数赋值给多个变量的时候，也会出现令人郁闷的问题：\n \n```javascript\nfunction foo(){\n    return baz();\n  }\n  var bar = function(){\n    debugger;\n  };\n  var baz = bar;\n  bar = function() {\n    alert('spoofed');\n  };\n  foo();\n \n  // Call stack:\n  bar()\n  foo\n  expr_test.html()\n```\n \n这时候，调用栈显示的是foo调用了bar，但实际上并非如此，之所以有这种问题，是因为baz和另外一个包含alert('spoofed')的函数做了引用交换所导致的。\n \n归根结底，只有给函数表达式取个名字，才是最稳妥的办法，也就是使用**命名函数表达式**。我们来使用带名字的表达式来重写上面的例子（注意立即调用的表达式块里返回的2个函数的名字都是bar）：\n```javascript\n  function foo(){\n    return bar();\n  }\n  var bar = (function(){\n    if (window.addEventListener) {\n      return function bar(){\n        return baz();\n      };\n    }\n    else if (window.attachEvent) {\n      return function bar() {\n        return baz();\n      };\n    }\n  })();\n  function baz(){\n    debugger;\n  }\n  foo();\n \n  // 又再次看到了清晰的调用栈信息了耶!\n  baz\n  bar\n  foo\n  expr_test.html()\n```\n \nOK，又学了一招吧？不过在高兴之前，我们再看看不同寻常的JScript吧。\n#JScript\n这一部分讲的全都是[JScript](http://baike.baidu.com/link?url=48ETrhbO1aXur5vwakiP1VZVKRaXJwc18zy8E87wtDaVUkSg2XfQFwTVFNDX42QcHaEMI_4KylkK4RdQkyCYra)而不是Javascript这两个真不是一种东西\n>netscape开发了在Navigator中使用的LiveScript语言，后改名为JavaScript\nMicrosoft发行jscript用于internet explorer.\n最初的jscript和javascript差异过大，web程序员不得不痛苦的为两种浏览器编写两种脚本。于是诞生了ECMAScript,是一种国际标准化的javascript版本。现在的主流浏览器都支持这种版本。\njavascript是一个通用的名称，所有浏览器都认识，而jscript只有IE认识。\n其他语言细节上的区别，不是一两下能说完的。编程时最好遵循ECMAscript标准。这样可以保证兼容性。\n顺便说一下,javascript原来叫Livescript，后来Sun的java风头正盛的时候netscape就把名字改成javascript。\n \n个人感觉这一段基本上可以忽略了 但为了尊重作者我还是把它整理了一下。\n \n## JScript的Bug\n \n比较恶的是，IE的ECMAScript实现JScript严重混淆了命名函数表达式，搞得现很多人都出来反对命名函数表达式，而且即便是最新的一版（IE8中使用的5.8版）仍然存在下列问题。\n \n下面我们就来看看IE在实现中究竟犯了那些错误，俗话说知已知彼，才能百战不殆。我们来看看如下几个例子：\n \n**例1：函数表达式的标示符泄露到外部作用域**\n \n```javascript\nvar f = function g(){};\ntypeof g; // \"function\"\n```\n上面我们说过，命名函数表达式的标示符在外部作用域是无效的，但JScript明显是违反了这一规范，上面例子中的标示符g被解析成函数对象，这就乱了套了，很多难以发现的bug都是因为这个原因导致的。\n==注：IE9貌似已经修复了这个问题==\n \n**例2：将命名函数表达式同时当作函数声明和函数表达式**\n \n```javascript\ntypeof g; // \"function\"\nvar f = function g(){};\n```\n \n特性环境下，函数声明会优先于任何表达式被解析，上面的例子展示的是JScript实际上是把命名函数表达式当成函数声明了，因为它在实际声明之前就解析了g。\n \n这个例子引出了下一个例子。\n \n**例3：命名函数表达式会创建两个截然不同的函数对象！**\n```javascript\n    var f = function g(){};\n    f === g; // false\n \n    f.expando = 'foo';\n    g.expando; // undefined\n```\n \n看到这里，大家会觉得问题严重了，因为修改任何一个对象，另外一个没有什么改变，这太恶了。通过这个例子可以发现，创建2个不同的对象，也就是说如果你想修改f的属性中保存某个信息，然后想当然地通过引用相同对象的g的同名属性来使用，那问题就大了，因为根本就不可能。\n \n再来看一个稍微复杂的例子：\n \n**例4：仅仅顺序解析函数声明而忽略条件语句块**\n \n```javascript\n    var f = function g() {\n      return 1;\n    };\n    if (false) {\n      f = function g(){\n        return 2;\n      };\n    }\n    g(); // 2\n```\n \n这个bug查找就难多了，但导致bug的原因却非常简单。首先，g被当作函数声明解析，由于JScript中的函数声明不受条件代码块约束，所以在这个很恶的if分支中，g被当作另一个函数function g(){ return 2 }，也就是又被声明了一次。然后，所有“常规的”表达式被求值，而此时f被赋予了另一个新创建的对象的引用。由于在对表达式求值的时候，永远不会进入“这个可恶if分支，因此f就会继续引用第一个函数function g(){ return 1 }。分析到这里，问题就很清楚了：假如你不够细心，在f中调用了g，那么将会调用一个毫不相干的g函数对象。\n \n你可能会文，将不同的对象和arguments.callee相比较时，有什么样的区别呢？我们来看看：\n \n```javascript\n  var f = function g(){\n    return [\n      arguments.callee == f,\n      arguments.callee == g\n    ];\n  };\n  f(); // [true, false]\n  g(); // [false, true]\n```\n \n可以看到，arguments.callee的引用一直是被调用的函数，实际上这也是好事，稍后会解释。\n \n还有一个有趣的例子，那就是在不包含声明的赋值语句中使用命名函数表达式：\n \n```javascript\n  (function(){\n    f = function f(){};\n  })();\n```\n \n按照代码的分析，我们原本是想创建一个全局属性f（注意不要和一般的匿名函数混淆了，里面用的是带名字的生命），JScript在这里捣乱了一把，首先他把表达式当成函数声明解析了，所以左边的f被声明为局部变量了（和一般的匿名函数里的声明一样），然后在函数执行的时候，f已经是定义过的了，右边的function f(){}则直接就赋值给局部变量f了，所以f根本就不是全局属性。\n \n了解了JScript这么变态以后，我们就要及时预防这些问题了，首先**防范标识符泄漏带外部作用域**，其次，应该永远**不引用被用作函数名称的标识符**；还记得前面例子中那个讨人厌的标识符g吗？——如果我们能够当g不存在，可以避免多少不必要的麻烦哪。因此，关键就在于始终要通过f或者arguments.callee来引用函数。如果你使用了命名函数表达式，那么应该只在调试的时候利用那个名字。最后，还要记住一点，一定要把**命名函数表达式声明期间错误创建的函数清理干净**。\n \n对于，上面最后一点，我们还得再解释一下。\n \n## WebKit的displayName\n \n~~WebKit团队在这个问题采取了有点儿另类的策略。介于匿名和命名函数如此之差的表现力，WebKit引入了一个“特殊的”`displayName`属性（本质上是一个字符串），如果开发人员为函数的这个属性赋值，则该属性的值将在调试器或性能分析器中被显示在函数“名称”的位置上。[Francisco Tolmasky详细地解释了这个策略的原理和实现](http://www.alertdebugging.com/2009/04/29/building-a-better-javascript-profiler-with-webkit/)。~~\n \n# ECMAScript-5\n \n在ECMAScript-262第5版引入了**严格模式（strict mode）**。开启严格模式的实现会禁用语言中的那些不稳定、不可靠和不安全的特性。据说出于安全方面的考虑，`arguments.callee`属性将在严格模式下被“封杀”。因此，在处于严格模式时，访问`arguments.callee`会导致`TypeError`（参见ECMA-262第5版的10.6节）。而我之所以在此提到严格模式，是因为如果在基于第5版标准的实现中无法使用`arguments.callee`来执行递归操作，那么使用命名函数表达式的可能性就会大大增加。从这个意义上来说，理解命名函数表达式的语义及其bug也就显得更加重要了。\n \n```javascript\n// 此前，你可能会使用arguments.callee\n  (function(x) {\n    if (x <= 1) return 1;\n    return x * arguments.callee(x - 1);\n  })(10);\n \n  // 但在严格模式下，有可能就要使用命名函数表达式\n  (function factorial(x) {\n    if (x <= 1) return 1;\n    return x * factorial(x - 1);\n  })(10);\n \n  // 要么就退一步，使用没有那么灵活的函数声明\n  function factorial(x) {\n    if (x <= 1) return 1;\n    return x * factorial(x - 1);\n  }\n  factorial(10);\n```\n \n# 致谢\n \n**_理查德· 康福德（Richard Cornford）_**，是他率先[解释了JScript中命名函数表达式所存在的bug](http://groups.google.com/group/comp.lang.javascript/msg/5b508b03b004bce8)。理查德解释了我在这篇文章中提及的大多数bug，所以我强烈建议大家去看看他的解释。我还要感谢**_Yann-Erwan Perio_**和**_道格拉斯·克劳克佛德（Douglas Crockford）_**，他们早在2003年就在[comp.lang.javascript论坛中提及并讨论NFE问题了](http://groups.google.com/group/comp.lang.javascript/msg/03d53d114d176323)。\n \n**_约翰-戴维·道尔顿（John-David Dalton）_**对“最终解决方案”提出了很好的建议。\n \n**_托比·兰吉_**的点子被我用在了“替代方案”中。\n \n**_盖瑞特·史密斯（Garrett Smith）_**和**_德米特里·苏斯尼科（Dmitry Soshnikov）_**对本文的多方面作出了补充和修正。\n \n英文原文：http://kangax.github.com/nfe/\n \n参考译文：[连接访问](http://www.cn-cuckoo.com/main/wp-content/uploads/2009/12/named-function-expressions-demystified.html#jscript-memory-management) (<span style=\"text-decoration: underline;\">SpiderMonkey的怪癖</span>之后的章节参考该文)\n \n# 关于本文\n本文转自[TOM大叔](http://www.cnblogs.com/TomXu)的[深入理解JavaScript系列](http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html)本文有大量删减，[查看原文](http://www.cnblogs.com/TomXu/archive/2011/12/29/2290308.html)\n \n>【深入理解JavaScript系列】文章，包括了原创，翻译，转载，整理等各类型文章，原文是TOM大叔的一个非常不错的专题，现将其重新整理发布。谢谢大叔。","source":"_posts/揭秘命名函数表达式.md","raw":"---\ntitle: 揭秘命名函数表达式\ncategories: 深入理解JavaScript\ntags:\n  - JavaScript\n---\n\n# 前言\n网上还没用发现有人对命名函数表达式进去重复深入的讨论，正因为如此，网上出现了各种各样的误解，本文将从原理和实践两个方面来探讨`JavaScript`关于命名函数表达式的优缺点。\n简单的说，命名函数表达式只有一个用户，那就是在==Debug==或者==Profiler==分析的时候来描述函数的名称，也可以使用函数名实现递归，但很快你就会发现其实是不切实际的。当然，如果你不关注调试，那就没什么可担心的了，否则，如果你想了解兼容性方面的东西的话，你还是应该继续往下看看。\n我们先开始看看，什么叫函数表达式，然后再说一下现代调试器如何处理这些表达式，如果你已经对这方面很熟悉的话，请直接跳过此小节。\n本文中后半部分说了好多JScript,基本上是过时的东西，我觉得直接略过就行\n\n<!-- more -->\n \n# 函数表达式和函数声明\n在`ECMAScript`中，创建函数的最常用的两个方法是**函数表达式**和**函数声明**，两者期间的区别是有点晕，因为`ECMAScript`规范只明确了一点：函数声明必须带有标示符（==Identifier==）（就是大家常说的函数名称），而函数表达式则可以省略这个标示符：\n \n1. 函数声明:\n```javascript\nfunction 函数名称 (参数：可选){ 函数体 }\n```\n2. 函数表达式：\n```javascript\nfunction 函数名称（可选）(参数：可选){ 函数体 }\n```\n \n所以，可以看出，如果不声明函数名称，它肯定是表达式，可如果声明了函数名称的话，如何判断是函数声明还是函数表达式呢？==ECMAScript==是通过上下文来区分的，如果`function foo(){}`是作为赋值表达式的一部分的话，那它就是一个函数表达式，如果`function foo(){}`被包含在一个函数体内，或者位于程序的最顶部的话，那它就是一个函数声明。\n \n```javascript\nfunction foo(){} // 声明，因为它是程序的一部分\n \nvar bar = function foo(){}; // 表达式，因为它是赋值表达式的一部分\n \nnew function bar(){}; // 表达式，因为它是new表达式\n \n(function(){\n    function bar(){} // 声明，因为它是函数体的一部分\n})();\n```\n \n还有一种函数表达式不太常见，就是被括号括住的`(function foo(){})`，他是表达式的原因是因为括号 `()`是一个分组操作符，它的内部只能包含表达式，我们来看几个例子：\n \n```javascript\nfunction foo(){} // 函数声明\n \n(function foo(){}); // 函数表达式：包含在分组操作符内\n \ntry {\n    (var x = 5); // 分组操作符，只能包含表达式而不能包含语句：这里的var就是语句\n} catch(err) {\n    // SyntaxError\n}\n```\n \n你可以会想到，在使用eval对JSON进行执行的时候，JSON字符串通常被包含在一个圆括号里：`eval('(' + json + ')')`，这样做的原因就是因为分组操作符，也就是这对括号，会让解析器强制将JSON的花括号解析成表达式而不是代码块。\n \n```javascript\ntry {\n    { \"x\": 5 }; // \"{\" 和 \"}\" 做解析成代码块\n} catch(err) {\n    // SyntaxError\n}\n \n({ \"x\": 5 }); // 分组操作符强制将\"{\" 和 \"}\"作为对象字面量来解析\n```\n \n表达式和声明存在着十分微妙的差别，首先，函数声明会在任何表达式被解析和求值之前先被解析和求值，即使你的声明在代码的最后一行，它也会在同作用域内第一个表达式之前被解析/求值，参考如下例子，函数fn是在alert之后声明的，但是在alert执行的时候，fn已经有定义了：\n```javascript\nalert(fn());\n \nfunction fn() {\n    return 'Hello world!';\n}\n```\n \n另外，还有一点需要提醒一下，函数声明在条件语句内虽然可以用，但是没有被标准化，也就是说不同的环境可能有不同的执行结果，所以这样情况下，最好使用函数表达式：\n```javascript\n// 千万别这样做！\n// 因为有的浏览器会返回first的这个function，而有的浏览器返回的却是第二个\n \nif (true) {\n    function foo() {\n      return 'first';\n    }\n}else {\n    function foo() {\n      return 'second';\n    }\n}\nfoo();\n \n// 相反，这样情况，我们要用函数表达式\nvar foo;\nif (true) {\n    foo = function() {\n      return 'first';\n    };\n}else {\n    foo = function() {\n      return 'second';\n    };\n}\nfoo();\n```\n \n函数声明的实际规则如下：\n \n>函数声明只能出现在程序或函数体内。从句法上讲，它们 不能出现在Block（块）（{ ... }）中，例如不能出现在 if、while 或 for 语句中。因为 Block（块） 中只能包含Statement语句， 而不能包含函数声明这样的源元素。另一方面，仔细看一看规则也会发现，唯一可能让表达式出现在Block（块）中情形，就是让它作为表达式语句的一部分。但是，规范明确规定了表达式语句不能以关键字function开头。而这实际上就是说，函数表达式同样也不能出现在Statement语句或Block（块）中（因为Block（块）就是由Statement语句构成的）。\n \n# 函数语句\n \n在ECMAScript的语法扩展中，有一个是函数语句，目前只有基于[Gecko](http://baike.baidu.com/link?url=gre8zdQLIoY1uzdgpsokc6hMoV8Uh2IaunRbQ-DyvWG2HusZUT2XFEcRKKvF997lPyxLi8EsBYRuOhMo0sRGea)的浏览器实现了该扩展，所以对于下面的例子，我们仅是抱着学习的目的来看，一般来说不推荐使用（除非你针对Gecko浏览器进行开发）。\n \n1. 一般语句能用的地方，函数语句也能用，当然也包括Block块中：\n```javascript\nif (true) {\n    function f(){ }\n}else {\n    function f(){ }\n}\n```\n \n2. 函数语句可以像其他语句一样被解析，包含基于条件执行的情形\n```javascript\nif (true) {\n    function foo(){ return 1; }\n}else {\n    function foo(){ return 2; }\n}\nfoo(); // 1\n// 注：其它客户端会将foo解析成函数声明\n// 因此，第二个foo会覆盖第一个，结果返回2，而不是1\n```\n \n3. 函数语句不是在变量初始化期间声明的，而是在运行时声明的——与函数表达式一样。不过，函数语句的标识符一旦声明能在函数的整个作用域生效了。标识符有效性正是导致函数语句与函数表达式不同的关键所在（下一小节我们将会展示命名函数表达式的具体行为）。\n```javascript\n// 此刻，foo还没用声明\ntypeof foo; // \"undefined\"\nif (true) {\n    // 进入这里以后，foo就被声明在整个作用域内了\n    function foo(){ return 1; }\n}else {\n    // 从来不会走到这里，所以这里的foo也不会被声明\n    function foo(){ return 2; }\n}\ntypeof foo; // \"function\"\n```\n不过，我们可以使用下面这样的符合标准的代码来模式上面例子中的函数语句：\n```javascript\nvar foo;\nif (true) {\n    foo = function foo(){ return 1; };\n}else {\n    foo = function foo() { return 2; };\n}\n```\n \n4. 函数语句和函数声明（或命名函数表达式）的字符串表示类似，也包括标识符：\n```javascript\nif (true) {\n    function foo(){ return 1; }\n}\nString(foo); // function foo() { return 1; }\n```\n \n5. 另外一个，早期基于[Gecko](http://baike.baidu.com/link?url=gre8zdQLIoY1uzdgpsokc6hMoV8Uh2IaunRbQ-DyvWG2HusZUT2XFEcRKKvF997lPyxLi8EsBYRuOhMo0sRGea)的实现（Firefox 3及以前版本）中存在一个bug，即函数语句覆盖函数声明的方式不正确。在这些早期的实现中，函数语句不知何故不能覆盖函数声明：\n```javascript\n// 函数声明\nfunction foo(){ return 1; }\nif (true) {\n    // 用函数语句重写\n    function foo(){ return 2; }\n}\nfoo(); // FF3以下返回1，FF3.5以上返回2\n// 不过，如果前面是函数表达式，则没用问题\nvar foo = function(){ return 1; };\nif (true) {\n    function foo(){ return 2; }\n}\nfoo(); // 所有版本都返回2\n```\n再次强调一点，上面这些例子只是在某些浏览器支持，所以推荐大家不要使用这些，除非你就在特性的浏览器上做开发。\n \n# 命名函数表达式\n \n函数表达式在实际应用中还是很常见的，在web开发中友个常用的模式是基于对某种特性的测试来伪装函数定义，从而达到性能优化的目的，但由于这种方式都是在同一作用域内，所以基本上一定要用函数表达式：\n```javascript\n// 该代码来自Garrett Smith的APE Javascript library库(http://dhtmlkitchen.com/ape/)\nvar contains = (function() {\n    var docEl = document.documentElement;\n \n    if (typeof docEl.compareDocumentPosition != 'undefined') {\n      return function(el, b) {\n        return (el.compareDocumentPosition(b) & 16) !== 0;\n      };\n    }\n    else if (typeof docEl.contains != 'undefined') {\n      return function(el, b) {\n        return el !== b && el.contains(b);\n      };\n    }\n    return function(el, b) {\n      if (el === b) return false;\n      while (el != b && (b = b.parentNode) != null);\n      return el === b;\n    };\n})();\n```\n \n提到命名函数表达式，理所当然，就是它得有名字，前面的例子var bar = function foo(){};就是一个有效的命名函数表达式，但有一点需要记住：这个名字只在新定义的函数作用域内有效，因为规范规定了标示符不能在外围的作用域内有效：\n```javascript\nvar f = function foo(){\n    return typeof foo; // foo是在内部作用域内有效\n};\n// foo在外部用于是不可见的\ntypeof foo; // \"undefined\"\nf(); // \"function\"\n```\n既然，这么要求，那命名函数表达式到底有啥用啊？为啥要取名？\n正如我们开头所说：给它一个名字就是可以让调试过程更方便，因为在调试的时候，如果在调用栈中的每个项都有自己的名字来描述，那么调试过程就太爽了，感受不一样嘛。\n \n# 调试器中的函数名\n \n如果一个函数有名字，那调试器在调试的时候会将它的名字显示在调用的栈上。有些调试器（Firebug）有时候还会为你们函数取名并显示，让他们和那些应用该函数的便利具有相同的角色，可是通常情况下，这些调试器只安装简单的规则来取名，所以说没有太大价格，我们来看一个例子：\n```javascript\nfunction foo(){\n    return bar();\n}\nfunction bar(){\n    return baz();\n}\nfunction baz(){\n    debugger;\n}\nfoo();\n \n// 这里我们使用了3个带名字的函数声明\n// 所以当调试器走到debugger语句的时候，Firebug的调用栈上看起来非常清晰明了\n// 因为很明白地显示了名称\nbaz\nbar\nfoo\nexpr_test.html()\n```\n \n通过查看调用栈的信息，我们可以很明了地知道foo调用了bar, bar又调用了baz（而foo本身有在expr_test.html文档的全局作用域内被调用），不过，还有一个比较爽地方，就是刚才说的Firebug为匿名表达式取名的功能：\n```javascript\nfunction foo(){\n    return bar();\n}\nvar bar = function(){\n    return baz();\n}\nfunction baz(){\n    debugger;\n}\nfoo();\n \n// Call stack\nbaz\nbar() //看到了么？\nfoo\nexpr_test.html()\n```\n \n然后，当函数表达式稍微复杂一些的时候，调试器就不那么聪明了，我们只能在调用栈中看到问号：\n \n```javascript\nfunction foo(){\n    return bar();\n  }\n  var bar = (function(){\n    if (window.addEventListener) {\n      return function(){\n        return baz();\n      };\n    }\n    else if (window.attachEvent) {\n      return function() {\n        return baz();\n      };\n    }\n  })();\n  function baz(){\n    debugger;\n  }\n  foo();\n \n  // Call stack\n  baz\n  (?)() // 这里可是问号哦\n  foo\n  expr_test.html()\n```\n \n另外，当把函数赋值给多个变量的时候，也会出现令人郁闷的问题：\n \n```javascript\nfunction foo(){\n    return baz();\n  }\n  var bar = function(){\n    debugger;\n  };\n  var baz = bar;\n  bar = function() {\n    alert('spoofed');\n  };\n  foo();\n \n  // Call stack:\n  bar()\n  foo\n  expr_test.html()\n```\n \n这时候，调用栈显示的是foo调用了bar，但实际上并非如此，之所以有这种问题，是因为baz和另外一个包含alert('spoofed')的函数做了引用交换所导致的。\n \n归根结底，只有给函数表达式取个名字，才是最稳妥的办法，也就是使用**命名函数表达式**。我们来使用带名字的表达式来重写上面的例子（注意立即调用的表达式块里返回的2个函数的名字都是bar）：\n```javascript\n  function foo(){\n    return bar();\n  }\n  var bar = (function(){\n    if (window.addEventListener) {\n      return function bar(){\n        return baz();\n      };\n    }\n    else if (window.attachEvent) {\n      return function bar() {\n        return baz();\n      };\n    }\n  })();\n  function baz(){\n    debugger;\n  }\n  foo();\n \n  // 又再次看到了清晰的调用栈信息了耶!\n  baz\n  bar\n  foo\n  expr_test.html()\n```\n \nOK，又学了一招吧？不过在高兴之前，我们再看看不同寻常的JScript吧。\n#JScript\n这一部分讲的全都是[JScript](http://baike.baidu.com/link?url=48ETrhbO1aXur5vwakiP1VZVKRaXJwc18zy8E87wtDaVUkSg2XfQFwTVFNDX42QcHaEMI_4KylkK4RdQkyCYra)而不是Javascript这两个真不是一种东西\n>netscape开发了在Navigator中使用的LiveScript语言，后改名为JavaScript\nMicrosoft发行jscript用于internet explorer.\n最初的jscript和javascript差异过大，web程序员不得不痛苦的为两种浏览器编写两种脚本。于是诞生了ECMAScript,是一种国际标准化的javascript版本。现在的主流浏览器都支持这种版本。\njavascript是一个通用的名称，所有浏览器都认识，而jscript只有IE认识。\n其他语言细节上的区别，不是一两下能说完的。编程时最好遵循ECMAscript标准。这样可以保证兼容性。\n顺便说一下,javascript原来叫Livescript，后来Sun的java风头正盛的时候netscape就把名字改成javascript。\n \n个人感觉这一段基本上可以忽略了 但为了尊重作者我还是把它整理了一下。\n \n## JScript的Bug\n \n比较恶的是，IE的ECMAScript实现JScript严重混淆了命名函数表达式，搞得现很多人都出来反对命名函数表达式，而且即便是最新的一版（IE8中使用的5.8版）仍然存在下列问题。\n \n下面我们就来看看IE在实现中究竟犯了那些错误，俗话说知已知彼，才能百战不殆。我们来看看如下几个例子：\n \n**例1：函数表达式的标示符泄露到外部作用域**\n \n```javascript\nvar f = function g(){};\ntypeof g; // \"function\"\n```\n上面我们说过，命名函数表达式的标示符在外部作用域是无效的，但JScript明显是违反了这一规范，上面例子中的标示符g被解析成函数对象，这就乱了套了，很多难以发现的bug都是因为这个原因导致的。\n==注：IE9貌似已经修复了这个问题==\n \n**例2：将命名函数表达式同时当作函数声明和函数表达式**\n \n```javascript\ntypeof g; // \"function\"\nvar f = function g(){};\n```\n \n特性环境下，函数声明会优先于任何表达式被解析，上面的例子展示的是JScript实际上是把命名函数表达式当成函数声明了，因为它在实际声明之前就解析了g。\n \n这个例子引出了下一个例子。\n \n**例3：命名函数表达式会创建两个截然不同的函数对象！**\n```javascript\n    var f = function g(){};\n    f === g; // false\n \n    f.expando = 'foo';\n    g.expando; // undefined\n```\n \n看到这里，大家会觉得问题严重了，因为修改任何一个对象，另外一个没有什么改变，这太恶了。通过这个例子可以发现，创建2个不同的对象，也就是说如果你想修改f的属性中保存某个信息，然后想当然地通过引用相同对象的g的同名属性来使用，那问题就大了，因为根本就不可能。\n \n再来看一个稍微复杂的例子：\n \n**例4：仅仅顺序解析函数声明而忽略条件语句块**\n \n```javascript\n    var f = function g() {\n      return 1;\n    };\n    if (false) {\n      f = function g(){\n        return 2;\n      };\n    }\n    g(); // 2\n```\n \n这个bug查找就难多了，但导致bug的原因却非常简单。首先，g被当作函数声明解析，由于JScript中的函数声明不受条件代码块约束，所以在这个很恶的if分支中，g被当作另一个函数function g(){ return 2 }，也就是又被声明了一次。然后，所有“常规的”表达式被求值，而此时f被赋予了另一个新创建的对象的引用。由于在对表达式求值的时候，永远不会进入“这个可恶if分支，因此f就会继续引用第一个函数function g(){ return 1 }。分析到这里，问题就很清楚了：假如你不够细心，在f中调用了g，那么将会调用一个毫不相干的g函数对象。\n \n你可能会文，将不同的对象和arguments.callee相比较时，有什么样的区别呢？我们来看看：\n \n```javascript\n  var f = function g(){\n    return [\n      arguments.callee == f,\n      arguments.callee == g\n    ];\n  };\n  f(); // [true, false]\n  g(); // [false, true]\n```\n \n可以看到，arguments.callee的引用一直是被调用的函数，实际上这也是好事，稍后会解释。\n \n还有一个有趣的例子，那就是在不包含声明的赋值语句中使用命名函数表达式：\n \n```javascript\n  (function(){\n    f = function f(){};\n  })();\n```\n \n按照代码的分析，我们原本是想创建一个全局属性f（注意不要和一般的匿名函数混淆了，里面用的是带名字的生命），JScript在这里捣乱了一把，首先他把表达式当成函数声明解析了，所以左边的f被声明为局部变量了（和一般的匿名函数里的声明一样），然后在函数执行的时候，f已经是定义过的了，右边的function f(){}则直接就赋值给局部变量f了，所以f根本就不是全局属性。\n \n了解了JScript这么变态以后，我们就要及时预防这些问题了，首先**防范标识符泄漏带外部作用域**，其次，应该永远**不引用被用作函数名称的标识符**；还记得前面例子中那个讨人厌的标识符g吗？——如果我们能够当g不存在，可以避免多少不必要的麻烦哪。因此，关键就在于始终要通过f或者arguments.callee来引用函数。如果你使用了命名函数表达式，那么应该只在调试的时候利用那个名字。最后，还要记住一点，一定要把**命名函数表达式声明期间错误创建的函数清理干净**。\n \n对于，上面最后一点，我们还得再解释一下。\n \n## WebKit的displayName\n \n~~WebKit团队在这个问题采取了有点儿另类的策略。介于匿名和命名函数如此之差的表现力，WebKit引入了一个“特殊的”`displayName`属性（本质上是一个字符串），如果开发人员为函数的这个属性赋值，则该属性的值将在调试器或性能分析器中被显示在函数“名称”的位置上。[Francisco Tolmasky详细地解释了这个策略的原理和实现](http://www.alertdebugging.com/2009/04/29/building-a-better-javascript-profiler-with-webkit/)。~~\n \n# ECMAScript-5\n \n在ECMAScript-262第5版引入了**严格模式（strict mode）**。开启严格模式的实现会禁用语言中的那些不稳定、不可靠和不安全的特性。据说出于安全方面的考虑，`arguments.callee`属性将在严格模式下被“封杀”。因此，在处于严格模式时，访问`arguments.callee`会导致`TypeError`（参见ECMA-262第5版的10.6节）。而我之所以在此提到严格模式，是因为如果在基于第5版标准的实现中无法使用`arguments.callee`来执行递归操作，那么使用命名函数表达式的可能性就会大大增加。从这个意义上来说，理解命名函数表达式的语义及其bug也就显得更加重要了。\n \n```javascript\n// 此前，你可能会使用arguments.callee\n  (function(x) {\n    if (x <= 1) return 1;\n    return x * arguments.callee(x - 1);\n  })(10);\n \n  // 但在严格模式下，有可能就要使用命名函数表达式\n  (function factorial(x) {\n    if (x <= 1) return 1;\n    return x * factorial(x - 1);\n  })(10);\n \n  // 要么就退一步，使用没有那么灵活的函数声明\n  function factorial(x) {\n    if (x <= 1) return 1;\n    return x * factorial(x - 1);\n  }\n  factorial(10);\n```\n \n# 致谢\n \n**_理查德· 康福德（Richard Cornford）_**，是他率先[解释了JScript中命名函数表达式所存在的bug](http://groups.google.com/group/comp.lang.javascript/msg/5b508b03b004bce8)。理查德解释了我在这篇文章中提及的大多数bug，所以我强烈建议大家去看看他的解释。我还要感谢**_Yann-Erwan Perio_**和**_道格拉斯·克劳克佛德（Douglas Crockford）_**，他们早在2003年就在[comp.lang.javascript论坛中提及并讨论NFE问题了](http://groups.google.com/group/comp.lang.javascript/msg/03d53d114d176323)。\n \n**_约翰-戴维·道尔顿（John-David Dalton）_**对“最终解决方案”提出了很好的建议。\n \n**_托比·兰吉_**的点子被我用在了“替代方案”中。\n \n**_盖瑞特·史密斯（Garrett Smith）_**和**_德米特里·苏斯尼科（Dmitry Soshnikov）_**对本文的多方面作出了补充和修正。\n \n英文原文：http://kangax.github.com/nfe/\n \n参考译文：[连接访问](http://www.cn-cuckoo.com/main/wp-content/uploads/2009/12/named-function-expressions-demystified.html#jscript-memory-management) (<span style=\"text-decoration: underline;\">SpiderMonkey的怪癖</span>之后的章节参考该文)\n \n# 关于本文\n本文转自[TOM大叔](http://www.cnblogs.com/TomXu)的[深入理解JavaScript系列](http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html)本文有大量删减，[查看原文](http://www.cnblogs.com/TomXu/archive/2011/12/29/2290308.html)\n \n>【深入理解JavaScript系列】文章，包括了原创，翻译，转载，整理等各类型文章，原文是TOM大叔的一个非常不错的专题，现将其重新整理发布。谢谢大叔。","slug":"揭秘命名函数表达式","published":1,"date":"2016-12-04T14:40:49.000Z","updated":"2016-12-04T14:40:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwarqf8t0002qdcdqbwdfetc","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网上还没用发现有人对命名函数表达式进去重复深入的讨论，正因为如此，网上出现了各种各样的误解，本文将从原理和实践两个方面来探讨<code>JavaScript</code>关于命名函数表达式的优缺点。<br>简单的说，命名函数表达式只有一个用户，那就是在==Debug==或者==Profiler==分析的时候来描述函数的名称，也可以使用函数名实现递归，但很快你就会发现其实是不切实际的。当然，如果你不关注调试，那就没什么可担心的了，否则，如果你想了解兼容性方面的东西的话，你还是应该继续往下看看。<br>我们先开始看看，什么叫函数表达式，然后再说一下现代调试器如何处理这些表达式，如果你已经对这方面很熟悉的话，请直接跳过此小节。<br>本文中后半部分说了好多JScript,基本上是过时的东西，我觉得直接略过就行</p>\n<a id=\"more\"></a>\n<h1 id=\"函数表达式和函数声明\"><a href=\"#函数表达式和函数声明\" class=\"headerlink\" title=\"函数表达式和函数声明\"></a>函数表达式和函数声明</h1><p>在<code>ECMAScript</code>中，创建函数的最常用的两个方法是<strong>函数表达式</strong>和<strong>函数声明</strong>，两者期间的区别是有点晕，因为<code>ECMAScript</code>规范只明确了一点：函数声明必须带有标示符（==Identifier==）（就是大家常说的函数名称），而函数表达式则可以省略这个标示符：</p>\n<ol>\n<li><p>函数声明:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名称 (<span class=\"params\">参数：可选</span>)</span>&#123; 函数体 &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>函数表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名称（可选）(<span class=\"params\">参数：可选</span>)</span>&#123; 函数体 &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>所以，可以看出，如果不声明函数名称，它肯定是表达式，可如果声明了函数名称的话，如何判断是函数声明还是函数表达式呢？==ECMAScript==是通过上下文来区分的，如果<code>function foo(){}</code>是作为赋值表达式的一部分的话，那它就是一个函数表达式，如果<code>function foo(){}</code>被包含在一个函数体内，或者位于程序的最顶部的话，那它就是一个函数声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 声明，因为它是程序的一部分</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 表达式，因为它是赋值表达式的一部分</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 表达式，因为它是new表达式</span></div><div class=\"line\"> </div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 声明，因为它是函数体的一部分</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>还有一种函数表达式不太常见，就是被括号括住的<code>(function foo(){})</code>，他是表达式的原因是因为括号 <code>()</code>是一个分组操作符，它的内部只能包含表达式，我们来看几个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 函数声明</span></div><div class=\"line\"> </div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;); <span class=\"comment\">// 函数表达式：包含在分组操作符内</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    (<span class=\"keyword\">var</span> x = <span class=\"number\">5</span>); <span class=\"comment\">// 分组操作符，只能包含表达式而不能包含语句：这里的var就是语句</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(err) &#123;</div><div class=\"line\">    <span class=\"comment\">// SyntaxError</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以会想到，在使用eval对JSON进行执行的时候，JSON字符串通常被包含在一个圆括号里：<code>eval(&#39;(&#39; + json + &#39;)&#39;)</code>，这样做的原因就是因为分组操作符，也就是这对括号，会让解析器强制将JSON的花括号解析成表达式而不是代码块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    &#123; <span class=\"string\">\"x\"</span>: <span class=\"number\">5</span> &#125;; <span class=\"comment\">// \"&#123;\" 和 \"&#125;\" 做解析成代码块</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(err) &#123;</div><div class=\"line\">    <span class=\"comment\">// SyntaxError</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">(&#123; <span class=\"string\">\"x\"</span>: <span class=\"number\">5</span> &#125;); <span class=\"comment\">// 分组操作符强制将\"&#123;\" 和 \"&#125;\"作为对象字面量来解析</span></div></pre></td></tr></table></figure>\n<p>表达式和声明存在着十分微妙的差别，首先，函数声明会在任何表达式被解析和求值之前先被解析和求值，即使你的声明在代码的最后一行，它也会在同作用域内第一个表达式之前被解析/求值，参考如下例子，函数fn是在alert之后声明的，但是在alert执行的时候，fn已经有定义了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(fn());</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>另外，还有一点需要提醒一下，函数声明在条件语句内虽然可以用，但是没有被标准化，也就是说不同的环境可能有不同的执行结果，所以这样情况下，最好使用函数表达式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 千万别这样做！</span></div><div class=\"line\"><span class=\"comment\">// 因为有的浏览器会返回first的这个function，而有的浏览器返回的却是第二个</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'first'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'second'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 相反，这样情况，我们要用函数表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'first'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'second'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<p>函数声明的实际规则如下：</p>\n<blockquote>\n<p>函数声明只能出现在程序或函数体内。从句法上讲，它们 不能出现在Block（块）（{ … }）中，例如不能出现在 if、while 或 for 语句中。因为 Block（块） 中只能包含Statement语句， 而不能包含函数声明这样的源元素。另一方面，仔细看一看规则也会发现，唯一可能让表达式出现在Block（块）中情形，就是让它作为表达式语句的一部分。但是，规范明确规定了表达式语句不能以关键字function开头。而这实际上就是说，函数表达式同样也不能出现在Statement语句或Block（块）中（因为Block（块）就是由Statement语句构成的）。</p>\n</blockquote>\n<h1 id=\"函数语句\"><a href=\"#函数语句\" class=\"headerlink\" title=\"函数语句\"></a>函数语句</h1><p>在ECMAScript的语法扩展中，有一个是函数语句，目前只有基于<a href=\"http://baike.baidu.com/link?url=gre8zdQLIoY1uzdgpsokc6hMoV8Uh2IaunRbQ-DyvWG2HusZUT2XFEcRKKvF997lPyxLi8EsBYRuOhMo0sRGea\" target=\"_blank\" rel=\"external\">Gecko</a>的浏览器实现了该扩展，所以对于下面的例子，我们仅是抱着学习的目的来看，一般来说不推荐使用（除非你针对Gecko浏览器进行开发）。</p>\n<ol>\n<li>一般语句能用的地方，函数语句也能用，当然也包括Block块中：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123; &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>函数语句可以像其他语句一样被解析，包含基于条件执行的情形<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"comment\">// 注：其它客户端会将foo解析成函数声明</span></div><div class=\"line\"><span class=\"comment\">// 因此，第二个foo会覆盖第一个，结果返回2，而不是1</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>函数语句不是在变量初始化期间声明的，而是在运行时声明的——与函数表达式一样。不过，函数语句的标识符一旦声明能在函数的整个作用域生效了。标识符有效性正是导致函数语句与函数表达式不同的关键所在（下一小节我们将会展示命名函数表达式的具体行为）。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 此刻，foo还没用声明</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> foo; <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 进入这里以后，foo就被声明在整个作用域内了</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 从来不会走到这里，所以这里的foo也不会被声明</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">typeof</span> foo; <span class=\"comment\">// \"function\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不过，我们可以使用下面这样的符合标准的代码来模式上面例子中的函数语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>函数语句和函数声明（或命名函数表达式）的字符串表示类似，也包括标识符：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">String</span>(foo); <span class=\"comment\">// function foo() &#123; return 1; &#125;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>另外一个，早期基于<a href=\"http://baike.baidu.com/link?url=gre8zdQLIoY1uzdgpsokc6hMoV8Uh2IaunRbQ-DyvWG2HusZUT2XFEcRKKvF997lPyxLi8EsBYRuOhMo0sRGea\" target=\"_blank\" rel=\"external\">Gecko</a>的实现（Firefox 3及以前版本）中存在一个bug，即函数语句覆盖函数声明的方式不正确。在这些早期的实现中，函数语句不知何故不能覆盖函数声明：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 函数声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 用函数语句重写</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">// FF3以下返回1，FF3.5以上返回2</span></div><div class=\"line\"><span class=\"comment\">// 不过，如果前面是函数表达式，则没用问题</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">// 所有版本都返回2</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>再次强调一点，上面这些例子只是在某些浏览器支持，所以推荐大家不要使用这些，除非你就在特性的浏览器上做开发。</p>\n<h1 id=\"命名函数表达式\"><a href=\"#命名函数表达式\" class=\"headerlink\" title=\"命名函数表达式\"></a>命名函数表达式</h1><p>函数表达式在实际应用中还是很常见的，在web开发中友个常用的模式是基于对某种特性的测试来伪装函数定义，从而达到性能优化的目的，但由于这种方式都是在同一作用域内，所以基本上一定要用函数表达式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 该代码来自Garrett Smith的APE Javascript library库(http://dhtmlkitchen.com/ape/)</span></div><div class=\"line\"><span class=\"keyword\">var</span> contains = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> docEl = <span class=\"built_in\">document</span>.documentElement;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> docEl.compareDocumentPosition != <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (el.compareDocumentPosition(b) &amp; <span class=\"number\">16</span>) !== <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> docEl.contains != <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> el !== b &amp;&amp; el.contains(b);</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, b</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (el === b) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">while</span> (el != b &amp;&amp; (b = b.parentNode) != <span class=\"literal\">null</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> el === b;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>提到命名函数表达式，理所当然，就是它得有名字，前面的例子var bar = function foo(){};就是一个有效的命名函数表达式，但有一点需要记住：这个名字只在新定义的函数作用域内有效，因为规范规定了标示符不能在外围的作用域内有效：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> foo; <span class=\"comment\">// foo是在内部作用域内有效</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// foo在外部用于是不可见的</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> foo; <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\">f(); <span class=\"comment\">// \"function\"</span></div></pre></td></tr></table></figure></p>\n<p>既然，这么要求，那命名函数表达式到底有啥用啊？为啥要取名？<br>正如我们开头所说：给它一个名字就是可以让调试过程更方便，因为在调试的时候，如果在调用栈中的每个项都有自己的名字来描述，那么调试过程就太爽了，感受不一样嘛。</p>\n<h1 id=\"调试器中的函数名\"><a href=\"#调试器中的函数名\" class=\"headerlink\" title=\"调试器中的函数名\"></a>调试器中的函数名</h1><p>如果一个函数有名字，那调试器在调试的时候会将它的名字显示在调用的栈上。有些调试器（Firebug）有时候还会为你们函数取名并显示，让他们和那些应用该函数的便利具有相同的角色，可是通常情况下，这些调试器只安装简单的规则来取名，所以说没有太大价格，我们来看一个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bar();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> baz();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 这里我们使用了3个带名字的函数声明</span></div><div class=\"line\"><span class=\"comment\">// 所以当调试器走到debugger语句的时候，Firebug的调用栈上看起来非常清晰明了</span></div><div class=\"line\"><span class=\"comment\">// 因为很明白地显示了名称</span></div><div class=\"line\">baz</div><div class=\"line\">bar</div><div class=\"line\">foo</div><div class=\"line\">expr_test.html()</div></pre></td></tr></table></figure></p>\n<p>通过查看调用栈的信息，我们可以很明了地知道foo调用了bar, bar又调用了baz（而foo本身有在expr_test.html文档的全局作用域内被调用），不过，还有一个比较爽地方，就是刚才说的Firebug为匿名表达式取名的功能：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bar();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> baz();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// Call stack</span></div><div class=\"line\">baz</div><div class=\"line\">bar() <span class=\"comment\">//看到了么？</span></div><div class=\"line\">foo</div><div class=\"line\">expr_test.html()</div></pre></td></tr></table></figure></p>\n<p>然后，当函数表达式稍微复杂一些的时候，调试器就不那么聪明了，我们只能在调用栈中看到问号：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bar();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> bar = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListener) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> baz();</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> baz();</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)();</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  foo();</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// Call stack</span></div><div class=\"line\">  baz</div><div class=\"line\">  (?)() <span class=\"comment\">// 这里可是问号哦</span></div><div class=\"line\">  foo</div><div class=\"line\">  expr_test.html()</div></pre></td></tr></table></figure>\n<p>另外，当把函数赋值给多个变量的时候，也会出现令人郁闷的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> baz();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> baz = bar;</div><div class=\"line\">  bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'spoofed'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  foo();</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// Call stack:</span></div><div class=\"line\">  bar()</div><div class=\"line\">  foo</div><div class=\"line\">  expr_test.html()</div></pre></td></tr></table></figure>\n<p>这时候，调用栈显示的是foo调用了bar，但实际上并非如此，之所以有这种问题，是因为baz和另外一个包含alert(‘spoofed’)的函数做了引用交换所导致的。</p>\n<p>归根结底，只有给函数表达式取个名字，才是最稳妥的办法，也就是使用<strong>命名函数表达式</strong>。我们来使用带名字的表达式来重写上面的例子（注意立即调用的表达式块里返回的2个函数的名字都是bar）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> bar();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListener) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> baz();</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> baz();</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">debugger</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 又再次看到了清晰的调用栈信息了耶!</span></div><div class=\"line\">baz</div><div class=\"line\">bar</div><div class=\"line\">foo</div><div class=\"line\">expr_test.html()</div></pre></td></tr></table></figure></p>\n<p>OK，又学了一招吧？不过在高兴之前，我们再看看不同寻常的JScript吧。</p>\n<p>#JScript<br>这一部分讲的全都是<a href=\"http://baike.baidu.com/link?url=48ETrhbO1aXur5vwakiP1VZVKRaXJwc18zy8E87wtDaVUkSg2XfQFwTVFNDX42QcHaEMI_4KylkK4RdQkyCYra\" target=\"_blank\" rel=\"external\">JScript</a>而不是Javascript这两个真不是一种东西</p>\n<blockquote>\n<p>netscape开发了在Navigator中使用的LiveScript语言，后改名为JavaScript<br>Microsoft发行jscript用于internet explorer.<br>最初的jscript和javascript差异过大，web程序员不得不痛苦的为两种浏览器编写两种脚本。于是诞生了ECMAScript,是一种国际标准化的javascript版本。现在的主流浏览器都支持这种版本。<br>javascript是一个通用的名称，所有浏览器都认识，而jscript只有IE认识。<br>其他语言细节上的区别，不是一两下能说完的。编程时最好遵循ECMAscript标准。这样可以保证兼容性。<br>顺便说一下,javascript原来叫Livescript，后来Sun的java风头正盛的时候netscape就把名字改成javascript。</p>\n</blockquote>\n<p>个人感觉这一段基本上可以忽略了 但为了尊重作者我还是把它整理了一下。</p>\n<h2 id=\"JScript的Bug\"><a href=\"#JScript的Bug\" class=\"headerlink\" title=\"JScript的Bug\"></a>JScript的Bug</h2><p>比较恶的是，IE的ECMAScript实现JScript严重混淆了命名函数表达式，搞得现很多人都出来反对命名函数表达式，而且即便是最新的一版（IE8中使用的5.8版）仍然存在下列问题。</p>\n<p>下面我们就来看看IE在实现中究竟犯了那些错误，俗话说知已知彼，才能百战不殆。我们来看看如下几个例子：</p>\n<p><strong>例1：函数表达式的标示符泄露到外部作用域</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">typeof</span> g; <span class=\"comment\">// \"function\"</span></div></pre></td></tr></table></figure>\n<p>上面我们说过，命名函数表达式的标示符在外部作用域是无效的，但JScript明显是违反了这一规范，上面例子中的标示符g被解析成函数对象，这就乱了套了，很多难以发现的bug都是因为这个原因导致的。<br>==注：IE9貌似已经修复了这个问题==</p>\n<p><strong>例2：将命名函数表达式同时当作函数声明和函数表达式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> g; <span class=\"comment\">// \"function\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<p>特性环境下，函数声明会优先于任何表达式被解析，上面的例子展示的是JScript实际上是把命名函数表达式当成函数声明了，因为它在实际声明之前就解析了g。</p>\n<p>这个例子引出了下一个例子。</p>\n<p><strong>例3：命名函数表达式会创建两个截然不同的函数对象！</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">f === g; <span class=\"comment\">// false</span></div><div class=\"line\"> </div><div class=\"line\">f.expando = <span class=\"string\">'foo'</span>;</div><div class=\"line\">g.expando; <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<p>看到这里，大家会觉得问题严重了，因为修改任何一个对象，另外一个没有什么改变，这太恶了。通过这个例子可以发现，创建2个不同的对象，也就是说如果你想修改f的属性中保存某个信息，然后想当然地通过引用相同对象的g的同名属性来使用，那问题就大了，因为根本就不可能。</p>\n<p>再来看一个稍微复杂的例子：</p>\n<p><strong>例4：仅仅顺序解析函数声明而忽略条件语句块</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</div><div class=\"line\">  f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">g(); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p>这个bug查找就难多了，但导致bug的原因却非常简单。首先，g被当作函数声明解析，由于JScript中的函数声明不受条件代码块约束，所以在这个很恶的if分支中，g被当作另一个函数function g(){ return 2 }，也就是又被声明了一次。然后，所有“常规的”表达式被求值，而此时f被赋予了另一个新创建的对象的引用。由于在对表达式求值的时候，永远不会进入“这个可恶if分支，因此f就会继续引用第一个函数function g(){ return 1 }。分析到这里，问题就很清楚了：假如你不够细心，在f中调用了g，那么将会调用一个毫不相干的g函数对象。</p>\n<p>你可能会文，将不同的对象和arguments.callee相比较时，有什么样的区别呢？我们来看看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [</div><div class=\"line\">    <span class=\"built_in\">arguments</span>.callee == f,</div><div class=\"line\">    <span class=\"built_in\">arguments</span>.callee == g</div><div class=\"line\">  ];</div><div class=\"line\">&#125;;</div><div class=\"line\">f(); <span class=\"comment\">// [true, false]</span></div><div class=\"line\">g(); <span class=\"comment\">// [false, true]</span></div></pre></td></tr></table></figure>\n<p>可以看到，arguments.callee的引用一直是被调用的函数，实际上这也是好事，稍后会解释。</p>\n<p>还有一个有趣的例子，那就是在不包含声明的赋值语句中使用命名函数表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>按照代码的分析，我们原本是想创建一个全局属性f（注意不要和一般的匿名函数混淆了，里面用的是带名字的生命），JScript在这里捣乱了一把，首先他把表达式当成函数声明解析了，所以左边的f被声明为局部变量了（和一般的匿名函数里的声明一样），然后在函数执行的时候，f已经是定义过的了，右边的function f(){}则直接就赋值给局部变量f了，所以f根本就不是全局属性。</p>\n<p>了解了JScript这么变态以后，我们就要及时预防这些问题了，首先<strong>防范标识符泄漏带外部作用域</strong>，其次，应该永远<strong>不引用被用作函数名称的标识符</strong>；还记得前面例子中那个讨人厌的标识符g吗？——如果我们能够当g不存在，可以避免多少不必要的麻烦哪。因此，关键就在于始终要通过f或者arguments.callee来引用函数。如果你使用了命名函数表达式，那么应该只在调试的时候利用那个名字。最后，还要记住一点，一定要把<strong>命名函数表达式声明期间错误创建的函数清理干净</strong>。</p>\n<p>对于，上面最后一点，我们还得再解释一下。</p>\n<h2 id=\"WebKit的displayName\"><a href=\"#WebKit的displayName\" class=\"headerlink\" title=\"WebKit的displayName\"></a>WebKit的displayName</h2><p><del>WebKit团队在这个问题采取了有点儿另类的策略。介于匿名和命名函数如此之差的表现力，WebKit引入了一个“特殊的”<code>displayName</code>属性（本质上是一个字符串），如果开发人员为函数的这个属性赋值，则该属性的值将在调试器或性能分析器中被显示在函数“名称”的位置上。<a href=\"http://www.alertdebugging.com/2009/04/29/building-a-better-javascript-profiler-with-webkit/\" target=\"_blank\" rel=\"external\">Francisco Tolmasky详细地解释了这个策略的原理和实现</a>。</del></p>\n<h1 id=\"ECMAScript-5\"><a href=\"#ECMAScript-5\" class=\"headerlink\" title=\"ECMAScript-5\"></a>ECMAScript-5</h1><p>在ECMAScript-262第5版引入了<strong>严格模式（strict mode）</strong>。开启严格模式的实现会禁用语言中的那些不稳定、不可靠和不安全的特性。据说出于安全方面的考虑，<code>arguments.callee</code>属性将在严格模式下被“封杀”。因此，在处于严格模式时，访问<code>arguments.callee</code>会导致<code>TypeError</code>（参见ECMA-262第5版的10.6节）。而我之所以在此提到严格模式，是因为如果在基于第5版标准的实现中无法使用<code>arguments.callee</code>来执行递归操作，那么使用命名函数表达式的可能性就会大大增加。从这个意义上来说，理解命名函数表达式的语义及其bug也就显得更加重要了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 此前，你可能会使用arguments.callee</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"built_in\">arguments</span>.callee(x - <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;)(<span class=\"number\">10</span>);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 但在严格模式下，有可能就要使用命名函数表达式</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * factorial(x - <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;)(<span class=\"number\">10</span>);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 要么就退一步，使用没有那么灵活的函数声明</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * factorial(x - <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  factorial(<span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p><strong><em>理查德· 康福德（Richard Cornford）</em></strong>，是他率先<a href=\"http://groups.google.com/group/comp.lang.javascript/msg/5b508b03b004bce8\" target=\"_blank\" rel=\"external\">解释了JScript中命名函数表达式所存在的bug</a>。理查德解释了我在这篇文章中提及的大多数bug，所以我强烈建议大家去看看他的解释。我还要感谢<strong><em>Yann-Erwan Perio</em></strong>和<strong><em>道格拉斯·克劳克佛德（Douglas Crockford）</em></strong>，他们早在2003年就在<a href=\"http://groups.google.com/group/comp.lang.javascript/msg/03d53d114d176323\" target=\"_blank\" rel=\"external\">comp.lang.javascript论坛中提及并讨论NFE问题了</a>。</p>\n<p><strong><em>约翰-戴维·道尔顿（John-David Dalton）</em></strong>对“最终解决方案”提出了很好的建议。</p>\n<p><strong><em>托比·兰吉</em></strong>的点子被我用在了“替代方案”中。</p>\n<p><strong><em>盖瑞特·史密斯（Garrett Smith）</em></strong>和<strong><em>德米特里·苏斯尼科（Dmitry Soshnikov）</em></strong>对本文的多方面作出了补充和修正。</p>\n<p>英文原文：<a href=\"http://kangax.github.com/nfe/\" target=\"_blank\" rel=\"external\">http://kangax.github.com/nfe/</a></p>\n<p>参考译文：<a href=\"http://www.cn-cuckoo.com/main/wp-content/uploads/2009/12/named-function-expressions-demystified.html#jscript-memory-management\" target=\"_blank\" rel=\"external\">连接访问</a> (<span style=\"text-decoration: underline;\">SpiderMonkey的怪癖</span>之后的章节参考该文)</p>\n<h1 id=\"关于本文\"><a href=\"#关于本文\" class=\"headerlink\" title=\"关于本文\"></a>关于本文</h1><p>本文转自<a href=\"http://www.cnblogs.com/TomXu\" target=\"_blank\" rel=\"external\">TOM大叔</a>的<a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\" target=\"_blank\" rel=\"external\">深入理解JavaScript系列</a>本文有大量删减，<a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/29/2290308.html\" target=\"_blank\" rel=\"external\">查看原文</a></p>\n<blockquote>\n<p>【深入理解JavaScript系列】文章，包括了原创，翻译，转载，整理等各类型文章，原文是TOM大叔的一个非常不错的专题，现将其重新整理发布。谢谢大叔。</p>\n</blockquote>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>网上还没用发现有人对命名函数表达式进去重复深入的讨论，正因为如此，网上出现了各种各样的误解，本文将从原理和实践两个方面来探讨<code>JavaScript</code>关于命名函数表达式的优缺点。<br>简单的说，命名函数表达式只有一个用户，那就是在==Debug==或者==Profiler==分析的时候来描述函数的名称，也可以使用函数名实现递归，但很快你就会发现其实是不切实际的。当然，如果你不关注调试，那就没什么可担心的了，否则，如果你想了解兼容性方面的东西的话，你还是应该继续往下看看。<br>我们先开始看看，什么叫函数表达式，然后再说一下现代调试器如何处理这些表达式，如果你已经对这方面很熟悉的话，请直接跳过此小节。<br>本文中后半部分说了好多JScript,基本上是过时的东西，我觉得直接略过就行</p>","more":"<h1 id=\"函数表达式和函数声明\"><a href=\"#函数表达式和函数声明\" class=\"headerlink\" title=\"函数表达式和函数声明\"></a>函数表达式和函数声明</h1><p>在<code>ECMAScript</code>中，创建函数的最常用的两个方法是<strong>函数表达式</strong>和<strong>函数声明</strong>，两者期间的区别是有点晕，因为<code>ECMAScript</code>规范只明确了一点：函数声明必须带有标示符（==Identifier==）（就是大家常说的函数名称），而函数表达式则可以省略这个标示符：</p>\n<ol>\n<li><p>函数声明:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名称 (<span class=\"params\">参数：可选</span>)</span>&#123; 函数体 &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>函数表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> 函数名称（可选）(<span class=\"params\">参数：可选</span>)</span>&#123; 函数体 &#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>所以，可以看出，如果不声明函数名称，它肯定是表达式，可如果声明了函数名称的话，如何判断是函数声明还是函数表达式呢？==ECMAScript==是通过上下文来区分的，如果<code>function foo(){}</code>是作为赋值表达式的一部分的话，那它就是一个函数表达式，如果<code>function foo(){}</code>被包含在一个函数体内，或者位于程序的最顶部的话，那它就是一个函数声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 声明，因为它是程序的一部分</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 表达式，因为它是赋值表达式的一部分</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 表达式，因为它是new表达式</span></div><div class=\"line\"> </div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 声明，因为它是函数体的一部分</span></div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>还有一种函数表达式不太常见，就是被括号括住的<code>(function foo(){})</code>，他是表达式的原因是因为括号 <code>()</code>是一个分组操作符，它的内部只能包含表达式，我们来看几个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 函数声明</span></div><div class=\"line\"> </div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;); <span class=\"comment\">// 函数表达式：包含在分组操作符内</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    (<span class=\"keyword\">var</span> x = <span class=\"number\">5</span>); <span class=\"comment\">// 分组操作符，只能包含表达式而不能包含语句：这里的var就是语句</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(err) &#123;</div><div class=\"line\">    <span class=\"comment\">// SyntaxError</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以会想到，在使用eval对JSON进行执行的时候，JSON字符串通常被包含在一个圆括号里：<code>eval(&#39;(&#39; + json + &#39;)&#39;)</code>，这样做的原因就是因为分组操作符，也就是这对括号，会让解析器强制将JSON的花括号解析成表达式而不是代码块。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">    &#123; <span class=\"string\">\"x\"</span>: <span class=\"number\">5</span> &#125;; <span class=\"comment\">// \"&#123;\" 和 \"&#125;\" 做解析成代码块</span></div><div class=\"line\">&#125; <span class=\"keyword\">catch</span>(err) &#123;</div><div class=\"line\">    <span class=\"comment\">// SyntaxError</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">(&#123; <span class=\"string\">\"x\"</span>: <span class=\"number\">5</span> &#125;); <span class=\"comment\">// 分组操作符强制将\"&#123;\" 和 \"&#125;\"作为对象字面量来解析</span></div></pre></td></tr></table></figure>\n<p>表达式和声明存在着十分微妙的差别，首先，函数声明会在任何表达式被解析和求值之前先被解析和求值，即使你的声明在代码的最后一行，它也会在同作用域内第一个表达式之前被解析/求值，参考如下例子，函数fn是在alert之后声明的，但是在alert执行的时候，fn已经有定义了：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(fn());</div><div class=\"line\"> </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'Hello world!'</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>另外，还有一点需要提醒一下，函数声明在条件语句内虽然可以用，但是没有被标准化，也就是说不同的环境可能有不同的执行结果，所以这样情况下，最好使用函数表达式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 千万别这样做！</span></div><div class=\"line\"><span class=\"comment\">// 因为有的浏览器会返回first的这个function，而有的浏览器返回的却是第二个</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'first'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'second'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 相反，这样情况，我们要用函数表达式</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'first'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">'second'</span>;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n<p>函数声明的实际规则如下：</p>\n<blockquote>\n<p>函数声明只能出现在程序或函数体内。从句法上讲，它们 不能出现在Block（块）（{ … }）中，例如不能出现在 if、while 或 for 语句中。因为 Block（块） 中只能包含Statement语句， 而不能包含函数声明这样的源元素。另一方面，仔细看一看规则也会发现，唯一可能让表达式出现在Block（块）中情形，就是让它作为表达式语句的一部分。但是，规范明确规定了表达式语句不能以关键字function开头。而这实际上就是说，函数表达式同样也不能出现在Statement语句或Block（块）中（因为Block（块）就是由Statement语句构成的）。</p>\n</blockquote>\n<h1 id=\"函数语句\"><a href=\"#函数语句\" class=\"headerlink\" title=\"函数语句\"></a>函数语句</h1><p>在ECMAScript的语法扩展中，有一个是函数语句，目前只有基于<a href=\"http://baike.baidu.com/link?url=gre8zdQLIoY1uzdgpsokc6hMoV8Uh2IaunRbQ-DyvWG2HusZUT2XFEcRKKvF997lPyxLi8EsBYRuOhMo0sRGea\">Gecko</a>的浏览器实现了该扩展，所以对于下面的例子，我们仅是抱着学习的目的来看，一般来说不推荐使用（除非你针对Gecko浏览器进行开发）。</p>\n<ol>\n<li>一般语句能用的地方，函数语句也能用，当然也包括Block块中：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123; &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>函数语句可以像其他语句一样被解析，包含基于条件执行的情形<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">// 1</span></div><div class=\"line\"><span class=\"comment\">// 注：其它客户端会将foo解析成函数声明</span></div><div class=\"line\"><span class=\"comment\">// 因此，第二个foo会覆盖第一个，结果返回2，而不是1</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>函数语句不是在变量初始化期间声明的，而是在运行时声明的——与函数表达式一样。不过，函数语句的标识符一旦声明能在函数的整个作用域生效了。标识符有效性正是导致函数语句与函数表达式不同的关键所在（下一小节我们将会展示命名函数表达式的具体行为）。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 此刻，foo还没用声明</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> foo; <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 进入这里以后，foo就被声明在整个作用域内了</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 从来不会走到这里，所以这里的foo也不会被声明</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">typeof</span> foo; <span class=\"comment\">// \"function\"</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>不过，我们可以使用下面这样的符合标准的代码来模式上面例子中的函数语句：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> foo;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;;</div><div class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    foo = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ol>\n<li>函数语句和函数声明（或命名函数表达式）的字符串表示类似，也包括标识符：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">String</span>(foo); <span class=\"comment\">// function foo() &#123; return 1; &#125;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li>另外一个，早期基于<a href=\"http://baike.baidu.com/link?url=gre8zdQLIoY1uzdgpsokc6hMoV8Uh2IaunRbQ-DyvWG2HusZUT2XFEcRKKvF997lPyxLi8EsBYRuOhMo0sRGea\">Gecko</a>的实现（Firefox 3及以前版本）中存在一个bug，即函数语句覆盖函数声明的方式不正确。在这些早期的实现中，函数语句不知何故不能覆盖函数声明：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 函数声明</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 用函数语句重写</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">// FF3以下返回1，FF3.5以上返回2</span></div><div class=\"line\"><span class=\"comment\">// 不过，如果前面是函数表达式，则没用问题</span></div><div class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">1</span>; &#125;;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">2</span>; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo(); <span class=\"comment\">// 所有版本都返回2</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>再次强调一点，上面这些例子只是在某些浏览器支持，所以推荐大家不要使用这些，除非你就在特性的浏览器上做开发。</p>\n<h1 id=\"命名函数表达式\"><a href=\"#命名函数表达式\" class=\"headerlink\" title=\"命名函数表达式\"></a>命名函数表达式</h1><p>函数表达式在实际应用中还是很常见的，在web开发中友个常用的模式是基于对某种特性的测试来伪装函数定义，从而达到性能优化的目的，但由于这种方式都是在同一作用域内，所以基本上一定要用函数表达式：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 该代码来自Garrett Smith的APE Javascript library库(http://dhtmlkitchen.com/ape/)</span></div><div class=\"line\"><span class=\"keyword\">var</span> contains = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> docEl = <span class=\"built_in\">document</span>.documentElement;</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> docEl.compareDocumentPosition != <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (el.compareDocumentPosition(b) &amp; <span class=\"number\">16</span>) !== <span class=\"number\">0</span>;</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> docEl.contains != <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, b</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> el !== b &amp;&amp; el.contains(b);</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">el, b</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (el === b) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">      <span class=\"keyword\">while</span> (el != b &amp;&amp; (b = b.parentNode) != <span class=\"literal\">null</span>);</div><div class=\"line\">      <span class=\"keyword\">return</span> el === b;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>提到命名函数表达式，理所当然，就是它得有名字，前面的例子var bar = function foo(){};就是一个有效的命名函数表达式，但有一点需要记住：这个名字只在新定义的函数作用域内有效，因为规范规定了标示符不能在外围的作用域内有效：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> foo; <span class=\"comment\">// foo是在内部作用域内有效</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">// foo在外部用于是不可见的</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> foo; <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\">f(); <span class=\"comment\">// \"function\"</span></div></pre></td></tr></table></figure></p>\n<p>既然，这么要求，那命名函数表达式到底有啥用啊？为啥要取名？<br>正如我们开头所说：给它一个名字就是可以让调试过程更方便，因为在调试的时候，如果在调用栈中的每个项都有自己的名字来描述，那么调试过程就太爽了，感受不一样嘛。</p>\n<h1 id=\"调试器中的函数名\"><a href=\"#调试器中的函数名\" class=\"headerlink\" title=\"调试器中的函数名\"></a>调试器中的函数名</h1><p>如果一个函数有名字，那调试器在调试的时候会将它的名字显示在调用的栈上。有些调试器（Firebug）有时候还会为你们函数取名并显示，让他们和那些应用该函数的便利具有相同的角色，可是通常情况下，这些调试器只安装简单的规则来取名，所以说没有太大价格，我们来看一个例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bar();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> baz();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 这里我们使用了3个带名字的函数声明</span></div><div class=\"line\"><span class=\"comment\">// 所以当调试器走到debugger语句的时候，Firebug的调用栈上看起来非常清晰明了</span></div><div class=\"line\"><span class=\"comment\">// 因为很明白地显示了名称</span></div><div class=\"line\">baz</div><div class=\"line\">bar</div><div class=\"line\">foo</div><div class=\"line\">expr_test.html()</div></pre></td></tr></table></figure></p>\n<p>通过查看调用栈的信息，我们可以很明了地知道foo调用了bar, bar又调用了baz（而foo本身有在expr_test.html文档的全局作用域内被调用），不过，还有一个比较爽地方，就是刚才说的Firebug为匿名表达式取名的功能：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bar();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> baz();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// Call stack</span></div><div class=\"line\">baz</div><div class=\"line\">bar() <span class=\"comment\">//看到了么？</span></div><div class=\"line\">foo</div><div class=\"line\">expr_test.html()</div></pre></td></tr></table></figure></p>\n<p>然后，当函数表达式稍微复杂一些的时候，调试器就不那么聪明了，我们只能在调用栈中看到问号：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> bar();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> bar = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListener) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> baz();</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> baz();</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)();</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  foo();</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// Call stack</span></div><div class=\"line\">  baz</div><div class=\"line\">  (?)() <span class=\"comment\">// 这里可是问号哦</span></div><div class=\"line\">  foo</div><div class=\"line\">  expr_test.html()</div></pre></td></tr></table></figure>\n<p>另外，当把函数赋值给多个变量的时候，也会出现令人郁闷的问题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> baz();</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">debugger</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">var</span> baz = bar;</div><div class=\"line\">  bar = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(<span class=\"string\">'spoofed'</span>);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  foo();</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// Call stack:</span></div><div class=\"line\">  bar()</div><div class=\"line\">  foo</div><div class=\"line\">  expr_test.html()</div></pre></td></tr></table></figure>\n<p>这时候，调用栈显示的是foo调用了bar，但实际上并非如此，之所以有这种问题，是因为baz和另外一个包含alert(‘spoofed’)的函数做了引用交换所导致的。</p>\n<p>归根结底，只有给函数表达式取个名字，才是最稳妥的办法，也就是使用<strong>命名函数表达式</strong>。我们来使用带名字的表达式来重写上面的例子（注意立即调用的表达式块里返回的2个函数的名字都是bar）：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> bar();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> bar = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.addEventListener) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> baz();</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">window</span>.attachEvent) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> baz();</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">baz</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">debugger</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 又再次看到了清晰的调用栈信息了耶!</span></div><div class=\"line\">baz</div><div class=\"line\">bar</div><div class=\"line\">foo</div><div class=\"line\">expr_test.html()</div></pre></td></tr></table></figure></p>\n<p>OK，又学了一招吧？不过在高兴之前，我们再看看不同寻常的JScript吧。</p>\n<p>#JScript<br>这一部分讲的全都是<a href=\"http://baike.baidu.com/link?url=48ETrhbO1aXur5vwakiP1VZVKRaXJwc18zy8E87wtDaVUkSg2XfQFwTVFNDX42QcHaEMI_4KylkK4RdQkyCYra\">JScript</a>而不是Javascript这两个真不是一种东西</p>\n<blockquote>\n<p>netscape开发了在Navigator中使用的LiveScript语言，后改名为JavaScript<br>Microsoft发行jscript用于internet explorer.<br>最初的jscript和javascript差异过大，web程序员不得不痛苦的为两种浏览器编写两种脚本。于是诞生了ECMAScript,是一种国际标准化的javascript版本。现在的主流浏览器都支持这种版本。<br>javascript是一个通用的名称，所有浏览器都认识，而jscript只有IE认识。<br>其他语言细节上的区别，不是一两下能说完的。编程时最好遵循ECMAscript标准。这样可以保证兼容性。<br>顺便说一下,javascript原来叫Livescript，后来Sun的java风头正盛的时候netscape就把名字改成javascript。</p>\n</blockquote>\n<p>个人感觉这一段基本上可以忽略了 但为了尊重作者我还是把它整理了一下。</p>\n<h2 id=\"JScript的Bug\"><a href=\"#JScript的Bug\" class=\"headerlink\" title=\"JScript的Bug\"></a>JScript的Bug</h2><p>比较恶的是，IE的ECMAScript实现JScript严重混淆了命名函数表达式，搞得现很多人都出来反对命名函数表达式，而且即便是最新的一版（IE8中使用的5.8版）仍然存在下列问题。</p>\n<p>下面我们就来看看IE在实现中究竟犯了那些错误，俗话说知已知彼，才能百战不殆。我们来看看如下几个例子：</p>\n<p><strong>例1：函数表达式的标示符泄露到外部作用域</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">typeof</span> g; <span class=\"comment\">// \"function\"</span></div></pre></td></tr></table></figure>\n<p>上面我们说过，命名函数表达式的标示符在外部作用域是无效的，但JScript明显是违反了这一规范，上面例子中的标示符g被解析成函数对象，这就乱了套了，很多难以发现的bug都是因为这个原因导致的。<br>==注：IE9貌似已经修复了这个问题==</p>\n<p><strong>例2：将命名函数表达式同时当作函数声明和函数表达式</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typeof</span> g; <span class=\"comment\">// \"function\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div></pre></td></tr></table></figure>\n<p>特性环境下，函数声明会优先于任何表达式被解析，上面的例子展示的是JScript实际上是把命名函数表达式当成函数声明了，因为它在实际声明之前就解析了g。</p>\n<p>这个例子引出了下一个例子。</p>\n<p><strong>例3：命名函数表达式会创建两个截然不同的函数对象！</strong><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">f === g; <span class=\"comment\">// false</span></div><div class=\"line\"> </div><div class=\"line\">f.expando = <span class=\"string\">'foo'</span>;</div><div class=\"line\">g.expando; <span class=\"comment\">// undefined</span></div></pre></td></tr></table></figure></p>\n<p>看到这里，大家会觉得问题严重了，因为修改任何一个对象，另外一个没有什么改变，这太恶了。通过这个例子可以发现，创建2个不同的对象，也就是说如果你想修改f的属性中保存某个信息，然后想当然地通过引用相同对象的g的同名属性来使用，那问题就大了，因为根本就不可能。</p>\n<p>再来看一个稍微复杂的例子：</p>\n<p><strong>例4：仅仅顺序解析函数声明而忽略条件语句块</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">false</span>) &#123;</div><div class=\"line\">  f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">g(); <span class=\"comment\">// 2</span></div></pre></td></tr></table></figure>\n<p>这个bug查找就难多了，但导致bug的原因却非常简单。首先，g被当作函数声明解析，由于JScript中的函数声明不受条件代码块约束，所以在这个很恶的if分支中，g被当作另一个函数function g(){ return 2 }，也就是又被声明了一次。然后，所有“常规的”表达式被求值，而此时f被赋予了另一个新创建的对象的引用。由于在对表达式求值的时候，永远不会进入“这个可恶if分支，因此f就会继续引用第一个函数function g(){ return 1 }。分析到这里，问题就很清楚了：假如你不够细心，在f中调用了g，那么将会调用一个毫不相干的g函数对象。</p>\n<p>你可能会文，将不同的对象和arguments.callee相比较时，有什么样的区别呢？我们来看看：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">g</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> [</div><div class=\"line\">    <span class=\"built_in\">arguments</span>.callee == f,</div><div class=\"line\">    <span class=\"built_in\">arguments</span>.callee == g</div><div class=\"line\">  ];</div><div class=\"line\">&#125;;</div><div class=\"line\">f(); <span class=\"comment\">// [true, false]</span></div><div class=\"line\">g(); <span class=\"comment\">// [false, true]</span></div></pre></td></tr></table></figure>\n<p>可以看到，arguments.callee的引用一直是被调用的函数，实际上这也是好事，稍后会解释。</p>\n<p>还有一个有趣的例子，那就是在不包含声明的赋值语句中使用命名函数表达式：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  f = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure>\n<p>按照代码的分析，我们原本是想创建一个全局属性f（注意不要和一般的匿名函数混淆了，里面用的是带名字的生命），JScript在这里捣乱了一把，首先他把表达式当成函数声明解析了，所以左边的f被声明为局部变量了（和一般的匿名函数里的声明一样），然后在函数执行的时候，f已经是定义过的了，右边的function f(){}则直接就赋值给局部变量f了，所以f根本就不是全局属性。</p>\n<p>了解了JScript这么变态以后，我们就要及时预防这些问题了，首先<strong>防范标识符泄漏带外部作用域</strong>，其次，应该永远<strong>不引用被用作函数名称的标识符</strong>；还记得前面例子中那个讨人厌的标识符g吗？——如果我们能够当g不存在，可以避免多少不必要的麻烦哪。因此，关键就在于始终要通过f或者arguments.callee来引用函数。如果你使用了命名函数表达式，那么应该只在调试的时候利用那个名字。最后，还要记住一点，一定要把<strong>命名函数表达式声明期间错误创建的函数清理干净</strong>。</p>\n<p>对于，上面最后一点，我们还得再解释一下。</p>\n<h2 id=\"WebKit的displayName\"><a href=\"#WebKit的displayName\" class=\"headerlink\" title=\"WebKit的displayName\"></a>WebKit的displayName</h2><p><del>WebKit团队在这个问题采取了有点儿另类的策略。介于匿名和命名函数如此之差的表现力，WebKit引入了一个“特殊的”<code>displayName</code>属性（本质上是一个字符串），如果开发人员为函数的这个属性赋值，则该属性的值将在调试器或性能分析器中被显示在函数“名称”的位置上。<a href=\"http://www.alertdebugging.com/2009/04/29/building-a-better-javascript-profiler-with-webkit/\">Francisco Tolmasky详细地解释了这个策略的原理和实现</a>。</del></p>\n<h1 id=\"ECMAScript-5\"><a href=\"#ECMAScript-5\" class=\"headerlink\" title=\"ECMAScript-5\"></a>ECMAScript-5</h1><p>在ECMAScript-262第5版引入了<strong>严格模式（strict mode）</strong>。开启严格模式的实现会禁用语言中的那些不稳定、不可靠和不安全的特性。据说出于安全方面的考虑，<code>arguments.callee</code>属性将在严格模式下被“封杀”。因此，在处于严格模式时，访问<code>arguments.callee</code>会导致<code>TypeError</code>（参见ECMA-262第5版的10.6节）。而我之所以在此提到严格模式，是因为如果在基于第5版标准的实现中无法使用<code>arguments.callee</code>来执行递归操作，那么使用命名函数表达式的可能性就会大大增加。从这个意义上来说，理解命名函数表达式的语义及其bug也就显得更加重要了。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 此前，你可能会使用arguments.callee</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * <span class=\"built_in\">arguments</span>.callee(x - <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;)(<span class=\"number\">10</span>);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 但在严格模式下，有可能就要使用命名函数表达式</span></div><div class=\"line\">  (<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * factorial(x - <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;)(<span class=\"number\">10</span>);</div><div class=\"line\"> </div><div class=\"line\">  <span class=\"comment\">// 要么就退一步，使用没有那么灵活的函数声明</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">factorial</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> x * factorial(x - <span class=\"number\">1</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">  factorial(<span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<h1 id=\"致谢\"><a href=\"#致谢\" class=\"headerlink\" title=\"致谢\"></a>致谢</h1><p><strong><em>理查德· 康福德（Richard Cornford）</em></strong>，是他率先<a href=\"http://groups.google.com/group/comp.lang.javascript/msg/5b508b03b004bce8\">解释了JScript中命名函数表达式所存在的bug</a>。理查德解释了我在这篇文章中提及的大多数bug，所以我强烈建议大家去看看他的解释。我还要感谢<strong><em>Yann-Erwan Perio</em></strong>和<strong><em>道格拉斯·克劳克佛德（Douglas Crockford）</em></strong>，他们早在2003年就在<a href=\"http://groups.google.com/group/comp.lang.javascript/msg/03d53d114d176323\">comp.lang.javascript论坛中提及并讨论NFE问题了</a>。</p>\n<p><strong><em>约翰-戴维·道尔顿（John-David Dalton）</em></strong>对“最终解决方案”提出了很好的建议。</p>\n<p><strong><em>托比·兰吉</em></strong>的点子被我用在了“替代方案”中。</p>\n<p><strong><em>盖瑞特·史密斯（Garrett Smith）</em></strong>和<strong><em>德米特里·苏斯尼科（Dmitry Soshnikov）</em></strong>对本文的多方面作出了补充和修正。</p>\n<p>英文原文：<a href=\"http://kangax.github.com/nfe/\">http://kangax.github.com/nfe/</a></p>\n<p>参考译文：<a href=\"http://www.cn-cuckoo.com/main/wp-content/uploads/2009/12/named-function-expressions-demystified.html#jscript-memory-management\">连接访问</a> (<span style=\"text-decoration: underline;\">SpiderMonkey的怪癖</span>之后的章节参考该文)</p>\n<h1 id=\"关于本文\"><a href=\"#关于本文\" class=\"headerlink\" title=\"关于本文\"></a>关于本文</h1><p>本文转自<a href=\"http://www.cnblogs.com/TomXu\">TOM大叔</a>的<a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\">深入理解JavaScript系列</a>本文有大量删减，<a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/29/2290308.html\">查看原文</a></p>\n<blockquote>\n<p>【深入理解JavaScript系列】文章，包括了原创，翻译，转载，整理等各类型文章，原文是TOM大叔的一个非常不错的专题，现将其重新整理发布。谢谢大叔。</p>\n</blockquote>"},{"title":"编写高质量JavaScript代码的基本要点","_content":"\n#前言\n才华横溢的[Stoyan Stefanov](http://www.phpied.com/)，在他写的由[O’Reilly](http://oreilly.com/)初版的新书[《JavaScript Patterns》](http://amzn.to/93szK7)(JavaScript模式)中，我想要是为我们的读者贡献其摘要，那会是件很美妙的事情。具体一点就是编写高质量JavaScript的一些要素，例如避免全局变量，使用单变量声明，在循环中预缓存length(长度)，遵循代码阅读，以及更多。\n此摘要也包括一些与代码不太相关的习惯，但对整体代码的创建息息相关，包括撰写API文档、执行同行评审以及运行JSLint。这些习惯和最佳做法可以帮助你写出更好的，更易于理解和维护的代码，这些代码在几个月或是几年之后再回过头看看也是会觉得很自豪的。\n\n<!-- more -->\n\n# 书写可维护的代码\n软件bug的修复是昂贵的，并且随着时间的推移，这些bug的成本也会增加，尤其当这些bug潜伏并慢慢出现在已经发布的软件中时。当你发现bug 的时候就立即修复它是最好的，此时你代码要解决的问题在你脑中还是很清晰的。否则，你转移到其他任务，忘了那个特定的代码，一段时间后再去查看这些代码就 需要：\n \n*   花时间学习和理解这个问题\n*   化时间是了解应该解决的问题代码\n \n还有问题，特别对于大的项目或是公司，修复bug的这位伙计不是写代码的那个人（且发现bug和修复bug的不是同一个人）。因此，必须降低理解代 码花费的时间，无论是一段时间前你自己写的代码还是团队中的其他成员写的代码。这关系到底线（营业收入）和开发人员的幸福，因为我们更应该去开发新的激动 人心的事物而不是花几小时几天的时间去维护遗留代码。\n另一个相关软件开发生命的事实是，读代码花费的时间要比写来得多。有时候，当你专注并深入思考某个问题的时候，你可以坐下来，一个下午写大量的代码。\n你的代码很能很快就工作了，但是，随着应用的成熟，还会有很多其他的事情发生，这就要求你的进行进行审查，修改，和调整。例如：\n \n*   bug是暴露的\n*   新功能被添加到应用程序\n*   程序在新的环境下工作（例如，市场上出现新想浏览器）\n*   代码改变用途\n*   代码得完全从头重新，或移植到另一个架构上或者甚至使用另一种语言\n \n由于这些变化，很少人力数小时写的代码最终演变成花数周来阅读这些代码。这就是为什么创建可维护的代码对应用程序的成功至关重要。\n可维护的代码意味着：\n \n*   可读的\n*   一致的\n*   可预测的\n*   看上去就像是同一个人写的\n*   已记录\n \n# 最小全局变量\nJavaScript通过函数管理作用域。在函数内部声明的变量只在这个函数内部，函数外面不可用。另一方面，全局变量就是在任何函数外面声明的或是未声明直接简单使用的。\n每个JavaScript环境有一个全局对象，当你在任意的函数外面使用this的时候可以访问到。你创建的每一个全部变量都成了这个全局对象的属 性。在浏览器中，方便起见，该全局对象有个附加属性叫做window，此window(通常)指向该全局对象本身。下面的代码片段显示了如何在浏览器环境 中创建和访问的全局变量：\n \n \n```javascript\nmyglobal = \"hello\"; // 不推荐写法\nconsole.log(myglobal); // \"hello\"\nconsole.log(window.myglobal); // \"hello\"\nconsole.log(window[\"myglobal\"]); // \"hello\"\nconsole.log(this.myglobal); // \"hello\"\n```\n \n \n## 全局变量的问题\n \n全局变量的问题在于，你的JavaScript应用程序和web页面上的所有代码都共享了这些全局变量，他们住在同一个全局命名空间，所以当程序的两个不同部分定义同名但不同作用的全局变量的时候，命名冲突在所难免。\nweb页面包含不是该页面开发者所写的代码也是比较常见的，例如：\n \n*   第三方的JavaScript库\n*   广告方的脚本代码\n*   第三方用户跟踪和分析脚本代码\n*   不同类型的小组件，标志和按钮\n \n \n比方说，该第三方脚本定义了一个全局变量，叫做result；接着，在你的函数中也定义一个名为result的全局变量。其结果就是后面的变量覆盖前面的，第三方脚本就一下子嗝屁啦！\n因此，要想和其他脚本成为好邻居的话，尽可能少的使用全局变量是很重要的。在书中后面提到的一些减少全局变量的策略，例如命名空间模式或是函数立即自动执行，但是要想让全局变量少最重要的还是始终使用var来声明变量。\n由于JavaScript的两个特征，不自觉地创建出全局变量是出乎意料的容易。首先，你可以甚至不需要声明就可以使用变量；第二，JavaScript有隐含的全局概念，意味着你不声明的任何变量都会成为一个全局对象属性。参考下面的代码：\n \n```javascript\nfunction sum(x, y) {\n   // 不推荐写法: 隐式全局变量\n   result = x + y;\n   return result;\n}\n```\n \n此段代码中的`result`没有声明。代码照样运作正常，但在调用函数后你最后的结果就多一个全局命名空间，这可以是一个问题的根源。\n经验法则是始终使用var声明变量，正如改进版的sum()函数所演示的：\n \n```javascript\nfunction sum(x, y) {\n   var result = x + y;\n   return result;\n}\n```\n \n \n另一个创建隐式全局变量的反例就是使用任务链进行部分var声明。下面的片段中，`a`是本地变量,但是`b`却是全局变量，这可能不是你希望发生的：\n \n```javascript\n// 反例，勿使用\nfunction foo() {\n   var a = b = 0;\n   // ...\n}\n```\n \n此现象发生的原因在于这个从右到左的赋值，首先，是赋值表达式`b = 0`，此情况下b是未声明的。这个表达式的返回值是0，然后这个0就分配给了通过var定义的这个局部变量a。换句话说，就好比你输入了：\n \n```javascript\nvar a = (b = 0);\n```\n \n \n如果你已经准备好声明变量，使用链分配是比较好的做法，不会产生任何意料之外的全局变量，如：\n```javascript\nfunction foo() {\n   var a, b;\n   // ... a = b = 0; // 两个均局部变量\n}\n```\n \n> 然而，另外一个避免全局变量的原因是可移植性。如果你想你的代码在不同的环境下（主机下）运行，使用全局变量如履薄冰，因为你会无意中覆盖你最初环境下不存在的主机对象（所以你原以为名称可以放心大胆地使用，实际上对于有些情况并不适用）。\n \n \n## 忘记var的副作用\n隐式全局变量和明确定义的全局变量间有些小的差异，就是通过`delete`操作符让变量未定义的能力。\n \n*   通过var创建的全局变量（任何函数之外的程序中创建）是不能被删除的。\n*   无var创建的隐式全局变量（无视是否在函数中创建）是能被删除的。\n \n这表明，在技术上，隐式全局变量并不是真正的全局变量，但它们是全局对象的属性。属性是可以通过`delete`操作符删除的，而变量是不能的：\n \n```javascript\n// 定义三个全局变量\nvar global_var = 1;\nglobal_novar = 2; // 反面教材\n(function () {\n   global_fromfunc = 3; // 反面教材\n}());\n \n// 试图删除\ndelete global_var; // false\ndelete global_novar; // true\ndelete global_fromfunc; // true\n \n// 测试该删除\ntypeof global_var; // \"number\"\ntypeof global_novar; // \"undefined\"\ntypeof global_fromfunc; // \"undefined\"\n```\n \n在ES5严格模式下，未声明的变量（如在前面的代码片段中的两个反面教材）工作时会抛出一个错误。\n \n \n## 访问全局对象\n \n在浏览器中，全局对象可以通过`window`属性在代码的任何位置访问（除非你做了些比较出格的事情，像是声明了一个名为window的局部变量）。但是在其他环境下，这个方便的属性可能被叫做其他什么东西（甚至在程序中不可用）。如果你需要在没有硬编码的`window`标识符下访问全局对象，你可以在任何层级的函数作用域中做如下操作：\n \n```javascript\nvar global = (function () {\n   return this;\n}());\n```\n \n这种方法可以随时获得全局对象，因为其在函数中被当做函数调用了（不是通过`new`构造），`this`总 是指向全局对象。实际上这个病不适用于ECMAScript 5严格模式，所以，在严格模式下时，你必须采取不同的形式。例如，你正在开发一个JavaScript库，你可以将你的代码包裹在一个即时函数中，然后从 全局作用域中，传递一个引用指向this作为你即时函数的参数。\n \n \n## 单var形式\n \n \n在函数顶部使用单var语句是比较有用的一种形式，其好处在于：\n \n \n*   提供了一个单一的地方去寻找功能所需要的所有局部变量\n*   防止变量在定义之前使用的逻辑错误\n*   帮助你记住声明的全局变量，因此较少了全局变量==//zxx:此处我自己是有点晕乎的…==\n*   少代码（类型啊传值啊单线完成）\n \n \n单var形式长得就像下面这个样子：\n \n \n```javascript\nfunction func() {\n   var a = 1,\n       b = 2,\n       sum = a + b,\n       myobject = {},\n       i,\n       j;\n   // function body...\n}\n```\n \n \n您可以使用一个var语句声明多个变量，并以逗号分隔。像这种初始化变量同时初始化值的做法是很好的。这样子可以防止逻辑错误（所有未初始化但声明的变量的初始值是`undefined`）和增加代码的可读性。在你看到代码后，你可以根据初始化的值知道这些变量大致的用途，例如是要当作对象呢还是当作整数来使。\n \n \n你也可以在声明的时候做一些实际的工作，例如前面代码中的`sum = a + b`这个情况，另外一个例子就是当你使用DOM（文档对象模型）引用时，你可以使用单一的var把DOM引用一起指定为局部变量，就如下面代码所示的：\n \n```javascript\nfunction updateElement() {\n   var el = document.getElementById(\"result\"),\n       style = el.style;\n   // 使用el和style干点其他什么事...\n}\n```\n \n## 预解析：var散布的问题\n \n \nJavaScript中，你可以在函数的任何位置声明多个var语句，并且它们就好像是在函数顶部声明一样发挥作用，这种行为称为 hoisting（悬置/置顶解析/预解析）。当你使用了一个变量，然后不久在函数中又重新声明的话，就可能产生逻辑错误。对于JavaScript，只 要你的变量是在同一个作用域中（同一函数），它都被当做是声明的，即使是它在var声明前使用的时候。看下面这个例子：\n \n```javascript\n// 反例\nmyname = \"global\"; // 全局变量\nfunction func() {\n    alert(myname); // \"undefined\"\n    var myname = \"local\";\n    alert(myname); // \"local\"\n}\nfunc();\n```\n \n在这个例子中，你可能会以为第一个alert弹出的是”global”，第二个弹出”loacl”。这种期许是可以理解的，因为在第一个alert 的时候，myname未声明，此时函数肯定很自然而然地看全局变量myname，但是，实际上并不是这么工作的。第一个alert会弹 出”undefined”是因为myname被当做了函数的局部变量（尽管是之后声明的），所有的变量声明当被悬置到函数的顶部了。因此，为了避免这种混 乱，最好是预先声明你想使用的全部变量。\n \n \n上面的代码片段执行的行为可能就像下面这样：\n \n```javascript\nmyname = \"global\"; // global variable\nfunction func() {\n   var myname; // 等同于 -> var myname = undefined;\n   alert(myname); // \"undefined\"\n   myname = \"local\";\n   alert(myname); // \"local\"}\nfunc();\n```\n \n> 为了完整，我们再提一提执行层面的稍微复杂点的东西。代码处理分两个阶段，第一阶段是变量，函数声明，以及正常格式的参数创建，这是一个解析和进入上下文 的阶段。第二个阶段是代码执行，函数表达式和不合格的标识符（为声明的变量）被创建。但是，出于实用的目的，我们就采用了”hoisting”这个概念， 这种ECMAScript标准中并未定义，通常用来描述行为。\n \n \n# for循环\n \n \n在`for`循环中，你可以循环取得数组或是数组类似对象的值，譬如`arguments`和`HTMLCollection`对象。通常的循环形式如下：\n \n```javascript\n// 次佳的循环\nfor (var i = 0; i < myarray.length; i++) {\n   // 使用myarray[i]做点什么\n}\n```\n \n \n这种形式的循环的不足在于每次循环的时候数组的长度都要去获取下。这回降低你的代码，尤其当`myarray`不是数组，而是一个`HTMLCollection`对象的时候。\n \n \n`HTMLCollections`指的是DOM方法返回的对象，例如：\n \n \n```javascript\ndocument.getElementsByName()\ndocument.getElementsByClassName()\ndocument.getElementsByTagName()\n```\n \n \n还有其他一些`HTMLCollections`，这些是在DOM标准之前引进并且现在还在使用的。有：\n \n \n```javascript\ndocument.images: 页面上所有的图片元素\ndocument.links : 所有a标签元素\ndocument.forms : 所有表单\ndocument.forms[0].elements : 页面上第一个表单中的所有域\n```\n \n \n集合的麻烦在于它们实时查询基本文档（HTML页面）。这意味着每次你访问任何集合的长度，你要实时查询DOM，而DOM操作一般都是比较昂贵的。\n \n \n这就是为什么当你循环获取值时，缓存数组(或集合)的长度是比较好的形式，正如下面代码显示的：\n \n \n```javascript\nfor (var i = 0, max = myarray.length; i < max; i++) {\n   // 使用myarray[i]做点什么\n}\n```\n \n \n这样，在这个循环过程中，你只检索了一次长度值。\n \n \n在所有浏览器下，循环获取内容时缓存`HTMLCollections`的长度是更快的，2倍(Safari3)到190倍(IE7)之间。==//zxx:此数据貌似很老，仅供参考==\n \n \n注意到，当你明确想要修改循环中的集合的时候（例如，添加更多的DOM元素），你可能更喜欢长度更新而不是常量。\n \n \n伴随着单var形式，你可以把变量从循环中提出来，就像下面这样：\n \n```javascript\nfunction looper() {\n   var i = 0,\n        max,\n        myarray = [];\n   // ...\n   for (i = 0, max = myarray.length; i < max; i++) {\n      // 使用myarray[i]做点什么\n   }\n}\n```\n \n \n这种形式具有一致性的好处，因为你坚持了单一var形式。不足在于当重构代码的时候，复制和粘贴整个循环有点困难。例如，你从一个函数复制了一个循环到另一个函数，你不得不去确定你能够把`i`和`max`引入新的函数（如果在这里没有用的话，很有可能你要从原函数中把它们删掉）。\n \n \n最后一个需要对循环进行调整的是使用下面表达式之一来替换`i++`。\n \n \n```javascript\ni = i + 1\ni += 1\n```\n \n \nJSLint提示您这样做，原因是`++`和`–-`促进了“过分棘手(excessive trickiness)”。==//zxx:这里比较难翻译，我想本意应该是让代码变得更加的棘手==\n如果你直接无视它，JSLint的`plusplus`选项会是`false`（默认是default）。\n \n \n还有两种变化的形式，其又有了些微改进，因为：\n \n \n*   少了一个变量(无max)\n*   向下数到0，通常更快，因为和0做比较要比和数组长度或是其他不是0的东西作比较更有效率\n \n \n```javascript\n//第一种变化的形式：\nvar i, myarray = [];\nfor (i = myarray.length; i–-;) {\n   // 使用myarray[i]做点什么\n}\n \n//第二种使用while循环：\nvar myarray = [],\n    i = myarray.length;\nwhile (i–-) {\n   // 使用myarray[i]做点什么\n}\n```\n \n这些小的改进只体现在性能上，此外JSLint会对使用i–-加以抱怨。\n \n \n# for-in循环\n \n \n`for-in`循环应该用在非数组对象的遍历上，使用`for-in`进行循环也被称为“枚举”。\n \n \n从技术上将，你可以使用`for-in`循环数组（因为JavaScript中数组也是对象），但这是不推荐的。因为如果数组对象已被自定义的功能增强，就可能发生逻辑错误。另外，在for-in中，属性列表的顺序（序列）是不能保证的。所以最好数组使用正常的for循环，对象使用for-in循环。\n \n \n有个很重要的`hasOwnProperty()`方法，当遍历对象属性的时候可以过滤掉从原型链上下来的属性。\n \n \n思考下面一段代码：\n \n```javascript\n// 对象\nvar man = {\n   hands: 2,\n   legs: 2,\n   heads: 1\n};\n \n// 在代码的某个地方\n// 一个方法添加给了所有对象\nif (typeof Object.prototype.clone === \"undefined\") {\n   Object.prototype.clone = function () {};\n}\n```\n \n在这个例子中，我们有一个使用对象字面量定义的名叫man的对象。在man定义完成后的某个地方，在对象原型上增加了一个很有用的名叫 clone()的方法。此原型链是实时的，这就意味着所有的对象自动可以访问新的方法。为了避免枚举man的时候出现clone()方法，你需要应用`hasOwnProperty()`方法过滤原型属性。如果不做过滤，会导致clone()函数显示出来，在大多数情况下这是不希望出现的。\n \n \n```javascript\n// 1.\n// for-in 循环\nfor (var i in man) {\n   if (man.hasOwnProperty(i)) { // 过滤\n      console.log(i, \":\", man[i]);\n   }\n}\n/* 控制台显示结果\nhands : 2\nlegs : 2\nheads : 1\n*/\n// 2.\n// 反面例子:\n// for-in loop without checking hasOwnProperty()\nfor (var i in man) {\n   console.log(i, \":\", man[i]);\n}\n/*\n控制台显示结果\nhands : 2\nlegs : 2\nheads : 1\nclone: function()\n*/\n```\n另外一种使用hasOwnProperty()的形式是取消Object.prototype上的方法。像是：\n```javascript\nfor (var i in man) {\n   if (Object.prototype.hasOwnProperty.call(man, i)) { // 过滤\n      console.log(i, \":\", man[i]);\n   }\n}\n```\n \n其好处在于在man对象重新定义hasOwnProperty情况下避免命名冲突。也避免了长属性查找对象的所有方法，你可以使用局部变量“缓存”它。\n \n \n```javascript\nvar i, hasOwn = Object.prototype.hasOwnProperty;\nfor (i in man) {\n    if (hasOwn.call(man, i)) { // 过滤\n        console.log(i, \":\", man[i]);\n    }\n}\n```\n \n \n> 严格来说，不使用`hasOwnProperty()`并不是一个错误。根据任务以及你对代码的自信程度，你可以跳过它以提高些许的循环速度。但是当你对当前对象内容（和其原型链）不确定的时候，添加`hasOwnProperty()`更加保险些。\n \n \n格式化的变化（通不过JSLint）会直接忽略掉花括号，把if语句放到同一行上。其优点在于循环语句读起来就像一个完整的想法（每个元素都有一个自己的属性”X”，使用”X”干点什么）：\n \n```javascript\n// 警告： 通不过JSLint检测\nvar i, hasOwn = Object.prototype.hasOwnProperty;\nfor (i in man) if (hasOwn.call(man, i)) { // 过滤\n    console.log(i, \":\", man[i]);\n}\n```\n \n# （不）扩展内置原型\n \n \n扩增构造函数的prototype属性是个很强大的增加功能的方法，但有时候它太强大了。\n \n \n增加内置的构造函数原型（如Object(), Array(), 或Function()）挺诱人的，但是这严重降低了可维护性，因为它让你的代码变得难以预测。使用你代码的其他开发人员很可能更期望使用内置的 JavaScript方法来持续不断地工作，而不是你另加的方法。\n \n \n另外，属性添加到原型中，可能会导致不使用hasOwnProperty属性时在循环中显示出来，这会造成混乱。\n \n \n因此，不增加内置原型是最好的。你可以指定一个规则，仅当下面的条件均满足时例外：\n \n \n*   可以预期将来的ECMAScript版本或是JavaScript实现将一直将此功能当作内置方法来实现。例如，你可以添加ECMAScript 5中描述的方法，一直到各个浏览器都迎头赶上。这种情况下，你只是提前定义了有用的方法。\n*   如果您检查您的自定义属性或方法已不存在——也许已经在代码的其他地方实现或已经是你支持的浏览器JavaScript引擎部分。\n*   你清楚地文档记录并和团队交流了变化。\n \n \n如果这三个条件得到满足，你可以给原型进行自定义的添加，形式如下：\n \n```javascript\nif (typeof Object.protoype.myMethod !== \"function\") {\n   Object.protoype.myMethod = function () {\n      // 实现...\n   };\n}\n```\n \n# switch模式\n \n你可以通过类似下面形式的switch语句增强可读性和健壮性：\n \n```javascript\nvar inspect_me = 0,\n    result = '';\nswitch (inspect_me) {\ncase 0:\n   result = \"zero\";\n   break;\ncase 1:\n   result = \"one\";\n   break;\ndefault:\n   result = \"unknown\";\n}\n```\n \n这个简单的例子中所遵循的风格约定如下：\n \n \n*   每个case和switch对齐（花括号缩进规则除外）\n*   每个case中代码缩进\n*   每个case以break清除结束\n*   避免贯穿（故意忽略break）。如果你非常确信贯穿是最好的方法，务必记录此情况，因为对于有些阅读人而言，它们可能看起来是错误的。\n*   以default结束switch：确保总有健全的结果，即使无情况匹配。\n \n \n# 避免隐式类型转换\n \n \nJavaScript的变量在比较的时候会隐式类型转换。这就是为什么一些诸如：false == 0 或 “” == 0 返回的结果是true。为避免引起混乱的隐含类型转换，在你比较值和表达式类型的时候始终使用===和!==操作符。\n \n \n```javascript\nvar zero = 0;\nif (zero === false) {\n   // 不执行，因为zero为0, 而不是false\n}\n \n// 反面示例\nif (zero == false) {\n   // 执行了...\n}\n```\n \n \n还有另外一种思想观点认为==就足够了===是多余的。例如，当你使用typeof你就知道它会返回一个字符串，所以没有使用严格相等的理由。然而，JSLint要求严格相等，它使代码看上去更有一致性，可以降低代码阅读时的精力消耗。（“==是故意的还是一个疏漏？”）\n \n \n# 避免eval()\n \n \n如果你现在的代码中使用了eval()，记住该咒语“eval()是魔鬼”。此方法接受任意的字符串，并当作JavaScript代码来处理。当有 问题的代码是事先知道的（不是运行时确定的），没有理由使用eval()。如果代码是在运行时动态生成，有一个更好的方式不使用eval而达到同样的目 标。例如，用方括号表示法来访问动态属性会更好更简单：\n \n \n```javascript\n// 反面示例\nvar property = \"name\";\nalert(eval(\"obj.\" + property));\n \n// 更好的\nvar property = \"name\";\nalert(obj[property]);\n \n```\n \n \n使用eval()也带来了安全隐患，因为被执行的代码（例如从网络来）可能已被篡改。这是个很常见的反面教材，当处理Ajax请求得到的JSON 相应的时候。在这些情况下，最好使用JavaScript内置方法来解析JSON相应，以确保安全和有效。若浏览器不支持JSON.parse()，你可 以使用来自JSON.org的库。\n \n \n同样重要的是要记住，给setInterval(), setTimeout()和Function()构造函数传递字符串，大部分情况下，与使用eval()是类似的，因此要避免。在幕后，JavaScript仍需要评估和执行你给程序传递的字符串：\n \n```javascript\n// 反面示例\nsetTimeout(\"myFunc()\", 1000);\nsetTimeout(\"myFunc(1, 2, 3)\", 1000);\n \n// 更好的\nsetTimeout(myFunc, 1000);\nsetTimeout(function () {\n   myFunc(1, 2, 3);\n}, 1000);\n```\n \n使用新的Function()构造就类似于eval()，应小心接近。这可能是一个强大的构造，但往往被误用。如果你绝对必须使用eval()，你 可以考虑使用new Function()代替。有一个小的潜在好处，因为在新Function()中作代码评估是在局部函数作用域中运行，所以代码中任何被评估的通过var 定义的变量都不会自动变成全局变量。另一种方法来阻止自动全局变量是封装eval()调用到一个即时函数中。\n \n \n考虑下面这个例子，这里仅`un`作为全局变量污染了命名空间。\n \n \n```javascript\nconsole.log(typeof un);    // \"undefined\"\nconsole.log(typeof deux); // \"undefined\"\nconsole.log(typeof trois); // \"undefined\"\n \nvar jsstring = \"var un = 1; console.log(un);\";\neval(jsstring); // logs \"1\"\n \njsstring = \"var deux = 2; console.log(deux);\";\nnew Function(jsstring)(); // logs \"2\"\n \njsstring = \"var trois = 3; console.log(trois);\";\n(function () {\n   eval(jsstring);\n}()); // logs \"3\"\n \nconsole.log(typeof un); // number\nconsole.log(typeof deux); // \"undefined\"\nconsole.log(typeof trois); // \"undefined\"\n```\n \n另一间eval()和Function构造不同的是eval()可以干扰作用域链，而Function()更安分守己些。不管你在哪里执行 Function()，它只看到全局作用域。所以其能很好的避免本地变量污染。在下面这个例子中，eval()可以访问和修改它外部作用域中的变量，这是 Function做不来的（注意到使用Function和new Function是相同的）。\n \n```javascript\n(function () {\n   var local = 1;\n   eval(\"local = 3; console.log(local)\"); // logs \"3\"\n   console.log(local); // logs \"3\"\n}());\n \n(function () {\n   var local = 1;\n   Function(\"console.log(typeof local);\")(); // logs undefined\n}());\n```\n \n \n# parseInt()下的数值转换\n \n \n使用parseInt()你可以从字符串中获取数值，该方法接受另一个基数参数，这经常省略，但不应该。当字符串以”0″开头的时候就有可能会出问 题，例如，部分时间进入表单域，在ECMAScript 3中，开头为”0″的字符串被当做8进制处理了，但这已在ECMAScript 5中改变了。为了避免矛盾和意外的结果，总是指定基数参数。\n \n \n```javascript\nvar month = \"06\",\n    year = \"09\";\nmonth = parseInt(month, 10);\nyear = parseInt(year, 10);\n```\n \n此例中，如果你忽略了基数参数，如parseInt(year)，返回的值将是0，因为“09”被当做8进制（好比执行 parseInt( year, 8 )），而09在8进制中不是个有效数字。\n \n替换方法是将字符串转换成数字，包括：\n \n```javascript\n+\"08\" // 结果是 8\nNumber(\"08\") // 8\n```\n \n这些通常快于parseInt()，因为parseInt()方法，顾名思意，不是简单地解析与转换。但是，如果你想输入例如“08 hello”，parseInt()将返回数字，而其它以NaN告终。\n \n \n# 编码规范\n \n \n建立和遵循编码规范是很重要的，这让你的代码保持一致性，可预测，更易于阅读和理解。一个新的开发者加入这个团队可以通读规范，理解其它团队成员书写的代码，更快上手干活。\n \n \n许多激烈的争论发生会议上或是邮件列表上，问题往往针对某些代码规范的特定方面（例如代码缩进，是Tab制表符键还是space空格键）。如果你是 你组织中建议采用规范的，准备好面对各种反对的或是听起来不同但很强烈的观点。要记住，建立和坚定不移地遵循规范要比纠结于规范的细节重要的多。\n \n \n## 缩进\n  代码没有缩进基本上就不能读了。唯一糟糕的事情就是不一致的缩进，因为它看上去像是遵循了规范，但是可能一路上伴随着混乱和惊奇。重要的是规范地使用缩进。\n \n  一些开发人员更喜欢用tab制表符缩进，因为任何人都可以调整他们的编辑器以自己喜欢的空格数来显示Tab。有些人喜欢空格——通常四个，这都无所谓，只要团队每个人都遵循同一个规范就好了。这本书，例如，使用四个空格缩进，这也是JSLint中默认的缩进。\n \n  什么应该缩进呢？规则很简单——花括号里面的东西。这就意味着函数体，循环 (do, while, for, for-in)，if，switch，以及对象字面量中的对象属性。下面的代码就是使用缩进的示例：\n \n \n```javascript\nfunction outer(a, b) {\n    var c = 1,\n        d = 2,\n        inner;\n    if (a > b) {\n        inner = function () {\n            return {\n                r: c - d\n            };\n        };\n    } else {\n        inner = function () {\n            return {\n                r: c + d\n            };\n        };\n    }\n    return inner;\n}\n```\n \n \n## 花括号{}\n \n \n花括号（亦称大括号，下同）应总被使用，即使在它们为可选的时候。技术上将，在in或是for中如果语句仅一条，花括号是不需要的，但是你还是应该总是使用它们，这会让代码更有持续性和易于更新。\n \n \n想象下你有一个只有一条语句的for循环，你可以忽略花括号，而没有解析的错误。\n \n \n```javascript\n// 糟糕的实例\nfor (var i = 0; i < 10; i += 1)\n   alert(i);\n```\n \n但是，如果，后来，主体循环部分又增加了行代码？\n \n \n```javascript\n// 糟糕的实例\nfor (var i = 0; i < 10; i += 1)\n   alert(i);\n   alert(i + \" is \" + (i % 2 ? \"odd\" : \"even\"));\n```\n \n \n第二个alert已经在循环之外，缩进可能欺骗了你。为了长远打算，最好总是使用花括号，即时值一行代码：\n \n \n```javascript\n// 好的实例\nfor (var i = 0; i < 10; i += 1) {\n   alert(i);\n}\n```\n \n \nif条件类似：\n \n```javascript\n// 坏\nif (true)\n   alert(1);\nelse\n   alert(2);\n \n// 好\nif (true) {\n   alert(1);\n} else {\n   alert(2);\n}\n```\n \n \n## 左花括号的位置\n \n \n开发人员对于左大括号的位置有着不同的偏好——在同一行或是下一行。\n \n \n```javascript\nif (true) {\n   alert(\"It's TRUE!\");\n}\n \n//或\n \nif (true)\n{\n   alert(\"It's TRUE!\");\n}\n```\n \n \n这个实例中，仁者见仁智者见智，但也有个案，括号位置不同会有不同的行为表现。这是因为分号插入机制(semicolon insertion mechanism)——JavaScript是不挑剔的，当你选择不使用分号结束一行代码时JavaScript会自己帮你补上。这种行为可能会导致麻 烦，如当你返回对象字面量，而左括号却在下一行的时候：\n \n \n```javascript\n// 警告： 意外的返回值\nfunction func() {\n   return\n  // 下面代码不执行\n   {\n      name : \"Batman\"\n   }\n}\n```\n \n \n如果你希望函数返回一个含有name属性的对象，你会惊讶。由于隐含分号，函数返回undefined。前面的代码等价于：\n \n```javascript\n// 警告： 意外的返回值\nfunction func() {\n   return undefined;\n  // 下面代码不执行\n   {\n      name : \"Batman\"\n   }\n}\n```\n \n \n总之，总是使用花括号，并始终把在与之前的语句放在同一行：\n \n```javascript\nfunction func() {\n   return {\n      name : \"Batman\"\n   };\n}\n```\n \n \n> 关于分号注：就像使用花括号，你应该总是使用分号，即使他们可由JavaScript解析器隐式创建。这不仅促进更科学和更严格的代码，而且有助于解决存有疑惑的地方，就如前面的例子显示。\n \n \n## 空格\n \n \n空格的使用同样有助于改善代码的可读性和一致性。在写英文句子的时候，在逗号和句号后面会使用间隔。在JavaScript中，你可以按照同样的逻辑在列表模样表达式（相当于逗号）和结束语句（相对于完成了“想法”）后面添加间隔。\n \n \n适合使用空格的地方包括：\n \n \n*   for循环分号分开后的的部分：如`for (var i = 0; i < 10; i += 1) {...}`\n*   for循环中初始化的多变量(i和max)：`for (var i = 0, max = 10; i < max; i += 1) {...}`\n*   分隔数组项的逗号的后面：`var a = [1, 2, 3];`\n*   对象属性逗号的后面以及分隔属性名和属性值的冒号的后面：`var o = {a: 1, b: 2};`\n*   限定函数参数：`myFunc(a, b, c)`\n*   函数声明的花括号的前面：`function myFunc() {}`\n*   匿名函数表达式function的后面：`var myFunc = function () {};`\n \n \n使用空格分开所有的操作符和操作对象是另一个不错的使用，这意味着在`+, -, *, =, <, >, <=, >=, ===, !==, &&, ||, +=`等前后都需要空格。\n \n \n```javascript\n// 宽松一致的间距\n// 使代码更易读\n// 使得更加“透气”\nvar d = 0,\n    a = b + 1;\nif (a && b && c) {\n    d = a % c;\n    a += d;\n}\n \n// 反面例子\n// 缺失或间距不一\n// 使代码变得疑惑\nvar d = 0,\n    a = b + 1;\nif (a&&b&&c) {\n    d=a % c;\n    a+= d;\n}\n```\n \n \n最后需要注意的一个空格——花括号间距。最好使用空格：\n \n \n*   函数、if-else语句、循环、对象字面量的左花括号的前面({)\n*   else或while之间的右花括号(})\n \n \n空格使用的一点不足就是增加了文件的大小，但是压缩无此问题。\n \n \n> 有一个经常被忽略的代码可读性方面是垂直空格的使用。你可以使用空行来分隔代码单元，就像是文学作品中使用段落分隔一样。\n \n \n## 命名规范\n \n \n另一种方法让你的代码更具可预测性和可维护性是采用命名规范。这就意味着你需要用同一种形式给你的变量和函数命名。\n \n \n下面是建议的一些命名规范，你可以原样采用，也可以根据自己的喜好作调整。同样，遵循规范要比规范是什么更重要。\n \n \n### 以大写字母写构造函数\n \n \nJavaScript并没有类，但有new调用的构造函数：\n \n \n```javascript\nvar adam = new Person();\n```\n \n \n因为构造函数仍仅仅是函数，仅看函数名就可以帮助告诉你这应该是一个构造函数还是一个正常的函数。\n \n \n命名构造函数时首字母大写具有暗示作用，使用小写命名的函数和方法不应该使用new调用：\n \n \n```javascript\nfunction MyConstructor() {...}\nfunction myFunction() {...}\n```\n \n \n### 分隔单词\n \n \n当你的变量或是函数名有多个单词的时候，最好单词的分离遵循统一的规范，有一个常见的做法被称作“驼峰(Camel)命名法”，就是单词小写，每个单词的首字母大写。\n \n \n对于构造函数，可以使用大驼峰式命名法(upper camel case)，如`MyConstructor()`。对于函数和方法名称，你可以使用小驼峰式命名法(lower camel case)，像是`myFunction()`, `calculateArea()`和`getFirstName()`。\n \n \n要是变量不是函数呢？开发者通常使用小驼峰式命名法，但还有另外一种做法就是所有单词小写以下划线连接：例如，`first_name, favorite_bands,` 和 `old_company_name`，这种标记法帮你直观地区分函数和其他标识——原型和对象。\n \n \nECMAScript的属性和方法均使用Camel标记法，尽管多字的属性名称是罕见的（正则表达式对象的lastIndex和ignoreCase属性）。\n \n \n### 其它命名形式\n \n \n有时，开发人员使用命名规范来弥补或替代语言特性。\n \n \n例如，JavaScript中没有定义常量的方法（尽管有些内置的像Number, MAX_VALUE），所以开发者都采用全部单词大写的规范来命名这个程序生命周期中都不会改变的变量，如：\n```javascript\n// 珍贵常数，只可远观\nvar PI = 3.14,\n    MAX_WIDTH = 800;\n```\n \n还有另外一个完全大写的惯例：全局变量名字全部大写。全部大写命名全局变量可以加强减小全局变量数量的实践，同时让它们易于区分。\n \n \n另外一种使用规范来模拟功能的是私有成员。虽然可以在JavaScript中实现真正的私有，但是开发者发现仅仅使用一个下划线前缀来表示一个私有属性或方法会更容易些。考虑下面的例子：\n```javascript\nvar person = {\n    getName: function () {\n        return this._getFirst() + ' ' + this._getLast();\n    },\n \n    _getFirst: function () {\n        // ...\n    },\n    _getLast: function () {\n        // ...\n    }\n};\n```\n \n \n在此例中，`getName()`就表示公共方法，部分稳定的API。而`_getFirst()`和`_getLast()`则表明了私有。它们仍然是正常的公共方法，但是使用下划线前缀来警告person对象的使用者这些方法在下一个版本中时不能保证工作的，是不能直接使用的。注意，JSLint有些不鸟下划线前缀，除非你设置了noman选项为:false。\n \n \n下面是一些常见的`_private`规范：\n \n \n*   使用尾下划线表示私有，如`name_`和`getElements_()`\n*   使用一个下划线前缀表`_protected`（保护）属性，两个下划线前缀表示`__private` （私有）属性\n*   Firefox中一些内置的变量属性不属于该语言的技术部分，使用两个前下划线和两个后下划线表示，如：`__proto__`和`__parent__`。\n \n \n## 注释\n \n你必须注释你的代码，即使不会有其他人向你一样接触它。通常，当你深入研究一个问题，你会很清楚的知道这个代码是干嘛用的，但是，当你一周之后再回来看的时候，想必也要耗掉不少脑细胞去搞明白到底怎么工作的。\n \n \n很显然，注释不能走极端：每个单独变量或是单独一行。但是，你通常应该记录所有的函数，它们的参数和返回值，或是任何不寻常的技术和方法。要想到注 释可以给你代码未来的阅读者以诸多提示；阅读者需要的是（不要读太多的东西）仅注释和函数属性名来理解你的代码。例如，当你有五六行程序执行特定的任务， 如果你提供了一行代码目的以及为什么在这里的描述的话，阅读者就可以直接跳过这段细节。没有硬性规定注释代码比，代码的某些部分（如正则表达式）可能注释 要比代码多。\n \n \n> 最重要的习惯，然而也是最难遵守的，就是保持注释的及时更新，因为过时的注释比没有注释更加的误导人。\n \n \n# 关于作者\n \n \nStoyan Stefanov是Yahoo!web开发人员，多个O'Reilly书籍的作者、投稿者和技术评审。他经常在会议和他的博客[www.phpied.com](http://www.zhangxinxu.com/wordpress/2010/10/%e7%bf%bb%e8%af%91-%e9%ab%98%e8%b4%a8%e9%87%8fjavascript%e4%bb%a3%e7%a0%81%e4%b9%a6%e5%86%99%e5%9f%ba%e6%9c%ac%e8%a6%81%e7%82%b9/www.phpied.com)上发表web开发主题的演讲。Stoyan还是smush.it图片优化工具的创造者，YUI贡献者，雅虎性能优化工具YSlow 2.0的架构设计师。\n \n \n本文转自：[张鑫旭-翻译-高质量JavaScript代码书写基本要点](http://www.zhangxinxu.com/wordpress/?p=1173)\n \n \n英文原文：http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/\n \n# 关于本文\n本文转自[TOM大叔](http://www.cnblogs.com/TomXu)的[深入理解JavaScript系列](http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html)\n \n>【深入理解JavaScript系列】文章，包括了原创，翻译，转载，整理等各类型文章，原文是TOM大叔的一个非常不错的专题，现将其重新整理发布。谢谢大叔。","source":"_posts/编写高质量JavaScript代码的基本要点.md","raw":"---\ntitle: 编写高质量JavaScript代码的基本要点\ncategories: 深入理解JavaScript\ntags:\n  - JavaScript\n---\n\n#前言\n才华横溢的[Stoyan Stefanov](http://www.phpied.com/)，在他写的由[O’Reilly](http://oreilly.com/)初版的新书[《JavaScript Patterns》](http://amzn.to/93szK7)(JavaScript模式)中，我想要是为我们的读者贡献其摘要，那会是件很美妙的事情。具体一点就是编写高质量JavaScript的一些要素，例如避免全局变量，使用单变量声明，在循环中预缓存length(长度)，遵循代码阅读，以及更多。\n此摘要也包括一些与代码不太相关的习惯，但对整体代码的创建息息相关，包括撰写API文档、执行同行评审以及运行JSLint。这些习惯和最佳做法可以帮助你写出更好的，更易于理解和维护的代码，这些代码在几个月或是几年之后再回过头看看也是会觉得很自豪的。\n\n<!-- more -->\n\n# 书写可维护的代码\n软件bug的修复是昂贵的，并且随着时间的推移，这些bug的成本也会增加，尤其当这些bug潜伏并慢慢出现在已经发布的软件中时。当你发现bug 的时候就立即修复它是最好的，此时你代码要解决的问题在你脑中还是很清晰的。否则，你转移到其他任务，忘了那个特定的代码，一段时间后再去查看这些代码就 需要：\n \n*   花时间学习和理解这个问题\n*   化时间是了解应该解决的问题代码\n \n还有问题，特别对于大的项目或是公司，修复bug的这位伙计不是写代码的那个人（且发现bug和修复bug的不是同一个人）。因此，必须降低理解代 码花费的时间，无论是一段时间前你自己写的代码还是团队中的其他成员写的代码。这关系到底线（营业收入）和开发人员的幸福，因为我们更应该去开发新的激动 人心的事物而不是花几小时几天的时间去维护遗留代码。\n另一个相关软件开发生命的事实是，读代码花费的时间要比写来得多。有时候，当你专注并深入思考某个问题的时候，你可以坐下来，一个下午写大量的代码。\n你的代码很能很快就工作了，但是，随着应用的成熟，还会有很多其他的事情发生，这就要求你的进行进行审查，修改，和调整。例如：\n \n*   bug是暴露的\n*   新功能被添加到应用程序\n*   程序在新的环境下工作（例如，市场上出现新想浏览器）\n*   代码改变用途\n*   代码得完全从头重新，或移植到另一个架构上或者甚至使用另一种语言\n \n由于这些变化，很少人力数小时写的代码最终演变成花数周来阅读这些代码。这就是为什么创建可维护的代码对应用程序的成功至关重要。\n可维护的代码意味着：\n \n*   可读的\n*   一致的\n*   可预测的\n*   看上去就像是同一个人写的\n*   已记录\n \n# 最小全局变量\nJavaScript通过函数管理作用域。在函数内部声明的变量只在这个函数内部，函数外面不可用。另一方面，全局变量就是在任何函数外面声明的或是未声明直接简单使用的。\n每个JavaScript环境有一个全局对象，当你在任意的函数外面使用this的时候可以访问到。你创建的每一个全部变量都成了这个全局对象的属 性。在浏览器中，方便起见，该全局对象有个附加属性叫做window，此window(通常)指向该全局对象本身。下面的代码片段显示了如何在浏览器环境 中创建和访问的全局变量：\n \n \n```javascript\nmyglobal = \"hello\"; // 不推荐写法\nconsole.log(myglobal); // \"hello\"\nconsole.log(window.myglobal); // \"hello\"\nconsole.log(window[\"myglobal\"]); // \"hello\"\nconsole.log(this.myglobal); // \"hello\"\n```\n \n \n## 全局变量的问题\n \n全局变量的问题在于，你的JavaScript应用程序和web页面上的所有代码都共享了这些全局变量，他们住在同一个全局命名空间，所以当程序的两个不同部分定义同名但不同作用的全局变量的时候，命名冲突在所难免。\nweb页面包含不是该页面开发者所写的代码也是比较常见的，例如：\n \n*   第三方的JavaScript库\n*   广告方的脚本代码\n*   第三方用户跟踪和分析脚本代码\n*   不同类型的小组件，标志和按钮\n \n \n比方说，该第三方脚本定义了一个全局变量，叫做result；接着，在你的函数中也定义一个名为result的全局变量。其结果就是后面的变量覆盖前面的，第三方脚本就一下子嗝屁啦！\n因此，要想和其他脚本成为好邻居的话，尽可能少的使用全局变量是很重要的。在书中后面提到的一些减少全局变量的策略，例如命名空间模式或是函数立即自动执行，但是要想让全局变量少最重要的还是始终使用var来声明变量。\n由于JavaScript的两个特征，不自觉地创建出全局变量是出乎意料的容易。首先，你可以甚至不需要声明就可以使用变量；第二，JavaScript有隐含的全局概念，意味着你不声明的任何变量都会成为一个全局对象属性。参考下面的代码：\n \n```javascript\nfunction sum(x, y) {\n   // 不推荐写法: 隐式全局变量\n   result = x + y;\n   return result;\n}\n```\n \n此段代码中的`result`没有声明。代码照样运作正常，但在调用函数后你最后的结果就多一个全局命名空间，这可以是一个问题的根源。\n经验法则是始终使用var声明变量，正如改进版的sum()函数所演示的：\n \n```javascript\nfunction sum(x, y) {\n   var result = x + y;\n   return result;\n}\n```\n \n \n另一个创建隐式全局变量的反例就是使用任务链进行部分var声明。下面的片段中，`a`是本地变量,但是`b`却是全局变量，这可能不是你希望发生的：\n \n```javascript\n// 反例，勿使用\nfunction foo() {\n   var a = b = 0;\n   // ...\n}\n```\n \n此现象发生的原因在于这个从右到左的赋值，首先，是赋值表达式`b = 0`，此情况下b是未声明的。这个表达式的返回值是0，然后这个0就分配给了通过var定义的这个局部变量a。换句话说，就好比你输入了：\n \n```javascript\nvar a = (b = 0);\n```\n \n \n如果你已经准备好声明变量，使用链分配是比较好的做法，不会产生任何意料之外的全局变量，如：\n```javascript\nfunction foo() {\n   var a, b;\n   // ... a = b = 0; // 两个均局部变量\n}\n```\n \n> 然而，另外一个避免全局变量的原因是可移植性。如果你想你的代码在不同的环境下（主机下）运行，使用全局变量如履薄冰，因为你会无意中覆盖你最初环境下不存在的主机对象（所以你原以为名称可以放心大胆地使用，实际上对于有些情况并不适用）。\n \n \n## 忘记var的副作用\n隐式全局变量和明确定义的全局变量间有些小的差异，就是通过`delete`操作符让变量未定义的能力。\n \n*   通过var创建的全局变量（任何函数之外的程序中创建）是不能被删除的。\n*   无var创建的隐式全局变量（无视是否在函数中创建）是能被删除的。\n \n这表明，在技术上，隐式全局变量并不是真正的全局变量，但它们是全局对象的属性。属性是可以通过`delete`操作符删除的，而变量是不能的：\n \n```javascript\n// 定义三个全局变量\nvar global_var = 1;\nglobal_novar = 2; // 反面教材\n(function () {\n   global_fromfunc = 3; // 反面教材\n}());\n \n// 试图删除\ndelete global_var; // false\ndelete global_novar; // true\ndelete global_fromfunc; // true\n \n// 测试该删除\ntypeof global_var; // \"number\"\ntypeof global_novar; // \"undefined\"\ntypeof global_fromfunc; // \"undefined\"\n```\n \n在ES5严格模式下，未声明的变量（如在前面的代码片段中的两个反面教材）工作时会抛出一个错误。\n \n \n## 访问全局对象\n \n在浏览器中，全局对象可以通过`window`属性在代码的任何位置访问（除非你做了些比较出格的事情，像是声明了一个名为window的局部变量）。但是在其他环境下，这个方便的属性可能被叫做其他什么东西（甚至在程序中不可用）。如果你需要在没有硬编码的`window`标识符下访问全局对象，你可以在任何层级的函数作用域中做如下操作：\n \n```javascript\nvar global = (function () {\n   return this;\n}());\n```\n \n这种方法可以随时获得全局对象，因为其在函数中被当做函数调用了（不是通过`new`构造），`this`总 是指向全局对象。实际上这个病不适用于ECMAScript 5严格模式，所以，在严格模式下时，你必须采取不同的形式。例如，你正在开发一个JavaScript库，你可以将你的代码包裹在一个即时函数中，然后从 全局作用域中，传递一个引用指向this作为你即时函数的参数。\n \n \n## 单var形式\n \n \n在函数顶部使用单var语句是比较有用的一种形式，其好处在于：\n \n \n*   提供了一个单一的地方去寻找功能所需要的所有局部变量\n*   防止变量在定义之前使用的逻辑错误\n*   帮助你记住声明的全局变量，因此较少了全局变量==//zxx:此处我自己是有点晕乎的…==\n*   少代码（类型啊传值啊单线完成）\n \n \n单var形式长得就像下面这个样子：\n \n \n```javascript\nfunction func() {\n   var a = 1,\n       b = 2,\n       sum = a + b,\n       myobject = {},\n       i,\n       j;\n   // function body...\n}\n```\n \n \n您可以使用一个var语句声明多个变量，并以逗号分隔。像这种初始化变量同时初始化值的做法是很好的。这样子可以防止逻辑错误（所有未初始化但声明的变量的初始值是`undefined`）和增加代码的可读性。在你看到代码后，你可以根据初始化的值知道这些变量大致的用途，例如是要当作对象呢还是当作整数来使。\n \n \n你也可以在声明的时候做一些实际的工作，例如前面代码中的`sum = a + b`这个情况，另外一个例子就是当你使用DOM（文档对象模型）引用时，你可以使用单一的var把DOM引用一起指定为局部变量，就如下面代码所示的：\n \n```javascript\nfunction updateElement() {\n   var el = document.getElementById(\"result\"),\n       style = el.style;\n   // 使用el和style干点其他什么事...\n}\n```\n \n## 预解析：var散布的问题\n \n \nJavaScript中，你可以在函数的任何位置声明多个var语句，并且它们就好像是在函数顶部声明一样发挥作用，这种行为称为 hoisting（悬置/置顶解析/预解析）。当你使用了一个变量，然后不久在函数中又重新声明的话，就可能产生逻辑错误。对于JavaScript，只 要你的变量是在同一个作用域中（同一函数），它都被当做是声明的，即使是它在var声明前使用的时候。看下面这个例子：\n \n```javascript\n// 反例\nmyname = \"global\"; // 全局变量\nfunction func() {\n    alert(myname); // \"undefined\"\n    var myname = \"local\";\n    alert(myname); // \"local\"\n}\nfunc();\n```\n \n在这个例子中，你可能会以为第一个alert弹出的是”global”，第二个弹出”loacl”。这种期许是可以理解的，因为在第一个alert 的时候，myname未声明，此时函数肯定很自然而然地看全局变量myname，但是，实际上并不是这么工作的。第一个alert会弹 出”undefined”是因为myname被当做了函数的局部变量（尽管是之后声明的），所有的变量声明当被悬置到函数的顶部了。因此，为了避免这种混 乱，最好是预先声明你想使用的全部变量。\n \n \n上面的代码片段执行的行为可能就像下面这样：\n \n```javascript\nmyname = \"global\"; // global variable\nfunction func() {\n   var myname; // 等同于 -> var myname = undefined;\n   alert(myname); // \"undefined\"\n   myname = \"local\";\n   alert(myname); // \"local\"}\nfunc();\n```\n \n> 为了完整，我们再提一提执行层面的稍微复杂点的东西。代码处理分两个阶段，第一阶段是变量，函数声明，以及正常格式的参数创建，这是一个解析和进入上下文 的阶段。第二个阶段是代码执行，函数表达式和不合格的标识符（为声明的变量）被创建。但是，出于实用的目的，我们就采用了”hoisting”这个概念， 这种ECMAScript标准中并未定义，通常用来描述行为。\n \n \n# for循环\n \n \n在`for`循环中，你可以循环取得数组或是数组类似对象的值，譬如`arguments`和`HTMLCollection`对象。通常的循环形式如下：\n \n```javascript\n// 次佳的循环\nfor (var i = 0; i < myarray.length; i++) {\n   // 使用myarray[i]做点什么\n}\n```\n \n \n这种形式的循环的不足在于每次循环的时候数组的长度都要去获取下。这回降低你的代码，尤其当`myarray`不是数组，而是一个`HTMLCollection`对象的时候。\n \n \n`HTMLCollections`指的是DOM方法返回的对象，例如：\n \n \n```javascript\ndocument.getElementsByName()\ndocument.getElementsByClassName()\ndocument.getElementsByTagName()\n```\n \n \n还有其他一些`HTMLCollections`，这些是在DOM标准之前引进并且现在还在使用的。有：\n \n \n```javascript\ndocument.images: 页面上所有的图片元素\ndocument.links : 所有a标签元素\ndocument.forms : 所有表单\ndocument.forms[0].elements : 页面上第一个表单中的所有域\n```\n \n \n集合的麻烦在于它们实时查询基本文档（HTML页面）。这意味着每次你访问任何集合的长度，你要实时查询DOM，而DOM操作一般都是比较昂贵的。\n \n \n这就是为什么当你循环获取值时，缓存数组(或集合)的长度是比较好的形式，正如下面代码显示的：\n \n \n```javascript\nfor (var i = 0, max = myarray.length; i < max; i++) {\n   // 使用myarray[i]做点什么\n}\n```\n \n \n这样，在这个循环过程中，你只检索了一次长度值。\n \n \n在所有浏览器下，循环获取内容时缓存`HTMLCollections`的长度是更快的，2倍(Safari3)到190倍(IE7)之间。==//zxx:此数据貌似很老，仅供参考==\n \n \n注意到，当你明确想要修改循环中的集合的时候（例如，添加更多的DOM元素），你可能更喜欢长度更新而不是常量。\n \n \n伴随着单var形式，你可以把变量从循环中提出来，就像下面这样：\n \n```javascript\nfunction looper() {\n   var i = 0,\n        max,\n        myarray = [];\n   // ...\n   for (i = 0, max = myarray.length; i < max; i++) {\n      // 使用myarray[i]做点什么\n   }\n}\n```\n \n \n这种形式具有一致性的好处，因为你坚持了单一var形式。不足在于当重构代码的时候，复制和粘贴整个循环有点困难。例如，你从一个函数复制了一个循环到另一个函数，你不得不去确定你能够把`i`和`max`引入新的函数（如果在这里没有用的话，很有可能你要从原函数中把它们删掉）。\n \n \n最后一个需要对循环进行调整的是使用下面表达式之一来替换`i++`。\n \n \n```javascript\ni = i + 1\ni += 1\n```\n \n \nJSLint提示您这样做，原因是`++`和`–-`促进了“过分棘手(excessive trickiness)”。==//zxx:这里比较难翻译，我想本意应该是让代码变得更加的棘手==\n如果你直接无视它，JSLint的`plusplus`选项会是`false`（默认是default）。\n \n \n还有两种变化的形式，其又有了些微改进，因为：\n \n \n*   少了一个变量(无max)\n*   向下数到0，通常更快，因为和0做比较要比和数组长度或是其他不是0的东西作比较更有效率\n \n \n```javascript\n//第一种变化的形式：\nvar i, myarray = [];\nfor (i = myarray.length; i–-;) {\n   // 使用myarray[i]做点什么\n}\n \n//第二种使用while循环：\nvar myarray = [],\n    i = myarray.length;\nwhile (i–-) {\n   // 使用myarray[i]做点什么\n}\n```\n \n这些小的改进只体现在性能上，此外JSLint会对使用i–-加以抱怨。\n \n \n# for-in循环\n \n \n`for-in`循环应该用在非数组对象的遍历上，使用`for-in`进行循环也被称为“枚举”。\n \n \n从技术上将，你可以使用`for-in`循环数组（因为JavaScript中数组也是对象），但这是不推荐的。因为如果数组对象已被自定义的功能增强，就可能发生逻辑错误。另外，在for-in中，属性列表的顺序（序列）是不能保证的。所以最好数组使用正常的for循环，对象使用for-in循环。\n \n \n有个很重要的`hasOwnProperty()`方法，当遍历对象属性的时候可以过滤掉从原型链上下来的属性。\n \n \n思考下面一段代码：\n \n```javascript\n// 对象\nvar man = {\n   hands: 2,\n   legs: 2,\n   heads: 1\n};\n \n// 在代码的某个地方\n// 一个方法添加给了所有对象\nif (typeof Object.prototype.clone === \"undefined\") {\n   Object.prototype.clone = function () {};\n}\n```\n \n在这个例子中，我们有一个使用对象字面量定义的名叫man的对象。在man定义完成后的某个地方，在对象原型上增加了一个很有用的名叫 clone()的方法。此原型链是实时的，这就意味着所有的对象自动可以访问新的方法。为了避免枚举man的时候出现clone()方法，你需要应用`hasOwnProperty()`方法过滤原型属性。如果不做过滤，会导致clone()函数显示出来，在大多数情况下这是不希望出现的。\n \n \n```javascript\n// 1.\n// for-in 循环\nfor (var i in man) {\n   if (man.hasOwnProperty(i)) { // 过滤\n      console.log(i, \":\", man[i]);\n   }\n}\n/* 控制台显示结果\nhands : 2\nlegs : 2\nheads : 1\n*/\n// 2.\n// 反面例子:\n// for-in loop without checking hasOwnProperty()\nfor (var i in man) {\n   console.log(i, \":\", man[i]);\n}\n/*\n控制台显示结果\nhands : 2\nlegs : 2\nheads : 1\nclone: function()\n*/\n```\n另外一种使用hasOwnProperty()的形式是取消Object.prototype上的方法。像是：\n```javascript\nfor (var i in man) {\n   if (Object.prototype.hasOwnProperty.call(man, i)) { // 过滤\n      console.log(i, \":\", man[i]);\n   }\n}\n```\n \n其好处在于在man对象重新定义hasOwnProperty情况下避免命名冲突。也避免了长属性查找对象的所有方法，你可以使用局部变量“缓存”它。\n \n \n```javascript\nvar i, hasOwn = Object.prototype.hasOwnProperty;\nfor (i in man) {\n    if (hasOwn.call(man, i)) { // 过滤\n        console.log(i, \":\", man[i]);\n    }\n}\n```\n \n \n> 严格来说，不使用`hasOwnProperty()`并不是一个错误。根据任务以及你对代码的自信程度，你可以跳过它以提高些许的循环速度。但是当你对当前对象内容（和其原型链）不确定的时候，添加`hasOwnProperty()`更加保险些。\n \n \n格式化的变化（通不过JSLint）会直接忽略掉花括号，把if语句放到同一行上。其优点在于循环语句读起来就像一个完整的想法（每个元素都有一个自己的属性”X”，使用”X”干点什么）：\n \n```javascript\n// 警告： 通不过JSLint检测\nvar i, hasOwn = Object.prototype.hasOwnProperty;\nfor (i in man) if (hasOwn.call(man, i)) { // 过滤\n    console.log(i, \":\", man[i]);\n}\n```\n \n# （不）扩展内置原型\n \n \n扩增构造函数的prototype属性是个很强大的增加功能的方法，但有时候它太强大了。\n \n \n增加内置的构造函数原型（如Object(), Array(), 或Function()）挺诱人的，但是这严重降低了可维护性，因为它让你的代码变得难以预测。使用你代码的其他开发人员很可能更期望使用内置的 JavaScript方法来持续不断地工作，而不是你另加的方法。\n \n \n另外，属性添加到原型中，可能会导致不使用hasOwnProperty属性时在循环中显示出来，这会造成混乱。\n \n \n因此，不增加内置原型是最好的。你可以指定一个规则，仅当下面的条件均满足时例外：\n \n \n*   可以预期将来的ECMAScript版本或是JavaScript实现将一直将此功能当作内置方法来实现。例如，你可以添加ECMAScript 5中描述的方法，一直到各个浏览器都迎头赶上。这种情况下，你只是提前定义了有用的方法。\n*   如果您检查您的自定义属性或方法已不存在——也许已经在代码的其他地方实现或已经是你支持的浏览器JavaScript引擎部分。\n*   你清楚地文档记录并和团队交流了变化。\n \n \n如果这三个条件得到满足，你可以给原型进行自定义的添加，形式如下：\n \n```javascript\nif (typeof Object.protoype.myMethod !== \"function\") {\n   Object.protoype.myMethod = function () {\n      // 实现...\n   };\n}\n```\n \n# switch模式\n \n你可以通过类似下面形式的switch语句增强可读性和健壮性：\n \n```javascript\nvar inspect_me = 0,\n    result = '';\nswitch (inspect_me) {\ncase 0:\n   result = \"zero\";\n   break;\ncase 1:\n   result = \"one\";\n   break;\ndefault:\n   result = \"unknown\";\n}\n```\n \n这个简单的例子中所遵循的风格约定如下：\n \n \n*   每个case和switch对齐（花括号缩进规则除外）\n*   每个case中代码缩进\n*   每个case以break清除结束\n*   避免贯穿（故意忽略break）。如果你非常确信贯穿是最好的方法，务必记录此情况，因为对于有些阅读人而言，它们可能看起来是错误的。\n*   以default结束switch：确保总有健全的结果，即使无情况匹配。\n \n \n# 避免隐式类型转换\n \n \nJavaScript的变量在比较的时候会隐式类型转换。这就是为什么一些诸如：false == 0 或 “” == 0 返回的结果是true。为避免引起混乱的隐含类型转换，在你比较值和表达式类型的时候始终使用===和!==操作符。\n \n \n```javascript\nvar zero = 0;\nif (zero === false) {\n   // 不执行，因为zero为0, 而不是false\n}\n \n// 反面示例\nif (zero == false) {\n   // 执行了...\n}\n```\n \n \n还有另外一种思想观点认为==就足够了===是多余的。例如，当你使用typeof你就知道它会返回一个字符串，所以没有使用严格相等的理由。然而，JSLint要求严格相等，它使代码看上去更有一致性，可以降低代码阅读时的精力消耗。（“==是故意的还是一个疏漏？”）\n \n \n# 避免eval()\n \n \n如果你现在的代码中使用了eval()，记住该咒语“eval()是魔鬼”。此方法接受任意的字符串，并当作JavaScript代码来处理。当有 问题的代码是事先知道的（不是运行时确定的），没有理由使用eval()。如果代码是在运行时动态生成，有一个更好的方式不使用eval而达到同样的目 标。例如，用方括号表示法来访问动态属性会更好更简单：\n \n \n```javascript\n// 反面示例\nvar property = \"name\";\nalert(eval(\"obj.\" + property));\n \n// 更好的\nvar property = \"name\";\nalert(obj[property]);\n \n```\n \n \n使用eval()也带来了安全隐患，因为被执行的代码（例如从网络来）可能已被篡改。这是个很常见的反面教材，当处理Ajax请求得到的JSON 相应的时候。在这些情况下，最好使用JavaScript内置方法来解析JSON相应，以确保安全和有效。若浏览器不支持JSON.parse()，你可 以使用来自JSON.org的库。\n \n \n同样重要的是要记住，给setInterval(), setTimeout()和Function()构造函数传递字符串，大部分情况下，与使用eval()是类似的，因此要避免。在幕后，JavaScript仍需要评估和执行你给程序传递的字符串：\n \n```javascript\n// 反面示例\nsetTimeout(\"myFunc()\", 1000);\nsetTimeout(\"myFunc(1, 2, 3)\", 1000);\n \n// 更好的\nsetTimeout(myFunc, 1000);\nsetTimeout(function () {\n   myFunc(1, 2, 3);\n}, 1000);\n```\n \n使用新的Function()构造就类似于eval()，应小心接近。这可能是一个强大的构造，但往往被误用。如果你绝对必须使用eval()，你 可以考虑使用new Function()代替。有一个小的潜在好处，因为在新Function()中作代码评估是在局部函数作用域中运行，所以代码中任何被评估的通过var 定义的变量都不会自动变成全局变量。另一种方法来阻止自动全局变量是封装eval()调用到一个即时函数中。\n \n \n考虑下面这个例子，这里仅`un`作为全局变量污染了命名空间。\n \n \n```javascript\nconsole.log(typeof un);    // \"undefined\"\nconsole.log(typeof deux); // \"undefined\"\nconsole.log(typeof trois); // \"undefined\"\n \nvar jsstring = \"var un = 1; console.log(un);\";\neval(jsstring); // logs \"1\"\n \njsstring = \"var deux = 2; console.log(deux);\";\nnew Function(jsstring)(); // logs \"2\"\n \njsstring = \"var trois = 3; console.log(trois);\";\n(function () {\n   eval(jsstring);\n}()); // logs \"3\"\n \nconsole.log(typeof un); // number\nconsole.log(typeof deux); // \"undefined\"\nconsole.log(typeof trois); // \"undefined\"\n```\n \n另一间eval()和Function构造不同的是eval()可以干扰作用域链，而Function()更安分守己些。不管你在哪里执行 Function()，它只看到全局作用域。所以其能很好的避免本地变量污染。在下面这个例子中，eval()可以访问和修改它外部作用域中的变量，这是 Function做不来的（注意到使用Function和new Function是相同的）。\n \n```javascript\n(function () {\n   var local = 1;\n   eval(\"local = 3; console.log(local)\"); // logs \"3\"\n   console.log(local); // logs \"3\"\n}());\n \n(function () {\n   var local = 1;\n   Function(\"console.log(typeof local);\")(); // logs undefined\n}());\n```\n \n \n# parseInt()下的数值转换\n \n \n使用parseInt()你可以从字符串中获取数值，该方法接受另一个基数参数，这经常省略，但不应该。当字符串以”0″开头的时候就有可能会出问 题，例如，部分时间进入表单域，在ECMAScript 3中，开头为”0″的字符串被当做8进制处理了，但这已在ECMAScript 5中改变了。为了避免矛盾和意外的结果，总是指定基数参数。\n \n \n```javascript\nvar month = \"06\",\n    year = \"09\";\nmonth = parseInt(month, 10);\nyear = parseInt(year, 10);\n```\n \n此例中，如果你忽略了基数参数，如parseInt(year)，返回的值将是0，因为“09”被当做8进制（好比执行 parseInt( year, 8 )），而09在8进制中不是个有效数字。\n \n替换方法是将字符串转换成数字，包括：\n \n```javascript\n+\"08\" // 结果是 8\nNumber(\"08\") // 8\n```\n \n这些通常快于parseInt()，因为parseInt()方法，顾名思意，不是简单地解析与转换。但是，如果你想输入例如“08 hello”，parseInt()将返回数字，而其它以NaN告终。\n \n \n# 编码规范\n \n \n建立和遵循编码规范是很重要的，这让你的代码保持一致性，可预测，更易于阅读和理解。一个新的开发者加入这个团队可以通读规范，理解其它团队成员书写的代码，更快上手干活。\n \n \n许多激烈的争论发生会议上或是邮件列表上，问题往往针对某些代码规范的特定方面（例如代码缩进，是Tab制表符键还是space空格键）。如果你是 你组织中建议采用规范的，准备好面对各种反对的或是听起来不同但很强烈的观点。要记住，建立和坚定不移地遵循规范要比纠结于规范的细节重要的多。\n \n \n## 缩进\n  代码没有缩进基本上就不能读了。唯一糟糕的事情就是不一致的缩进，因为它看上去像是遵循了规范，但是可能一路上伴随着混乱和惊奇。重要的是规范地使用缩进。\n \n  一些开发人员更喜欢用tab制表符缩进，因为任何人都可以调整他们的编辑器以自己喜欢的空格数来显示Tab。有些人喜欢空格——通常四个，这都无所谓，只要团队每个人都遵循同一个规范就好了。这本书，例如，使用四个空格缩进，这也是JSLint中默认的缩进。\n \n  什么应该缩进呢？规则很简单——花括号里面的东西。这就意味着函数体，循环 (do, while, for, for-in)，if，switch，以及对象字面量中的对象属性。下面的代码就是使用缩进的示例：\n \n \n```javascript\nfunction outer(a, b) {\n    var c = 1,\n        d = 2,\n        inner;\n    if (a > b) {\n        inner = function () {\n            return {\n                r: c - d\n            };\n        };\n    } else {\n        inner = function () {\n            return {\n                r: c + d\n            };\n        };\n    }\n    return inner;\n}\n```\n \n \n## 花括号{}\n \n \n花括号（亦称大括号，下同）应总被使用，即使在它们为可选的时候。技术上将，在in或是for中如果语句仅一条，花括号是不需要的，但是你还是应该总是使用它们，这会让代码更有持续性和易于更新。\n \n \n想象下你有一个只有一条语句的for循环，你可以忽略花括号，而没有解析的错误。\n \n \n```javascript\n// 糟糕的实例\nfor (var i = 0; i < 10; i += 1)\n   alert(i);\n```\n \n但是，如果，后来，主体循环部分又增加了行代码？\n \n \n```javascript\n// 糟糕的实例\nfor (var i = 0; i < 10; i += 1)\n   alert(i);\n   alert(i + \" is \" + (i % 2 ? \"odd\" : \"even\"));\n```\n \n \n第二个alert已经在循环之外，缩进可能欺骗了你。为了长远打算，最好总是使用花括号，即时值一行代码：\n \n \n```javascript\n// 好的实例\nfor (var i = 0; i < 10; i += 1) {\n   alert(i);\n}\n```\n \n \nif条件类似：\n \n```javascript\n// 坏\nif (true)\n   alert(1);\nelse\n   alert(2);\n \n// 好\nif (true) {\n   alert(1);\n} else {\n   alert(2);\n}\n```\n \n \n## 左花括号的位置\n \n \n开发人员对于左大括号的位置有着不同的偏好——在同一行或是下一行。\n \n \n```javascript\nif (true) {\n   alert(\"It's TRUE!\");\n}\n \n//或\n \nif (true)\n{\n   alert(\"It's TRUE!\");\n}\n```\n \n \n这个实例中，仁者见仁智者见智，但也有个案，括号位置不同会有不同的行为表现。这是因为分号插入机制(semicolon insertion mechanism)——JavaScript是不挑剔的，当你选择不使用分号结束一行代码时JavaScript会自己帮你补上。这种行为可能会导致麻 烦，如当你返回对象字面量，而左括号却在下一行的时候：\n \n \n```javascript\n// 警告： 意外的返回值\nfunction func() {\n   return\n  // 下面代码不执行\n   {\n      name : \"Batman\"\n   }\n}\n```\n \n \n如果你希望函数返回一个含有name属性的对象，你会惊讶。由于隐含分号，函数返回undefined。前面的代码等价于：\n \n```javascript\n// 警告： 意外的返回值\nfunction func() {\n   return undefined;\n  // 下面代码不执行\n   {\n      name : \"Batman\"\n   }\n}\n```\n \n \n总之，总是使用花括号，并始终把在与之前的语句放在同一行：\n \n```javascript\nfunction func() {\n   return {\n      name : \"Batman\"\n   };\n}\n```\n \n \n> 关于分号注：就像使用花括号，你应该总是使用分号，即使他们可由JavaScript解析器隐式创建。这不仅促进更科学和更严格的代码，而且有助于解决存有疑惑的地方，就如前面的例子显示。\n \n \n## 空格\n \n \n空格的使用同样有助于改善代码的可读性和一致性。在写英文句子的时候，在逗号和句号后面会使用间隔。在JavaScript中，你可以按照同样的逻辑在列表模样表达式（相当于逗号）和结束语句（相对于完成了“想法”）后面添加间隔。\n \n \n适合使用空格的地方包括：\n \n \n*   for循环分号分开后的的部分：如`for (var i = 0; i < 10; i += 1) {...}`\n*   for循环中初始化的多变量(i和max)：`for (var i = 0, max = 10; i < max; i += 1) {...}`\n*   分隔数组项的逗号的后面：`var a = [1, 2, 3];`\n*   对象属性逗号的后面以及分隔属性名和属性值的冒号的后面：`var o = {a: 1, b: 2};`\n*   限定函数参数：`myFunc(a, b, c)`\n*   函数声明的花括号的前面：`function myFunc() {}`\n*   匿名函数表达式function的后面：`var myFunc = function () {};`\n \n \n使用空格分开所有的操作符和操作对象是另一个不错的使用，这意味着在`+, -, *, =, <, >, <=, >=, ===, !==, &&, ||, +=`等前后都需要空格。\n \n \n```javascript\n// 宽松一致的间距\n// 使代码更易读\n// 使得更加“透气”\nvar d = 0,\n    a = b + 1;\nif (a && b && c) {\n    d = a % c;\n    a += d;\n}\n \n// 反面例子\n// 缺失或间距不一\n// 使代码变得疑惑\nvar d = 0,\n    a = b + 1;\nif (a&&b&&c) {\n    d=a % c;\n    a+= d;\n}\n```\n \n \n最后需要注意的一个空格——花括号间距。最好使用空格：\n \n \n*   函数、if-else语句、循环、对象字面量的左花括号的前面({)\n*   else或while之间的右花括号(})\n \n \n空格使用的一点不足就是增加了文件的大小，但是压缩无此问题。\n \n \n> 有一个经常被忽略的代码可读性方面是垂直空格的使用。你可以使用空行来分隔代码单元，就像是文学作品中使用段落分隔一样。\n \n \n## 命名规范\n \n \n另一种方法让你的代码更具可预测性和可维护性是采用命名规范。这就意味着你需要用同一种形式给你的变量和函数命名。\n \n \n下面是建议的一些命名规范，你可以原样采用，也可以根据自己的喜好作调整。同样，遵循规范要比规范是什么更重要。\n \n \n### 以大写字母写构造函数\n \n \nJavaScript并没有类，但有new调用的构造函数：\n \n \n```javascript\nvar adam = new Person();\n```\n \n \n因为构造函数仍仅仅是函数，仅看函数名就可以帮助告诉你这应该是一个构造函数还是一个正常的函数。\n \n \n命名构造函数时首字母大写具有暗示作用，使用小写命名的函数和方法不应该使用new调用：\n \n \n```javascript\nfunction MyConstructor() {...}\nfunction myFunction() {...}\n```\n \n \n### 分隔单词\n \n \n当你的变量或是函数名有多个单词的时候，最好单词的分离遵循统一的规范，有一个常见的做法被称作“驼峰(Camel)命名法”，就是单词小写，每个单词的首字母大写。\n \n \n对于构造函数，可以使用大驼峰式命名法(upper camel case)，如`MyConstructor()`。对于函数和方法名称，你可以使用小驼峰式命名法(lower camel case)，像是`myFunction()`, `calculateArea()`和`getFirstName()`。\n \n \n要是变量不是函数呢？开发者通常使用小驼峰式命名法，但还有另外一种做法就是所有单词小写以下划线连接：例如，`first_name, favorite_bands,` 和 `old_company_name`，这种标记法帮你直观地区分函数和其他标识——原型和对象。\n \n \nECMAScript的属性和方法均使用Camel标记法，尽管多字的属性名称是罕见的（正则表达式对象的lastIndex和ignoreCase属性）。\n \n \n### 其它命名形式\n \n \n有时，开发人员使用命名规范来弥补或替代语言特性。\n \n \n例如，JavaScript中没有定义常量的方法（尽管有些内置的像Number, MAX_VALUE），所以开发者都采用全部单词大写的规范来命名这个程序生命周期中都不会改变的变量，如：\n```javascript\n// 珍贵常数，只可远观\nvar PI = 3.14,\n    MAX_WIDTH = 800;\n```\n \n还有另外一个完全大写的惯例：全局变量名字全部大写。全部大写命名全局变量可以加强减小全局变量数量的实践，同时让它们易于区分。\n \n \n另外一种使用规范来模拟功能的是私有成员。虽然可以在JavaScript中实现真正的私有，但是开发者发现仅仅使用一个下划线前缀来表示一个私有属性或方法会更容易些。考虑下面的例子：\n```javascript\nvar person = {\n    getName: function () {\n        return this._getFirst() + ' ' + this._getLast();\n    },\n \n    _getFirst: function () {\n        // ...\n    },\n    _getLast: function () {\n        // ...\n    }\n};\n```\n \n \n在此例中，`getName()`就表示公共方法，部分稳定的API。而`_getFirst()`和`_getLast()`则表明了私有。它们仍然是正常的公共方法，但是使用下划线前缀来警告person对象的使用者这些方法在下一个版本中时不能保证工作的，是不能直接使用的。注意，JSLint有些不鸟下划线前缀，除非你设置了noman选项为:false。\n \n \n下面是一些常见的`_private`规范：\n \n \n*   使用尾下划线表示私有，如`name_`和`getElements_()`\n*   使用一个下划线前缀表`_protected`（保护）属性，两个下划线前缀表示`__private` （私有）属性\n*   Firefox中一些内置的变量属性不属于该语言的技术部分，使用两个前下划线和两个后下划线表示，如：`__proto__`和`__parent__`。\n \n \n## 注释\n \n你必须注释你的代码，即使不会有其他人向你一样接触它。通常，当你深入研究一个问题，你会很清楚的知道这个代码是干嘛用的，但是，当你一周之后再回来看的时候，想必也要耗掉不少脑细胞去搞明白到底怎么工作的。\n \n \n很显然，注释不能走极端：每个单独变量或是单独一行。但是，你通常应该记录所有的函数，它们的参数和返回值，或是任何不寻常的技术和方法。要想到注 释可以给你代码未来的阅读者以诸多提示；阅读者需要的是（不要读太多的东西）仅注释和函数属性名来理解你的代码。例如，当你有五六行程序执行特定的任务， 如果你提供了一行代码目的以及为什么在这里的描述的话，阅读者就可以直接跳过这段细节。没有硬性规定注释代码比，代码的某些部分（如正则表达式）可能注释 要比代码多。\n \n \n> 最重要的习惯，然而也是最难遵守的，就是保持注释的及时更新，因为过时的注释比没有注释更加的误导人。\n \n \n# 关于作者\n \n \nStoyan Stefanov是Yahoo!web开发人员，多个O'Reilly书籍的作者、投稿者和技术评审。他经常在会议和他的博客[www.phpied.com](http://www.zhangxinxu.com/wordpress/2010/10/%e7%bf%bb%e8%af%91-%e9%ab%98%e8%b4%a8%e9%87%8fjavascript%e4%bb%a3%e7%a0%81%e4%b9%a6%e5%86%99%e5%9f%ba%e6%9c%ac%e8%a6%81%e7%82%b9/www.phpied.com)上发表web开发主题的演讲。Stoyan还是smush.it图片优化工具的创造者，YUI贡献者，雅虎性能优化工具YSlow 2.0的架构设计师。\n \n \n本文转自：[张鑫旭-翻译-高质量JavaScript代码书写基本要点](http://www.zhangxinxu.com/wordpress/?p=1173)\n \n \n英文原文：http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/\n \n# 关于本文\n本文转自[TOM大叔](http://www.cnblogs.com/TomXu)的[深入理解JavaScript系列](http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html)\n \n>【深入理解JavaScript系列】文章，包括了原创，翻译，转载，整理等各类型文章，原文是TOM大叔的一个非常不错的专题，现将其重新整理发布。谢谢大叔。","slug":"编写高质量JavaScript代码的基本要点","published":1,"date":"2016-12-04T14:40:49.000Z","updated":"2016-12-04T14:40:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwarqf930006qdcdpy44pyr7","content":"<p>#前言<br>才华横溢的<a href=\"http://www.phpied.com/\" target=\"_blank\" rel=\"external\">Stoyan Stefanov</a>，在他写的由<a href=\"http://oreilly.com/\" target=\"_blank\" rel=\"external\">O’Reilly</a>初版的新书<a href=\"http://amzn.to/93szK7\" target=\"_blank\" rel=\"external\">《JavaScript Patterns》</a>(JavaScript模式)中，我想要是为我们的读者贡献其摘要，那会是件很美妙的事情。具体一点就是编写高质量JavaScript的一些要素，例如避免全局变量，使用单变量声明，在循环中预缓存length(长度)，遵循代码阅读，以及更多。<br>此摘要也包括一些与代码不太相关的习惯，但对整体代码的创建息息相关，包括撰写API文档、执行同行评审以及运行JSLint。这些习惯和最佳做法可以帮助你写出更好的，更易于理解和维护的代码，这些代码在几个月或是几年之后再回过头看看也是会觉得很自豪的。</p>\n<a id=\"more\"></a>\n<h1 id=\"书写可维护的代码\"><a href=\"#书写可维护的代码\" class=\"headerlink\" title=\"书写可维护的代码\"></a>书写可维护的代码</h1><p>软件bug的修复是昂贵的，并且随着时间的推移，这些bug的成本也会增加，尤其当这些bug潜伏并慢慢出现在已经发布的软件中时。当你发现bug 的时候就立即修复它是最好的，此时你代码要解决的问题在你脑中还是很清晰的。否则，你转移到其他任务，忘了那个特定的代码，一段时间后再去查看这些代码就 需要：</p>\n<ul>\n<li>花时间学习和理解这个问题</li>\n<li>化时间是了解应该解决的问题代码</li>\n</ul>\n<p>还有问题，特别对于大的项目或是公司，修复bug的这位伙计不是写代码的那个人（且发现bug和修复bug的不是同一个人）。因此，必须降低理解代 码花费的时间，无论是一段时间前你自己写的代码还是团队中的其他成员写的代码。这关系到底线（营业收入）和开发人员的幸福，因为我们更应该去开发新的激动 人心的事物而不是花几小时几天的时间去维护遗留代码。<br>另一个相关软件开发生命的事实是，读代码花费的时间要比写来得多。有时候，当你专注并深入思考某个问题的时候，你可以坐下来，一个下午写大量的代码。<br>你的代码很能很快就工作了，但是，随着应用的成熟，还会有很多其他的事情发生，这就要求你的进行进行审查，修改，和调整。例如：</p>\n<ul>\n<li>bug是暴露的</li>\n<li>新功能被添加到应用程序</li>\n<li>程序在新的环境下工作（例如，市场上出现新想浏览器）</li>\n<li>代码改变用途</li>\n<li>代码得完全从头重新，或移植到另一个架构上或者甚至使用另一种语言</li>\n</ul>\n<p>由于这些变化，很少人力数小时写的代码最终演变成花数周来阅读这些代码。这就是为什么创建可维护的代码对应用程序的成功至关重要。<br>可维护的代码意味着：</p>\n<ul>\n<li>可读的</li>\n<li>一致的</li>\n<li>可预测的</li>\n<li>看上去就像是同一个人写的</li>\n<li>已记录</li>\n</ul>\n<h1 id=\"最小全局变量\"><a href=\"#最小全局变量\" class=\"headerlink\" title=\"最小全局变量\"></a>最小全局变量</h1><p>JavaScript通过函数管理作用域。在函数内部声明的变量只在这个函数内部，函数外面不可用。另一方面，全局变量就是在任何函数外面声明的或是未声明直接简单使用的。<br>每个JavaScript环境有一个全局对象，当你在任意的函数外面使用this的时候可以访问到。你创建的每一个全部变量都成了这个全局对象的属 性。在浏览器中，方便起见，该全局对象有个附加属性叫做window，此window(通常)指向该全局对象本身。下面的代码片段显示了如何在浏览器环境 中创建和访问的全局变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">myglobal = <span class=\"string\">\"hello\"</span>; <span class=\"comment\">// 不推荐写法</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(myglobal); <span class=\"comment\">// \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.myglobal); <span class=\"comment\">// \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>[<span class=\"string\">\"myglobal\"</span>]); <span class=\"comment\">// \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myglobal); <span class=\"comment\">// \"hello\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"全局变量的问题\"><a href=\"#全局变量的问题\" class=\"headerlink\" title=\"全局变量的问题\"></a>全局变量的问题</h2><p>全局变量的问题在于，你的JavaScript应用程序和web页面上的所有代码都共享了这些全局变量，他们住在同一个全局命名空间，所以当程序的两个不同部分定义同名但不同作用的全局变量的时候，命名冲突在所难免。<br>web页面包含不是该页面开发者所写的代码也是比较常见的，例如：</p>\n<ul>\n<li>第三方的JavaScript库</li>\n<li>广告方的脚本代码</li>\n<li>第三方用户跟踪和分析脚本代码</li>\n<li>不同类型的小组件，标志和按钮</li>\n</ul>\n<p>比方说，该第三方脚本定义了一个全局变量，叫做result；接着，在你的函数中也定义一个名为result的全局变量。其结果就是后面的变量覆盖前面的，第三方脚本就一下子嗝屁啦！<br>因此，要想和其他脚本成为好邻居的话，尽可能少的使用全局变量是很重要的。在书中后面提到的一些减少全局变量的策略，例如命名空间模式或是函数立即自动执行，但是要想让全局变量少最重要的还是始终使用var来声明变量。<br>由于JavaScript的两个特征，不自觉地创建出全局变量是出乎意料的容易。首先，你可以甚至不需要声明就可以使用变量；第二，JavaScript有隐含的全局概念，意味着你不声明的任何变量都会成为一个全局对象属性。参考下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 不推荐写法: 隐式全局变量</span></div><div class=\"line\">   result = x + y;</div><div class=\"line\">   <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此段代码中的<code>result</code>没有声明。代码照样运作正常，但在调用函数后你最后的结果就多一个全局命名空间，这可以是一个问题的根源。<br>经验法则是始终使用var声明变量，正如改进版的sum()函数所演示的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> result = x + y;</div><div class=\"line\">   <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另一个创建隐式全局变量的反例就是使用任务链进行部分var声明。下面的片段中，<code>a</code>是本地变量,但是<code>b</code>却是全局变量，这可能不是你希望发生的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反例，勿使用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> a = b = <span class=\"number\">0</span>;</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此现象发生的原因在于这个从右到左的赋值，首先，是赋值表达式<code>b = 0</code>，此情况下b是未声明的。这个表达式的返回值是0，然后这个0就分配给了通过var定义的这个局部变量a。换句话说，就好比你输入了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = (b = <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<p>如果你已经准备好声明变量，使用链分配是比较好的做法，不会产生任何意料之外的全局变量，如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> a, b;</div><div class=\"line\">   <span class=\"comment\">// ... a = b = 0; // 两个均局部变量</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>然而，另外一个避免全局变量的原因是可移植性。如果你想你的代码在不同的环境下（主机下）运行，使用全局变量如履薄冰，因为你会无意中覆盖你最初环境下不存在的主机对象（所以你原以为名称可以放心大胆地使用，实际上对于有些情况并不适用）。</p>\n</blockquote>\n<h2 id=\"忘记var的副作用\"><a href=\"#忘记var的副作用\" class=\"headerlink\" title=\"忘记var的副作用\"></a>忘记var的副作用</h2><p>隐式全局变量和明确定义的全局变量间有些小的差异，就是通过<code>delete</code>操作符让变量未定义的能力。</p>\n<ul>\n<li>通过var创建的全局变量（任何函数之外的程序中创建）是不能被删除的。</li>\n<li>无var创建的隐式全局变量（无视是否在函数中创建）是能被删除的。</li>\n</ul>\n<p>这表明，在技术上，隐式全局变量并不是真正的全局变量，但它们是全局对象的属性。属性是可以通过<code>delete</code>操作符删除的，而变量是不能的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义三个全局变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> global_var = <span class=\"number\">1</span>;</div><div class=\"line\">global_novar = <span class=\"number\">2</span>; <span class=\"comment\">// 反面教材</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   global_fromfunc = <span class=\"number\">3</span>; <span class=\"comment\">// 反面教材</span></div><div class=\"line\">&#125;());</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 试图删除</span></div><div class=\"line\"><span class=\"keyword\">delete</span> global_var; <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"keyword\">delete</span> global_novar; <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"keyword\">delete</span> global_fromfunc; <span class=\"comment\">// true</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 测试该删除</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> global_var; <span class=\"comment\">// \"number\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> global_novar; <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> global_fromfunc; <span class=\"comment\">// \"undefined\"</span></div></pre></td></tr></table></figure>\n<p>在ES5严格模式下，未声明的变量（如在前面的代码片段中的两个反面教材）工作时会抛出一个错误。</p>\n<h2 id=\"访问全局对象\"><a href=\"#访问全局对象\" class=\"headerlink\" title=\"访问全局对象\"></a>访问全局对象</h2><p>在浏览器中，全局对象可以通过<code>window</code>属性在代码的任何位置访问（除非你做了些比较出格的事情，像是声明了一个名为window的局部变量）。但是在其他环境下，这个方便的属性可能被叫做其他什么东西（甚至在程序中不可用）。如果你需要在没有硬编码的<code>window</code>标识符下访问全局对象，你可以在任何层级的函数作用域中做如下操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>这种方法可以随时获得全局对象，因为其在函数中被当做函数调用了（不是通过<code>new</code>构造），<code>this</code>总 是指向全局对象。实际上这个病不适用于ECMAScript 5严格模式，所以，在严格模式下时，你必须采取不同的形式。例如，你正在开发一个JavaScript库，你可以将你的代码包裹在一个即时函数中，然后从 全局作用域中，传递一个引用指向this作为你即时函数的参数。</p>\n<h2 id=\"单var形式\"><a href=\"#单var形式\" class=\"headerlink\" title=\"单var形式\"></a>单var形式</h2><p>在函数顶部使用单var语句是比较有用的一种形式，其好处在于：</p>\n<ul>\n<li>提供了一个单一的地方去寻找功能所需要的所有局部变量</li>\n<li>防止变量在定义之前使用的逻辑错误</li>\n<li>帮助你记住声明的全局变量，因此较少了全局变量==//zxx:此处我自己是有点晕乎的…==</li>\n<li>少代码（类型啊传值啊单线完成）</li>\n</ul>\n<p>单var形式长得就像下面这个样子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</div><div class=\"line\">       b = <span class=\"number\">2</span>,</div><div class=\"line\">       sum = a + b,</div><div class=\"line\">       myobject = &#123;&#125;,</div><div class=\"line\">       i,</div><div class=\"line\">       j;</div><div class=\"line\">   <span class=\"comment\">// function body...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>您可以使用一个var语句声明多个变量，并以逗号分隔。像这种初始化变量同时初始化值的做法是很好的。这样子可以防止逻辑错误（所有未初始化但声明的变量的初始值是<code>undefined</code>）和增加代码的可读性。在你看到代码后，你可以根据初始化的值知道这些变量大致的用途，例如是要当作对象呢还是当作整数来使。</p>\n<p>你也可以在声明的时候做一些实际的工作，例如前面代码中的<code>sum = a + b</code>这个情况，另外一个例子就是当你使用DOM（文档对象模型）引用时，你可以使用单一的var把DOM引用一起指定为局部变量，就如下面代码所示的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateElement</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"result\"</span>),</div><div class=\"line\">       style = el.style;</div><div class=\"line\">   <span class=\"comment\">// 使用el和style干点其他什么事...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"预解析：var散布的问题\"><a href=\"#预解析：var散布的问题\" class=\"headerlink\" title=\"预解析：var散布的问题\"></a>预解析：var散布的问题</h2><p>JavaScript中，你可以在函数的任何位置声明多个var语句，并且它们就好像是在函数顶部声明一样发挥作用，这种行为称为 hoisting（悬置/置顶解析/预解析）。当你使用了一个变量，然后不久在函数中又重新声明的话，就可能产生逻辑错误。对于JavaScript，只 要你的变量是在同一个作用域中（同一函数），它都被当做是声明的，即使是它在var声明前使用的时候。看下面这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反例</span></div><div class=\"line\">myname = <span class=\"string\">\"global\"</span>; <span class=\"comment\">// 全局变量</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(myname); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> myname = <span class=\"string\">\"local\"</span>;</div><div class=\"line\">    alert(myname); <span class=\"comment\">// \"local\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">func();</div></pre></td></tr></table></figure>\n<p>在这个例子中，你可能会以为第一个alert弹出的是”global”，第二个弹出”loacl”。这种期许是可以理解的，因为在第一个alert 的时候，myname未声明，此时函数肯定很自然而然地看全局变量myname，但是，实际上并不是这么工作的。第一个alert会弹 出”undefined”是因为myname被当做了函数的局部变量（尽管是之后声明的），所有的变量声明当被悬置到函数的顶部了。因此，为了避免这种混 乱，最好是预先声明你想使用的全部变量。</p>\n<p>上面的代码片段执行的行为可能就像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myname = <span class=\"string\">\"global\"</span>; <span class=\"comment\">// global variable</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> myname; <span class=\"comment\">// 等同于 -&gt; var myname = undefined;</span></div><div class=\"line\">   alert(myname); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\">   myname = <span class=\"string\">\"local\"</span>;</div><div class=\"line\">   alert(myname); <span class=\"comment\">// \"local\"&#125;</span></div><div class=\"line\">func();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>为了完整，我们再提一提执行层面的稍微复杂点的东西。代码处理分两个阶段，第一阶段是变量，函数声明，以及正常格式的参数创建，这是一个解析和进入上下文 的阶段。第二个阶段是代码执行，函数表达式和不合格的标识符（为声明的变量）被创建。但是，出于实用的目的，我们就采用了”hoisting”这个概念， 这种ECMAScript标准中并未定义，通常用来描述行为。</p>\n</blockquote>\n<h1 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h1><p>在<code>for</code>循环中，你可以循环取得数组或是数组类似对象的值，譬如<code>arguments</code>和<code>HTMLCollection</code>对象。通常的循环形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 次佳的循环</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; myarray.length; i++) &#123;</div><div class=\"line\">   <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种形式的循环的不足在于每次循环的时候数组的长度都要去获取下。这回降低你的代码，尤其当<code>myarray</code>不是数组，而是一个<code>HTMLCollection</code>对象的时候。</p>\n<p><code>HTMLCollections</code>指的是DOM方法返回的对象，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByName()</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName()</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName()</div></pre></td></tr></table></figure>\n<p>还有其他一些<code>HTMLCollections</code>，这些是在DOM标准之前引进并且现在还在使用的。有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.images: 页面上所有的图片元素</div><div class=\"line\"><span class=\"built_in\">document</span>.links : 所有a标签元素</div><div class=\"line\"><span class=\"built_in\">document</span>.forms : 所有表单</div><div class=\"line\"><span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>].elements : 页面上第一个表单中的所有域</div></pre></td></tr></table></figure>\n<p>集合的麻烦在于它们实时查询基本文档（HTML页面）。这意味着每次你访问任何集合的长度，你要实时查询DOM，而DOM操作一般都是比较昂贵的。</p>\n<p>这就是为什么当你循环获取值时，缓存数组(或集合)的长度是比较好的形式，正如下面代码显示的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, max = myarray.length; i &lt; max; i++) &#123;</div><div class=\"line\">   <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样，在这个循环过程中，你只检索了一次长度值。</p>\n<p>在所有浏览器下，循环获取内容时缓存<code>HTMLCollections</code>的长度是更快的，2倍(Safari3)到190倍(IE7)之间。==//zxx:此数据貌似很老，仅供参考==</p>\n<p>注意到，当你明确想要修改循环中的集合的时候（例如，添加更多的DOM元素），你可能更喜欢长度更新而不是常量。</p>\n<p>伴随着单var形式，你可以把变量从循环中提出来，就像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">looper</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">        max,</div><div class=\"line\">        myarray = [];</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">   <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, max = myarray.length; i &lt; max; i++) &#123;</div><div class=\"line\">      <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种形式具有一致性的好处，因为你坚持了单一var形式。不足在于当重构代码的时候，复制和粘贴整个循环有点困难。例如，你从一个函数复制了一个循环到另一个函数，你不得不去确定你能够把<code>i</code>和<code>max</code>引入新的函数（如果在这里没有用的话，很有可能你要从原函数中把它们删掉）。</p>\n<p>最后一个需要对循环进行调整的是使用下面表达式之一来替换<code>i++</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = i + <span class=\"number\">1</span></div><div class=\"line\">i += <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>JSLint提示您这样做，原因是<code>++</code>和<code>–-</code>促进了“过分棘手(excessive trickiness)”。==//zxx:这里比较难翻译，我想本意应该是让代码变得更加的棘手==<br>如果你直接无视它，JSLint的<code>plusplus</code>选项会是<code>false</code>（默认是default）。</p>\n<p>还有两种变化的形式，其又有了些微改进，因为：</p>\n<ul>\n<li>少了一个变量(无max)</li>\n<li>向下数到0，通常更快，因为和0做比较要比和数组长度或是其他不是0的东西作比较更有效率</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一种变化的形式：</span></div><div class=\"line\"><span class=\"keyword\">var</span> i, myarray = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (i = myarray.length; i–-;) &#123;</div><div class=\"line\">   <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//第二种使用while循环：</span></div><div class=\"line\"><span class=\"keyword\">var</span> myarray = [],</div><div class=\"line\">    i = myarray.length;</div><div class=\"line\"><span class=\"keyword\">while</span> (i–-) &#123;</div><div class=\"line\">   <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这些小的改进只体现在性能上，此外JSLint会对使用i–-加以抱怨。</p>\n<h1 id=\"for-in循环\"><a href=\"#for-in循环\" class=\"headerlink\" title=\"for-in循环\"></a>for-in循环</h1><p><code>for-in</code>循环应该用在非数组对象的遍历上，使用<code>for-in</code>进行循环也被称为“枚举”。</p>\n<p>从技术上将，你可以使用<code>for-in</code>循环数组（因为JavaScript中数组也是对象），但这是不推荐的。因为如果数组对象已被自定义的功能增强，就可能发生逻辑错误。另外，在for-in中，属性列表的顺序（序列）是不能保证的。所以最好数组使用正常的for循环，对象使用for-in循环。</p>\n<p>有个很重要的<code>hasOwnProperty()</code>方法，当遍历对象属性的时候可以过滤掉从原型链上下来的属性。</p>\n<p>思考下面一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = &#123;</div><div class=\"line\">   <span class=\"attr\">hands</span>: <span class=\"number\">2</span>,</div><div class=\"line\">   <span class=\"attr\">legs</span>: <span class=\"number\">2</span>,</div><div class=\"line\">   <span class=\"attr\">heads</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 在代码的某个地方</span></div><div class=\"line\"><span class=\"comment\">// 一个方法添加给了所有对象</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.prototype.clone === <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">   <span class=\"built_in\">Object</span>.prototype.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个例子中，我们有一个使用对象字面量定义的名叫man的对象。在man定义完成后的某个地方，在对象原型上增加了一个很有用的名叫 clone()的方法。此原型链是实时的，这就意味着所有的对象自动可以访问新的方法。为了避免枚举man的时候出现clone()方法，你需要应用<code>hasOwnProperty()</code>方法过滤原型属性。如果不做过滤，会导致clone()函数显示出来，在大多数情况下这是不希望出现的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1.</span></div><div class=\"line\"><span class=\"comment\">// for-in 循环</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> man) &#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (man.hasOwnProperty(i)) &#123; <span class=\"comment\">// 过滤</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* 控制台显示结果</span></div><div class=\"line\">hands : 2</div><div class=\"line\">legs : 2</div><div class=\"line\">heads : 1</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"comment\">// 2.</span></div><div class=\"line\"><span class=\"comment\">// 反面例子:</span></div><div class=\"line\"><span class=\"comment\">// for-in loop without checking hasOwnProperty()</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> man) &#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">控制台显示结果</div><div class=\"line\">hands : 2</div><div class=\"line\">legs : 2</div><div class=\"line\">heads : 1</div><div class=\"line\">clone: function()</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<p>另外一种使用hasOwnProperty()的形式是取消Object.prototype上的方法。像是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> man) &#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(man, i)) &#123; <span class=\"comment\">// 过滤</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其好处在于在man对象重新定义hasOwnProperty情况下避免命名冲突。也避免了长属性查找对象的所有方法，你可以使用局部变量“缓存”它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i, hasOwn = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty;</div><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> man) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (hasOwn.call(man, i)) &#123; <span class=\"comment\">// 过滤</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>严格来说，不使用<code>hasOwnProperty()</code>并不是一个错误。根据任务以及你对代码的自信程度，你可以跳过它以提高些许的循环速度。但是当你对当前对象内容（和其原型链）不确定的时候，添加<code>hasOwnProperty()</code>更加保险些。</p>\n</blockquote>\n<p>格式化的变化（通不过JSLint）会直接忽略掉花括号，把if语句放到同一行上。其优点在于循环语句读起来就像一个完整的想法（每个元素都有一个自己的属性”X”，使用”X”干点什么）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 警告： 通不过JSLint检测</span></div><div class=\"line\"><span class=\"keyword\">var</span> i, hasOwn = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty;</div><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> man) <span class=\"keyword\">if</span> (hasOwn.call(man, i)) &#123; <span class=\"comment\">// 过滤</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"（不）扩展内置原型\"><a href=\"#（不）扩展内置原型\" class=\"headerlink\" title=\"（不）扩展内置原型\"></a>（不）扩展内置原型</h1><p>扩增构造函数的prototype属性是个很强大的增加功能的方法，但有时候它太强大了。</p>\n<p>增加内置的构造函数原型（如Object(), Array(), 或Function()）挺诱人的，但是这严重降低了可维护性，因为它让你的代码变得难以预测。使用你代码的其他开发人员很可能更期望使用内置的 JavaScript方法来持续不断地工作，而不是你另加的方法。</p>\n<p>另外，属性添加到原型中，可能会导致不使用hasOwnProperty属性时在循环中显示出来，这会造成混乱。</p>\n<p>因此，不增加内置原型是最好的。你可以指定一个规则，仅当下面的条件均满足时例外：</p>\n<ul>\n<li>可以预期将来的ECMAScript版本或是JavaScript实现将一直将此功能当作内置方法来实现。例如，你可以添加ECMAScript 5中描述的方法，一直到各个浏览器都迎头赶上。这种情况下，你只是提前定义了有用的方法。</li>\n<li>如果您检查您的自定义属性或方法已不存在——也许已经在代码的其他地方实现或已经是你支持的浏览器JavaScript引擎部分。</li>\n<li>你清楚地文档记录并和团队交流了变化。</li>\n</ul>\n<p>如果这三个条件得到满足，你可以给原型进行自定义的添加，形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.protoype.myMethod !== <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">   <span class=\"built_in\">Object</span>.protoype.myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 实现...</span></div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"switch模式\"><a href=\"#switch模式\" class=\"headerlink\" title=\"switch模式\"></a>switch模式</h1><p>你可以通过类似下面形式的switch语句增强可读性和健壮性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> inspect_me = <span class=\"number\">0</span>,</div><div class=\"line\">    result = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"keyword\">switch</span> (inspect_me) &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">   result = <span class=\"string\">\"zero\"</span>;</div><div class=\"line\">   <span class=\"keyword\">break</span>;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">   result = <span class=\"string\">\"one\"</span>;</div><div class=\"line\">   <span class=\"keyword\">break</span>;</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">   result = <span class=\"string\">\"unknown\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个简单的例子中所遵循的风格约定如下：</p>\n<ul>\n<li>每个case和switch对齐（花括号缩进规则除外）</li>\n<li>每个case中代码缩进</li>\n<li>每个case以break清除结束</li>\n<li>避免贯穿（故意忽略break）。如果你非常确信贯穿是最好的方法，务必记录此情况，因为对于有些阅读人而言，它们可能看起来是错误的。</li>\n<li>以default结束switch：确保总有健全的结果，即使无情况匹配。</li>\n</ul>\n<h1 id=\"避免隐式类型转换\"><a href=\"#避免隐式类型转换\" class=\"headerlink\" title=\"避免隐式类型转换\"></a>避免隐式类型转换</h1><p>JavaScript的变量在比较的时候会隐式类型转换。这就是为什么一些诸如：false == 0 或 “” == 0 返回的结果是true。为避免引起混乱的隐含类型转换，在你比较值和表达式类型的时候始终使用===和!==操作符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> zero = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (zero === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// 不执行，因为zero为0, 而不是false</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 反面示例</span></div><div class=\"line\"><span class=\"keyword\">if</span> (zero == <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// 执行了...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>还有另外一种思想观点认为==就足够了===是多余的。例如，当你使用typeof你就知道它会返回一个字符串，所以没有使用严格相等的理由。然而，JSLint要求严格相等，它使代码看上去更有一致性，可以降低代码阅读时的精力消耗。（“==是故意的还是一个疏漏？”）</p>\n<h1 id=\"避免eval\"><a href=\"#避免eval\" class=\"headerlink\" title=\"避免eval()\"></a>避免eval()</h1><p>如果你现在的代码中使用了eval()，记住该咒语“eval()是魔鬼”。此方法接受任意的字符串，并当作JavaScript代码来处理。当有 问题的代码是事先知道的（不是运行时确定的），没有理由使用eval()。如果代码是在运行时动态生成，有一个更好的方式不使用eval而达到同样的目 标。例如，用方括号表示法来访问动态属性会更好更简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反面示例</span></div><div class=\"line\"><span class=\"keyword\">var</span> property = <span class=\"string\">\"name\"</span>;</div><div class=\"line\">alert(<span class=\"built_in\">eval</span>(<span class=\"string\">\"obj.\"</span> + property));</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 更好的</span></div><div class=\"line\"><span class=\"keyword\">var</span> property = <span class=\"string\">\"name\"</span>;</div><div class=\"line\">alert(obj[property]);</div></pre></td></tr></table></figure>\n<p>使用eval()也带来了安全隐患，因为被执行的代码（例如从网络来）可能已被篡改。这是个很常见的反面教材，当处理Ajax请求得到的JSON 相应的时候。在这些情况下，最好使用JavaScript内置方法来解析JSON相应，以确保安全和有效。若浏览器不支持JSON.parse()，你可 以使用来自JSON.org的库。</p>\n<p>同样重要的是要记住，给setInterval(), setTimeout()和Function()构造函数传递字符串，大部分情况下，与使用eval()是类似的，因此要避免。在幕后，JavaScript仍需要评估和执行你给程序传递的字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反面示例</span></div><div class=\"line\">setTimeout(<span class=\"string\">\"myFunc()\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">setTimeout(<span class=\"string\">\"myFunc(1, 2, 3)\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 更好的</span></div><div class=\"line\">setTimeout(myFunc, <span class=\"number\">1000</span>);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   myFunc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>使用新的Function()构造就类似于eval()，应小心接近。这可能是一个强大的构造，但往往被误用。如果你绝对必须使用eval()，你 可以考虑使用new Function()代替。有一个小的潜在好处，因为在新Function()中作代码评估是在局部函数作用域中运行，所以代码中任何被评估的通过var 定义的变量都不会自动变成全局变量。另一种方法来阻止自动全局变量是封装eval()调用到一个即时函数中。</p>\n<p>考虑下面这个例子，这里仅<code>un</code>作为全局变量污染了命名空间。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> un);    <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> deux); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> trois); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> jsstring = <span class=\"string\">\"var un = 1; console.log(un);\"</span>;</div><div class=\"line\"><span class=\"built_in\">eval</span>(jsstring); <span class=\"comment\">// logs \"1\"</span></div><div class=\"line\"> </div><div class=\"line\">jsstring = <span class=\"string\">\"var deux = 2; console.log(deux);\"</span>;</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(jsstring)(); <span class=\"comment\">// logs \"2\"</span></div><div class=\"line\"> </div><div class=\"line\">jsstring = <span class=\"string\">\"var trois = 3; console.log(trois);\"</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">eval</span>(jsstring);</div><div class=\"line\">&#125;()); <span class=\"comment\">// logs \"3\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> un); <span class=\"comment\">// number</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> deux); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> trois); <span class=\"comment\">// \"undefined\"</span></div></pre></td></tr></table></figure>\n<p>另一间eval()和Function构造不同的是eval()可以干扰作用域链，而Function()更安分守己些。不管你在哪里执行 Function()，它只看到全局作用域。所以其能很好的避免本地变量污染。在下面这个例子中，eval()可以访问和修改它外部作用域中的变量，这是 Function做不来的（注意到使用Function和new Function是相同的）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> local = <span class=\"number\">1</span>;</div><div class=\"line\">   <span class=\"built_in\">eval</span>(<span class=\"string\">\"local = 3; console.log(local)\"</span>); <span class=\"comment\">// logs \"3\"</span></div><div class=\"line\">   <span class=\"built_in\">console</span>.log(local); <span class=\"comment\">// logs \"3\"</span></div><div class=\"line\">&#125;());</div><div class=\"line\"> </div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> local = <span class=\"number\">1</span>;</div><div class=\"line\">   <span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log(typeof local);\"</span>)(); <span class=\"comment\">// logs undefined</span></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<h1 id=\"parseInt-下的数值转换\"><a href=\"#parseInt-下的数值转换\" class=\"headerlink\" title=\"parseInt()下的数值转换\"></a>parseInt()下的数值转换</h1><p>使用parseInt()你可以从字符串中获取数值，该方法接受另一个基数参数，这经常省略，但不应该。当字符串以”0″开头的时候就有可能会出问 题，例如，部分时间进入表单域，在ECMAScript 3中，开头为”0″的字符串被当做8进制处理了，但这已在ECMAScript 5中改变了。为了避免矛盾和意外的结果，总是指定基数参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> month = <span class=\"string\">\"06\"</span>,</div><div class=\"line\">    year = <span class=\"string\">\"09\"</span>;</div><div class=\"line\">month = <span class=\"built_in\">parseInt</span>(month, <span class=\"number\">10</span>);</div><div class=\"line\">year = <span class=\"built_in\">parseInt</span>(year, <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<p>此例中，如果你忽略了基数参数，如parseInt(year)，返回的值将是0，因为“09”被当做8进制（好比执行 parseInt( year, 8 )），而09在8进制中不是个有效数字。</p>\n<p>替换方法是将字符串转换成数字，包括：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">+<span class=\"string\">\"08\"</span> <span class=\"comment\">// 结果是 8</span></div><div class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">\"08\"</span>) <span class=\"comment\">// 8</span></div></pre></td></tr></table></figure>\n<p>这些通常快于parseInt()，因为parseInt()方法，顾名思意，不是简单地解析与转换。但是，如果你想输入例如“08 hello”，parseInt()将返回数字，而其它以NaN告终。</p>\n<h1 id=\"编码规范\"><a href=\"#编码规范\" class=\"headerlink\" title=\"编码规范\"></a>编码规范</h1><p>建立和遵循编码规范是很重要的，这让你的代码保持一致性，可预测，更易于阅读和理解。一个新的开发者加入这个团队可以通读规范，理解其它团队成员书写的代码，更快上手干活。</p>\n<p>许多激烈的争论发生会议上或是邮件列表上，问题往往针对某些代码规范的特定方面（例如代码缩进，是Tab制表符键还是space空格键）。如果你是 你组织中建议采用规范的，准备好面对各种反对的或是听起来不同但很强烈的观点。要记住，建立和坚定不移地遵循规范要比纠结于规范的细节重要的多。</p>\n<h2 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h2><p>  代码没有缩进基本上就不能读了。唯一糟糕的事情就是不一致的缩进，因为它看上去像是遵循了规范，但是可能一路上伴随着混乱和惊奇。重要的是规范地使用缩进。</p>\n<p>  一些开发人员更喜欢用tab制表符缩进，因为任何人都可以调整他们的编辑器以自己喜欢的空格数来显示Tab。有些人喜欢空格——通常四个，这都无所谓，只要团队每个人都遵循同一个规范就好了。这本书，例如，使用四个空格缩进，这也是JSLint中默认的缩进。</p>\n<p>  什么应该缩进呢？规则很简单——花括号里面的东西。这就意味着函数体，循环 (do, while, for, for-in)，if，switch，以及对象字面量中的对象属性。下面的代码就是使用缩进的示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">1</span>,</div><div class=\"line\">        d = <span class=\"number\">2</span>,</div><div class=\"line\">        inner;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) &#123;</div><div class=\"line\">        inner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                <span class=\"attr\">r</span>: c - d</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        inner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                <span class=\"attr\">r</span>: c + d</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inner;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"花括号\"><a href=\"#花括号\" class=\"headerlink\" title=\"花括号{}\"></a>花括号{}</h2><p>花括号（亦称大括号，下同）应总被使用，即使在它们为可选的时候。技术上将，在in或是for中如果语句仅一条，花括号是不需要的，但是你还是应该总是使用它们，这会让代码更有持续性和易于更新。</p>\n<p>想象下你有一个只有一条语句的for循环，你可以忽略花括号，而没有解析的错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 糟糕的实例</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i += <span class=\"number\">1</span>)</div><div class=\"line\">   alert(i);</div></pre></td></tr></table></figure>\n<p>但是，如果，后来，主体循环部分又增加了行代码？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 糟糕的实例</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i += <span class=\"number\">1</span>)</div><div class=\"line\">   alert(i);</div><div class=\"line\">   alert(i + <span class=\"string\">\" is \"</span> + (i % <span class=\"number\">2</span> ? <span class=\"string\">\"odd\"</span> : <span class=\"string\">\"even\"</span>));</div></pre></td></tr></table></figure>\n<p>第二个alert已经在循环之外，缩进可能欺骗了你。为了长远打算，最好总是使用花括号，即时值一行代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 好的实例</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">   alert(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>if条件类似：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 坏</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>)</div><div class=\"line\">   alert(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">   alert(<span class=\"number\">2</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 好</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">   alert(<span class=\"number\">1</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">   alert(<span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"左花括号的位置\"><a href=\"#左花括号的位置\" class=\"headerlink\" title=\"左花括号的位置\"></a>左花括号的位置</h2><p>开发人员对于左大括号的位置有着不同的偏好——在同一行或是下一行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">   alert(<span class=\"string\">\"It's TRUE!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//或</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">   alert(<span class=\"string\">\"It's TRUE!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个实例中，仁者见仁智者见智，但也有个案，括号位置不同会有不同的行为表现。这是因为分号插入机制(semicolon insertion mechanism)——JavaScript是不挑剔的，当你选择不使用分号结束一行代码时JavaScript会自己帮你补上。这种行为可能会导致麻 烦，如当你返回对象字面量，而左括号却在下一行的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 警告： 意外的返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span></div><div class=\"line\">  <span class=\"comment\">// 下面代码不执行</span></div><div class=\"line\">   &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : <span class=\"string\">\"Batman\"</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你希望函数返回一个含有name属性的对象，你会惊讶。由于隐含分号，函数返回undefined。前面的代码等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 警告： 意外的返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">  <span class=\"comment\">// 下面代码不执行</span></div><div class=\"line\">   &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : <span class=\"string\">\"Batman\"</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总之，总是使用花括号，并始终把在与之前的语句放在同一行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : <span class=\"string\">\"Batman\"</span></div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>关于分号注：就像使用花括号，你应该总是使用分号，即使他们可由JavaScript解析器隐式创建。这不仅促进更科学和更严格的代码，而且有助于解决存有疑惑的地方，就如前面的例子显示。</p>\n</blockquote>\n<h2 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h2><p>空格的使用同样有助于改善代码的可读性和一致性。在写英文句子的时候，在逗号和句号后面会使用间隔。在JavaScript中，你可以按照同样的逻辑在列表模样表达式（相当于逗号）和结束语句（相对于完成了“想法”）后面添加间隔。</p>\n<p>适合使用空格的地方包括：</p>\n<ul>\n<li>for循环分号分开后的的部分：如<code>for (var i = 0; i &lt; 10; i += 1) {...}</code></li>\n<li>for循环中初始化的多变量(i和max)：<code>for (var i = 0, max = 10; i &lt; max; i += 1) {...}</code></li>\n<li>分隔数组项的逗号的后面：<code>var a = [1, 2, 3];</code></li>\n<li>对象属性逗号的后面以及分隔属性名和属性值的冒号的后面：<code>var o = {a: 1, b: 2};</code></li>\n<li>限定函数参数：<code>myFunc(a, b, c)</code></li>\n<li>函数声明的花括号的前面：<code>function myFunc() {}</code></li>\n<li>匿名函数表达式function的后面：<code>var myFunc = function () {};</code></li>\n</ul>\n<p>使用空格分开所有的操作符和操作对象是另一个不错的使用，这意味着在<code>+, -, *, =, &lt;, &gt;, &lt;=, &gt;=, ===, !==, &amp;&amp;, ||, +=</code>等前后都需要空格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 宽松一致的间距</span></div><div class=\"line\"><span class=\"comment\">// 使代码更易读</span></div><div class=\"line\"><span class=\"comment\">// 使得更加“透气”</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"number\">0</span>,</div><div class=\"line\">    a = b + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (a &amp;&amp; b &amp;&amp; c) &#123;</div><div class=\"line\">    d = a % c;</div><div class=\"line\">    a += d;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 反面例子</span></div><div class=\"line\"><span class=\"comment\">// 缺失或间距不一</span></div><div class=\"line\"><span class=\"comment\">// 使代码变得疑惑</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"number\">0</span>,</div><div class=\"line\">    a = b + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (a&amp;&amp;b&amp;&amp;c) &#123;</div><div class=\"line\">    d=a % c;</div><div class=\"line\">    a+= d;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后需要注意的一个空格——花括号间距。最好使用空格：</p>\n<ul>\n<li>函数、if-else语句、循环、对象字面量的左花括号的前面({)</li>\n<li>else或while之间的右花括号(})</li>\n</ul>\n<p>空格使用的一点不足就是增加了文件的大小，但是压缩无此问题。</p>\n<blockquote>\n<p>有一个经常被忽略的代码可读性方面是垂直空格的使用。你可以使用空行来分隔代码单元，就像是文学作品中使用段落分隔一样。</p>\n</blockquote>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>另一种方法让你的代码更具可预测性和可维护性是采用命名规范。这就意味着你需要用同一种形式给你的变量和函数命名。</p>\n<p>下面是建议的一些命名规范，你可以原样采用，也可以根据自己的喜好作调整。同样，遵循规范要比规范是什么更重要。</p>\n<h3 id=\"以大写字母写构造函数\"><a href=\"#以大写字母写构造函数\" class=\"headerlink\" title=\"以大写字母写构造函数\"></a>以大写字母写构造函数</h3><p>JavaScript并没有类，但有new调用的构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> adam = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<p>因为构造函数仍仅仅是函数，仅看函数名就可以帮助告诉你这应该是一个构造函数还是一个正常的函数。</p>\n<p>命名构造函数时首字母大写具有暗示作用，使用小写命名的函数和方法不应该使用new调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyConstructor</span>(<span class=\"params\"></span>) </span>&#123;...&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;...&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"分隔单词\"><a href=\"#分隔单词\" class=\"headerlink\" title=\"分隔单词\"></a>分隔单词</h3><p>当你的变量或是函数名有多个单词的时候，最好单词的分离遵循统一的规范，有一个常见的做法被称作“驼峰(Camel)命名法”，就是单词小写，每个单词的首字母大写。</p>\n<p>对于构造函数，可以使用大驼峰式命名法(upper camel case)，如<code>MyConstructor()</code>。对于函数和方法名称，你可以使用小驼峰式命名法(lower camel case)，像是<code>myFunction()</code>, <code>calculateArea()</code>和<code>getFirstName()</code>。</p>\n<p>要是变量不是函数呢？开发者通常使用小驼峰式命名法，但还有另外一种做法就是所有单词小写以下划线连接：例如，<code>first_name, favorite_bands,</code> 和 <code>old_company_name</code>，这种标记法帮你直观地区分函数和其他标识——原型和对象。</p>\n<p>ECMAScript的属性和方法均使用Camel标记法，尽管多字的属性名称是罕见的（正则表达式对象的lastIndex和ignoreCase属性）。</p>\n<h3 id=\"其它命名形式\"><a href=\"#其它命名形式\" class=\"headerlink\" title=\"其它命名形式\"></a>其它命名形式</h3><p>有时，开发人员使用命名规范来弥补或替代语言特性。</p>\n<p>例如，JavaScript中没有定义常量的方法（尽管有些内置的像Number, MAX_VALUE），所以开发者都采用全部单词大写的规范来命名这个程序生命周期中都不会改变的变量，如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 珍贵常数，只可远观</span></div><div class=\"line\"><span class=\"keyword\">var</span> PI = <span class=\"number\">3.14</span>,</div><div class=\"line\">    MAX_WIDTH = <span class=\"number\">800</span>;</div></pre></td></tr></table></figure></p>\n<p>还有另外一个完全大写的惯例：全局变量名字全部大写。全部大写命名全局变量可以加强减小全局变量数量的实践，同时让它们易于区分。</p>\n<p>另外一种使用规范来模拟功能的是私有成员。虽然可以在JavaScript中实现真正的私有，但是开发者发现仅仅使用一个下划线前缀来表示一个私有属性或方法会更容易些。考虑下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getFirst() + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>._getLast();</div><div class=\"line\">    &#125;,</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"attr\">_getFirst</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">_getLast</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在此例中，<code>getName()</code>就表示公共方法，部分稳定的API。而<code>_getFirst()</code>和<code>_getLast()</code>则表明了私有。它们仍然是正常的公共方法，但是使用下划线前缀来警告person对象的使用者这些方法在下一个版本中时不能保证工作的，是不能直接使用的。注意，JSLint有些不鸟下划线前缀，除非你设置了noman选项为:false。</p>\n<p>下面是一些常见的<code>_private</code>规范：</p>\n<ul>\n<li>使用尾下划线表示私有，如<code>name_</code>和<code>getElements_()</code></li>\n<li>使用一个下划线前缀表<code>_protected</code>（保护）属性，两个下划线前缀表示<code>__private</code> （私有）属性</li>\n<li>Firefox中一些内置的变量属性不属于该语言的技术部分，使用两个前下划线和两个后下划线表示，如：<code>__proto__</code>和<code>__parent__</code>。</li>\n</ul>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>你必须注释你的代码，即使不会有其他人向你一样接触它。通常，当你深入研究一个问题，你会很清楚的知道这个代码是干嘛用的，但是，当你一周之后再回来看的时候，想必也要耗掉不少脑细胞去搞明白到底怎么工作的。</p>\n<p>很显然，注释不能走极端：每个单独变量或是单独一行。但是，你通常应该记录所有的函数，它们的参数和返回值，或是任何不寻常的技术和方法。要想到注 释可以给你代码未来的阅读者以诸多提示；阅读者需要的是（不要读太多的东西）仅注释和函数属性名来理解你的代码。例如，当你有五六行程序执行特定的任务， 如果你提供了一行代码目的以及为什么在这里的描述的话，阅读者就可以直接跳过这段细节。没有硬性规定注释代码比，代码的某些部分（如正则表达式）可能注释 要比代码多。</p>\n<blockquote>\n<p>最重要的习惯，然而也是最难遵守的，就是保持注释的及时更新，因为过时的注释比没有注释更加的误导人。</p>\n</blockquote>\n<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><p>Stoyan Stefanov是Yahoo!web开发人员，多个O’Reilly书籍的作者、投稿者和技术评审。他经常在会议和他的博客<a href=\"http://www.zhangxinxu.com/wordpress/2010/10/%e7%bf%bb%e8%af%91-%e9%ab%98%e8%b4%a8%e9%87%8fjavascript%e4%bb%a3%e7%a0%81%e4%b9%a6%e5%86%99%e5%9f%ba%e6%9c%ac%e8%a6%81%e7%82%b9/www.phpied.com\" target=\"_blank\" rel=\"external\">www.phpied.com</a>上发表web开发主题的演讲。Stoyan还是smush.it图片优化工具的创造者，YUI贡献者，雅虎性能优化工具YSlow 2.0的架构设计师。</p>\n<p>本文转自：<a href=\"http://www.zhangxinxu.com/wordpress/?p=1173\" target=\"_blank\" rel=\"external\">张鑫旭-翻译-高质量JavaScript代码书写基本要点</a></p>\n<p>英文原文：<a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/\" target=\"_blank\" rel=\"external\">http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/</a></p>\n<h1 id=\"关于本文\"><a href=\"#关于本文\" class=\"headerlink\" title=\"关于本文\"></a>关于本文</h1><p>本文转自<a href=\"http://www.cnblogs.com/TomXu\" target=\"_blank\" rel=\"external\">TOM大叔</a>的<a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\" target=\"_blank\" rel=\"external\">深入理解JavaScript系列</a></p>\n<blockquote>\n<p>【深入理解JavaScript系列】文章，包括了原创，翻译，转载，整理等各类型文章，原文是TOM大叔的一个非常不错的专题，现将其重新整理发布。谢谢大叔。</p>\n</blockquote>\n","excerpt":"<p>#前言<br>才华横溢的<a href=\"http://www.phpied.com/\">Stoyan Stefanov</a>，在他写的由<a href=\"http://oreilly.com/\">O’Reilly</a>初版的新书<a href=\"http://amzn.to/93szK7\">《JavaScript Patterns》</a>(JavaScript模式)中，我想要是为我们的读者贡献其摘要，那会是件很美妙的事情。具体一点就是编写高质量JavaScript的一些要素，例如避免全局变量，使用单变量声明，在循环中预缓存length(长度)，遵循代码阅读，以及更多。<br>此摘要也包括一些与代码不太相关的习惯，但对整体代码的创建息息相关，包括撰写API文档、执行同行评审以及运行JSLint。这些习惯和最佳做法可以帮助你写出更好的，更易于理解和维护的代码，这些代码在几个月或是几年之后再回过头看看也是会觉得很自豪的。</p>","more":"<h1 id=\"书写可维护的代码\"><a href=\"#书写可维护的代码\" class=\"headerlink\" title=\"书写可维护的代码\"></a>书写可维护的代码</h1><p>软件bug的修复是昂贵的，并且随着时间的推移，这些bug的成本也会增加，尤其当这些bug潜伏并慢慢出现在已经发布的软件中时。当你发现bug 的时候就立即修复它是最好的，此时你代码要解决的问题在你脑中还是很清晰的。否则，你转移到其他任务，忘了那个特定的代码，一段时间后再去查看这些代码就 需要：</p>\n<ul>\n<li>花时间学习和理解这个问题</li>\n<li>化时间是了解应该解决的问题代码</li>\n</ul>\n<p>还有问题，特别对于大的项目或是公司，修复bug的这位伙计不是写代码的那个人（且发现bug和修复bug的不是同一个人）。因此，必须降低理解代 码花费的时间，无论是一段时间前你自己写的代码还是团队中的其他成员写的代码。这关系到底线（营业收入）和开发人员的幸福，因为我们更应该去开发新的激动 人心的事物而不是花几小时几天的时间去维护遗留代码。<br>另一个相关软件开发生命的事实是，读代码花费的时间要比写来得多。有时候，当你专注并深入思考某个问题的时候，你可以坐下来，一个下午写大量的代码。<br>你的代码很能很快就工作了，但是，随着应用的成熟，还会有很多其他的事情发生，这就要求你的进行进行审查，修改，和调整。例如：</p>\n<ul>\n<li>bug是暴露的</li>\n<li>新功能被添加到应用程序</li>\n<li>程序在新的环境下工作（例如，市场上出现新想浏览器）</li>\n<li>代码改变用途</li>\n<li>代码得完全从头重新，或移植到另一个架构上或者甚至使用另一种语言</li>\n</ul>\n<p>由于这些变化，很少人力数小时写的代码最终演变成花数周来阅读这些代码。这就是为什么创建可维护的代码对应用程序的成功至关重要。<br>可维护的代码意味着：</p>\n<ul>\n<li>可读的</li>\n<li>一致的</li>\n<li>可预测的</li>\n<li>看上去就像是同一个人写的</li>\n<li>已记录</li>\n</ul>\n<h1 id=\"最小全局变量\"><a href=\"#最小全局变量\" class=\"headerlink\" title=\"最小全局变量\"></a>最小全局变量</h1><p>JavaScript通过函数管理作用域。在函数内部声明的变量只在这个函数内部，函数外面不可用。另一方面，全局变量就是在任何函数外面声明的或是未声明直接简单使用的。<br>每个JavaScript环境有一个全局对象，当你在任意的函数外面使用this的时候可以访问到。你创建的每一个全部变量都成了这个全局对象的属 性。在浏览器中，方便起见，该全局对象有个附加属性叫做window，此window(通常)指向该全局对象本身。下面的代码片段显示了如何在浏览器环境 中创建和访问的全局变量：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">myglobal = <span class=\"string\">\"hello\"</span>; <span class=\"comment\">// 不推荐写法</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(myglobal); <span class=\"comment\">// \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.myglobal); <span class=\"comment\">// \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>[<span class=\"string\">\"myglobal\"</span>]); <span class=\"comment\">// \"hello\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.myglobal); <span class=\"comment\">// \"hello\"</span></div></pre></td></tr></table></figure>\n<h2 id=\"全局变量的问题\"><a href=\"#全局变量的问题\" class=\"headerlink\" title=\"全局变量的问题\"></a>全局变量的问题</h2><p>全局变量的问题在于，你的JavaScript应用程序和web页面上的所有代码都共享了这些全局变量，他们住在同一个全局命名空间，所以当程序的两个不同部分定义同名但不同作用的全局变量的时候，命名冲突在所难免。<br>web页面包含不是该页面开发者所写的代码也是比较常见的，例如：</p>\n<ul>\n<li>第三方的JavaScript库</li>\n<li>广告方的脚本代码</li>\n<li>第三方用户跟踪和分析脚本代码</li>\n<li>不同类型的小组件，标志和按钮</li>\n</ul>\n<p>比方说，该第三方脚本定义了一个全局变量，叫做result；接着，在你的函数中也定义一个名为result的全局变量。其结果就是后面的变量覆盖前面的，第三方脚本就一下子嗝屁啦！<br>因此，要想和其他脚本成为好邻居的话，尽可能少的使用全局变量是很重要的。在书中后面提到的一些减少全局变量的策略，例如命名空间模式或是函数立即自动执行，但是要想让全局变量少最重要的还是始终使用var来声明变量。<br>由于JavaScript的两个特征，不自觉地创建出全局变量是出乎意料的容易。首先，你可以甚至不需要声明就可以使用变量；第二，JavaScript有隐含的全局概念，意味着你不声明的任何变量都会成为一个全局对象属性。参考下面的代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">   <span class=\"comment\">// 不推荐写法: 隐式全局变量</span></div><div class=\"line\">   result = x + y;</div><div class=\"line\">   <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此段代码中的<code>result</code>没有声明。代码照样运作正常，但在调用函数后你最后的结果就多一个全局命名空间，这可以是一个问题的根源。<br>经验法则是始终使用var声明变量，正如改进版的sum()函数所演示的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> result = x + y;</div><div class=\"line\">   <span class=\"keyword\">return</span> result;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>另一个创建隐式全局变量的反例就是使用任务链进行部分var声明。下面的片段中，<code>a</code>是本地变量,但是<code>b</code>却是全局变量，这可能不是你希望发生的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反例，勿使用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> a = b = <span class=\"number\">0</span>;</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>此现象发生的原因在于这个从右到左的赋值，首先，是赋值表达式<code>b = 0</code>，此情况下b是未声明的。这个表达式的返回值是0，然后这个0就分配给了通过var定义的这个局部变量a。换句话说，就好比你输入了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = (b = <span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<p>如果你已经准备好声明变量，使用链分配是比较好的做法，不会产生任何意料之外的全局变量，如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> a, b;</div><div class=\"line\">   <span class=\"comment\">// ... a = b = 0; // 两个均局部变量</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>然而，另外一个避免全局变量的原因是可移植性。如果你想你的代码在不同的环境下（主机下）运行，使用全局变量如履薄冰，因为你会无意中覆盖你最初环境下不存在的主机对象（所以你原以为名称可以放心大胆地使用，实际上对于有些情况并不适用）。</p>\n</blockquote>\n<h2 id=\"忘记var的副作用\"><a href=\"#忘记var的副作用\" class=\"headerlink\" title=\"忘记var的副作用\"></a>忘记var的副作用</h2><p>隐式全局变量和明确定义的全局变量间有些小的差异，就是通过<code>delete</code>操作符让变量未定义的能力。</p>\n<ul>\n<li>通过var创建的全局变量（任何函数之外的程序中创建）是不能被删除的。</li>\n<li>无var创建的隐式全局变量（无视是否在函数中创建）是能被删除的。</li>\n</ul>\n<p>这表明，在技术上，隐式全局变量并不是真正的全局变量，但它们是全局对象的属性。属性是可以通过<code>delete</code>操作符删除的，而变量是不能的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 定义三个全局变量</span></div><div class=\"line\"><span class=\"keyword\">var</span> global_var = <span class=\"number\">1</span>;</div><div class=\"line\">global_novar = <span class=\"number\">2</span>; <span class=\"comment\">// 反面教材</span></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   global_fromfunc = <span class=\"number\">3</span>; <span class=\"comment\">// 反面教材</span></div><div class=\"line\">&#125;());</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 试图删除</span></div><div class=\"line\"><span class=\"keyword\">delete</span> global_var; <span class=\"comment\">// false</span></div><div class=\"line\"><span class=\"keyword\">delete</span> global_novar; <span class=\"comment\">// true</span></div><div class=\"line\"><span class=\"keyword\">delete</span> global_fromfunc; <span class=\"comment\">// true</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 测试该删除</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> global_var; <span class=\"comment\">// \"number\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> global_novar; <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"keyword\">typeof</span> global_fromfunc; <span class=\"comment\">// \"undefined\"</span></div></pre></td></tr></table></figure>\n<p>在ES5严格模式下，未声明的变量（如在前面的代码片段中的两个反面教材）工作时会抛出一个错误。</p>\n<h2 id=\"访问全局对象\"><a href=\"#访问全局对象\" class=\"headerlink\" title=\"访问全局对象\"></a>访问全局对象</h2><p>在浏览器中，全局对象可以通过<code>window</code>属性在代码的任何位置访问（除非你做了些比较出格的事情，像是声明了一个名为window的局部变量）。但是在其他环境下，这个方便的属性可能被叫做其他什么东西（甚至在程序中不可用）。如果你需要在没有硬编码的<code>window</code>标识符下访问全局对象，你可以在任何层级的函数作用域中做如下操作：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> global = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>这种方法可以随时获得全局对象，因为其在函数中被当做函数调用了（不是通过<code>new</code>构造），<code>this</code>总 是指向全局对象。实际上这个病不适用于ECMAScript 5严格模式，所以，在严格模式下时，你必须采取不同的形式。例如，你正在开发一个JavaScript库，你可以将你的代码包裹在一个即时函数中，然后从 全局作用域中，传递一个引用指向this作为你即时函数的参数。</p>\n<h2 id=\"单var形式\"><a href=\"#单var形式\" class=\"headerlink\" title=\"单var形式\"></a>单var形式</h2><p>在函数顶部使用单var语句是比较有用的一种形式，其好处在于：</p>\n<ul>\n<li>提供了一个单一的地方去寻找功能所需要的所有局部变量</li>\n<li>防止变量在定义之前使用的逻辑错误</li>\n<li>帮助你记住声明的全局变量，因此较少了全局变量==//zxx:此处我自己是有点晕乎的…==</li>\n<li>少代码（类型啊传值啊单线完成）</li>\n</ul>\n<p>单var形式长得就像下面这个样子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</div><div class=\"line\">       b = <span class=\"number\">2</span>,</div><div class=\"line\">       sum = a + b,</div><div class=\"line\">       myobject = &#123;&#125;,</div><div class=\"line\">       i,</div><div class=\"line\">       j;</div><div class=\"line\">   <span class=\"comment\">// function body...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>您可以使用一个var语句声明多个变量，并以逗号分隔。像这种初始化变量同时初始化值的做法是很好的。这样子可以防止逻辑错误（所有未初始化但声明的变量的初始值是<code>undefined</code>）和增加代码的可读性。在你看到代码后，你可以根据初始化的值知道这些变量大致的用途，例如是要当作对象呢还是当作整数来使。</p>\n<p>你也可以在声明的时候做一些实际的工作，例如前面代码中的<code>sum = a + b</code>这个情况，另外一个例子就是当你使用DOM（文档对象模型）引用时，你可以使用单一的var把DOM引用一起指定为局部变量，就如下面代码所示的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateElement</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> el = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"result\"</span>),</div><div class=\"line\">       style = el.style;</div><div class=\"line\">   <span class=\"comment\">// 使用el和style干点其他什么事...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"预解析：var散布的问题\"><a href=\"#预解析：var散布的问题\" class=\"headerlink\" title=\"预解析：var散布的问题\"></a>预解析：var散布的问题</h2><p>JavaScript中，你可以在函数的任何位置声明多个var语句，并且它们就好像是在函数顶部声明一样发挥作用，这种行为称为 hoisting（悬置/置顶解析/预解析）。当你使用了一个变量，然后不久在函数中又重新声明的话，就可能产生逻辑错误。对于JavaScript，只 要你的变量是在同一个作用域中（同一函数），它都被当做是声明的，即使是它在var声明前使用的时候。看下面这个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反例</span></div><div class=\"line\">myname = <span class=\"string\">\"global\"</span>; <span class=\"comment\">// 全局变量</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    alert(myname); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\">    <span class=\"keyword\">var</span> myname = <span class=\"string\">\"local\"</span>;</div><div class=\"line\">    alert(myname); <span class=\"comment\">// \"local\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">func();</div></pre></td></tr></table></figure>\n<p>在这个例子中，你可能会以为第一个alert弹出的是”global”，第二个弹出”loacl”。这种期许是可以理解的，因为在第一个alert 的时候，myname未声明，此时函数肯定很自然而然地看全局变量myname，但是，实际上并不是这么工作的。第一个alert会弹 出”undefined”是因为myname被当做了函数的局部变量（尽管是之后声明的），所有的变量声明当被悬置到函数的顶部了。因此，为了避免这种混 乱，最好是预先声明你想使用的全部变量。</p>\n<p>上面的代码片段执行的行为可能就像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">myname = <span class=\"string\">\"global\"</span>; <span class=\"comment\">// global variable</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> myname; <span class=\"comment\">// 等同于 -&gt; var myname = undefined;</span></div><div class=\"line\">   alert(myname); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\">   myname = <span class=\"string\">\"local\"</span>;</div><div class=\"line\">   alert(myname); <span class=\"comment\">// \"local\"&#125;</span></div><div class=\"line\">func();</div></pre></td></tr></table></figure>\n<blockquote>\n<p>为了完整，我们再提一提执行层面的稍微复杂点的东西。代码处理分两个阶段，第一阶段是变量，函数声明，以及正常格式的参数创建，这是一个解析和进入上下文 的阶段。第二个阶段是代码执行，函数表达式和不合格的标识符（为声明的变量）被创建。但是，出于实用的目的，我们就采用了”hoisting”这个概念， 这种ECMAScript标准中并未定义，通常用来描述行为。</p>\n</blockquote>\n<h1 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h1><p>在<code>for</code>循环中，你可以循环取得数组或是数组类似对象的值，譬如<code>arguments</code>和<code>HTMLCollection</code>对象。通常的循环形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 次佳的循环</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; myarray.length; i++) &#123;</div><div class=\"line\">   <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种形式的循环的不足在于每次循环的时候数组的长度都要去获取下。这回降低你的代码，尤其当<code>myarray</code>不是数组，而是一个<code>HTMLCollection</code>对象的时候。</p>\n<p><code>HTMLCollections</code>指的是DOM方法返回的对象，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByName()</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByClassName()</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName()</div></pre></td></tr></table></figure>\n<p>还有其他一些<code>HTMLCollections</code>，这些是在DOM标准之前引进并且现在还在使用的。有：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.images: 页面上所有的图片元素</div><div class=\"line\"><span class=\"built_in\">document</span>.links : 所有a标签元素</div><div class=\"line\"><span class=\"built_in\">document</span>.forms : 所有表单</div><div class=\"line\"><span class=\"built_in\">document</span>.forms[<span class=\"number\">0</span>].elements : 页面上第一个表单中的所有域</div></pre></td></tr></table></figure>\n<p>集合的麻烦在于它们实时查询基本文档（HTML页面）。这意味着每次你访问任何集合的长度，你要实时查询DOM，而DOM操作一般都是比较昂贵的。</p>\n<p>这就是为什么当你循环获取值时，缓存数组(或集合)的长度是比较好的形式，正如下面代码显示的：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, max = myarray.length; i &lt; max; i++) &#123;</div><div class=\"line\">   <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样，在这个循环过程中，你只检索了一次长度值。</p>\n<p>在所有浏览器下，循环获取内容时缓存<code>HTMLCollections</code>的长度是更快的，2倍(Safari3)到190倍(IE7)之间。==//zxx:此数据貌似很老，仅供参考==</p>\n<p>注意到，当你明确想要修改循环中的集合的时候（例如，添加更多的DOM元素），你可能更喜欢长度更新而不是常量。</p>\n<p>伴随着单var形式，你可以把变量从循环中提出来，就像下面这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">looper</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,</div><div class=\"line\">        max,</div><div class=\"line\">        myarray = [];</div><div class=\"line\">   <span class=\"comment\">// ...</span></div><div class=\"line\">   <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>, max = myarray.length; i &lt; max; i++) &#123;</div><div class=\"line\">      <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这种形式具有一致性的好处，因为你坚持了单一var形式。不足在于当重构代码的时候，复制和粘贴整个循环有点困难。例如，你从一个函数复制了一个循环到另一个函数，你不得不去确定你能够把<code>i</code>和<code>max</code>引入新的函数（如果在这里没有用的话，很有可能你要从原函数中把它们删掉）。</p>\n<p>最后一个需要对循环进行调整的是使用下面表达式之一来替换<code>i++</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">i = i + <span class=\"number\">1</span></div><div class=\"line\">i += <span class=\"number\">1</span></div></pre></td></tr></table></figure>\n<p>JSLint提示您这样做，原因是<code>++</code>和<code>–-</code>促进了“过分棘手(excessive trickiness)”。==//zxx:这里比较难翻译，我想本意应该是让代码变得更加的棘手==<br>如果你直接无视它，JSLint的<code>plusplus</code>选项会是<code>false</code>（默认是default）。</p>\n<p>还有两种变化的形式，其又有了些微改进，因为：</p>\n<ul>\n<li>少了一个变量(无max)</li>\n<li>向下数到0，通常更快，因为和0做比较要比和数组长度或是其他不是0的东西作比较更有效率</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//第一种变化的形式：</span></div><div class=\"line\"><span class=\"keyword\">var</span> i, myarray = [];</div><div class=\"line\"><span class=\"keyword\">for</span> (i = myarray.length; i–-;) &#123;</div><div class=\"line\">   <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//第二种使用while循环：</span></div><div class=\"line\"><span class=\"keyword\">var</span> myarray = [],</div><div class=\"line\">    i = myarray.length;</div><div class=\"line\"><span class=\"keyword\">while</span> (i–-) &#123;</div><div class=\"line\">   <span class=\"comment\">// 使用myarray[i]做点什么</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这些小的改进只体现在性能上，此外JSLint会对使用i–-加以抱怨。</p>\n<h1 id=\"for-in循环\"><a href=\"#for-in循环\" class=\"headerlink\" title=\"for-in循环\"></a>for-in循环</h1><p><code>for-in</code>循环应该用在非数组对象的遍历上，使用<code>for-in</code>进行循环也被称为“枚举”。</p>\n<p>从技术上将，你可以使用<code>for-in</code>循环数组（因为JavaScript中数组也是对象），但这是不推荐的。因为如果数组对象已被自定义的功能增强，就可能发生逻辑错误。另外，在for-in中，属性列表的顺序（序列）是不能保证的。所以最好数组使用正常的for循环，对象使用for-in循环。</p>\n<p>有个很重要的<code>hasOwnProperty()</code>方法，当遍历对象属性的时候可以过滤掉从原型链上下来的属性。</p>\n<p>思考下面一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 对象</span></div><div class=\"line\"><span class=\"keyword\">var</span> man = &#123;</div><div class=\"line\">   <span class=\"attr\">hands</span>: <span class=\"number\">2</span>,</div><div class=\"line\">   <span class=\"attr\">legs</span>: <span class=\"number\">2</span>,</div><div class=\"line\">   <span class=\"attr\">heads</span>: <span class=\"number\">1</span></div><div class=\"line\">&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 在代码的某个地方</span></div><div class=\"line\"><span class=\"comment\">// 一个方法添加给了所有对象</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.prototype.clone === <span class=\"string\">\"undefined\"</span>) &#123;</div><div class=\"line\">   <span class=\"built_in\">Object</span>.prototype.clone = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个例子中，我们有一个使用对象字面量定义的名叫man的对象。在man定义完成后的某个地方，在对象原型上增加了一个很有用的名叫 clone()的方法。此原型链是实时的，这就意味着所有的对象自动可以访问新的方法。为了避免枚举man的时候出现clone()方法，你需要应用<code>hasOwnProperty()</code>方法过滤原型属性。如果不做过滤，会导致clone()函数显示出来，在大多数情况下这是不希望出现的。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 1.</span></div><div class=\"line\"><span class=\"comment\">// for-in 循环</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> man) &#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (man.hasOwnProperty(i)) &#123; <span class=\"comment\">// 过滤</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/* 控制台显示结果</div><div class=\"line\">hands : 2</div><div class=\"line\">legs : 2</div><div class=\"line\">heads : 1</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"comment\">// 2.</span></div><div class=\"line\"><span class=\"comment\">// 反面例子:</span></div><div class=\"line\"><span class=\"comment\">// for-in loop without checking hasOwnProperty()</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> man) &#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">控制台显示结果</div><div class=\"line\">hands : 2</div><div class=\"line\">legs : 2</div><div class=\"line\">heads : 1</div><div class=\"line\">clone: function()</div><div class=\"line\">*/</span></div></pre></td></tr></table></figure>\n<p>另外一种使用hasOwnProperty()的形式是取消Object.prototype上的方法。像是：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> man) &#123;</div><div class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">Object</span>.prototype.hasOwnProperty.call(man, i)) &#123; <span class=\"comment\">// 过滤</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其好处在于在man对象重新定义hasOwnProperty情况下避免命名冲突。也避免了长属性查找对象的所有方法，你可以使用局部变量“缓存”它。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> i, hasOwn = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty;</div><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> man) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (hasOwn.call(man, i)) &#123; <span class=\"comment\">// 过滤</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>严格来说，不使用<code>hasOwnProperty()</code>并不是一个错误。根据任务以及你对代码的自信程度，你可以跳过它以提高些许的循环速度。但是当你对当前对象内容（和其原型链）不确定的时候，添加<code>hasOwnProperty()</code>更加保险些。</p>\n</blockquote>\n<p>格式化的变化（通不过JSLint）会直接忽略掉花括号，把if语句放到同一行上。其优点在于循环语句读起来就像一个完整的想法（每个元素都有一个自己的属性”X”，使用”X”干点什么）：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 警告： 通不过JSLint检测</span></div><div class=\"line\"><span class=\"keyword\">var</span> i, hasOwn = <span class=\"built_in\">Object</span>.prototype.hasOwnProperty;</div><div class=\"line\"><span class=\"keyword\">for</span> (i <span class=\"keyword\">in</span> man) <span class=\"keyword\">if</span> (hasOwn.call(man, i)) &#123; <span class=\"comment\">// 过滤</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(i, <span class=\"string\">\":\"</span>, man[i]);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"（不）扩展内置原型\"><a href=\"#（不）扩展内置原型\" class=\"headerlink\" title=\"（不）扩展内置原型\"></a>（不）扩展内置原型</h1><p>扩增构造函数的prototype属性是个很强大的增加功能的方法，但有时候它太强大了。</p>\n<p>增加内置的构造函数原型（如Object(), Array(), 或Function()）挺诱人的，但是这严重降低了可维护性，因为它让你的代码变得难以预测。使用你代码的其他开发人员很可能更期望使用内置的 JavaScript方法来持续不断地工作，而不是你另加的方法。</p>\n<p>另外，属性添加到原型中，可能会导致不使用hasOwnProperty属性时在循环中显示出来，这会造成混乱。</p>\n<p>因此，不增加内置原型是最好的。你可以指定一个规则，仅当下面的条件均满足时例外：</p>\n<ul>\n<li>可以预期将来的ECMAScript版本或是JavaScript实现将一直将此功能当作内置方法来实现。例如，你可以添加ECMAScript 5中描述的方法，一直到各个浏览器都迎头赶上。这种情况下，你只是提前定义了有用的方法。</li>\n<li>如果您检查您的自定义属性或方法已不存在——也许已经在代码的其他地方实现或已经是你支持的浏览器JavaScript引擎部分。</li>\n<li>你清楚地文档记录并和团队交流了变化。</li>\n</ul>\n<p>如果这三个条件得到满足，你可以给原型进行自定义的添加，形式如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.protoype.myMethod !== <span class=\"string\">\"function\"</span>) &#123;</div><div class=\"line\">   <span class=\"built_in\">Object</span>.protoype.myMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"comment\">// 实现...</span></div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"switch模式\"><a href=\"#switch模式\" class=\"headerlink\" title=\"switch模式\"></a>switch模式</h1><p>你可以通过类似下面形式的switch语句增强可读性和健壮性：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> inspect_me = <span class=\"number\">0</span>,</div><div class=\"line\">    result = <span class=\"string\">''</span>;</div><div class=\"line\"><span class=\"keyword\">switch</span> (inspect_me) &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">   result = <span class=\"string\">\"zero\"</span>;</div><div class=\"line\">   <span class=\"keyword\">break</span>;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">   result = <span class=\"string\">\"one\"</span>;</div><div class=\"line\">   <span class=\"keyword\">break</span>;</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">   result = <span class=\"string\">\"unknown\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个简单的例子中所遵循的风格约定如下：</p>\n<ul>\n<li>每个case和switch对齐（花括号缩进规则除外）</li>\n<li>每个case中代码缩进</li>\n<li>每个case以break清除结束</li>\n<li>避免贯穿（故意忽略break）。如果你非常确信贯穿是最好的方法，务必记录此情况，因为对于有些阅读人而言，它们可能看起来是错误的。</li>\n<li>以default结束switch：确保总有健全的结果，即使无情况匹配。</li>\n</ul>\n<h1 id=\"避免隐式类型转换\"><a href=\"#避免隐式类型转换\" class=\"headerlink\" title=\"避免隐式类型转换\"></a>避免隐式类型转换</h1><p>JavaScript的变量在比较的时候会隐式类型转换。这就是为什么一些诸如：false == 0 或 “” == 0 返回的结果是true。为避免引起混乱的隐含类型转换，在你比较值和表达式类型的时候始终使用===和!==操作符。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> zero = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (zero === <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// 不执行，因为zero为0, 而不是false</span></div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 反面示例</span></div><div class=\"line\"><span class=\"keyword\">if</span> (zero == <span class=\"literal\">false</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// 执行了...</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>还有另外一种思想观点认为==就足够了===是多余的。例如，当你使用typeof你就知道它会返回一个字符串，所以没有使用严格相等的理由。然而，JSLint要求严格相等，它使代码看上去更有一致性，可以降低代码阅读时的精力消耗。（“==是故意的还是一个疏漏？”）</p>\n<h1 id=\"避免eval\"><a href=\"#避免eval\" class=\"headerlink\" title=\"避免eval()\"></a>避免eval()</h1><p>如果你现在的代码中使用了eval()，记住该咒语“eval()是魔鬼”。此方法接受任意的字符串，并当作JavaScript代码来处理。当有 问题的代码是事先知道的（不是运行时确定的），没有理由使用eval()。如果代码是在运行时动态生成，有一个更好的方式不使用eval而达到同样的目 标。例如，用方括号表示法来访问动态属性会更好更简单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反面示例</span></div><div class=\"line\"><span class=\"keyword\">var</span> property = <span class=\"string\">\"name\"</span>;</div><div class=\"line\">alert(<span class=\"built_in\">eval</span>(<span class=\"string\">\"obj.\"</span> + property));</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 更好的</span></div><div class=\"line\"><span class=\"keyword\">var</span> property = <span class=\"string\">\"name\"</span>;</div><div class=\"line\">alert(obj[property]);</div></pre></td></tr></table></figure>\n<p>使用eval()也带来了安全隐患，因为被执行的代码（例如从网络来）可能已被篡改。这是个很常见的反面教材，当处理Ajax请求得到的JSON 相应的时候。在这些情况下，最好使用JavaScript内置方法来解析JSON相应，以确保安全和有效。若浏览器不支持JSON.parse()，你可 以使用来自JSON.org的库。</p>\n<p>同样重要的是要记住，给setInterval(), setTimeout()和Function()构造函数传递字符串，大部分情况下，与使用eval()是类似的，因此要避免。在幕后，JavaScript仍需要评估和执行你给程序传递的字符串：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 反面示例</span></div><div class=\"line\">setTimeout(<span class=\"string\">\"myFunc()\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\">setTimeout(<span class=\"string\">\"myFunc(1, 2, 3)\"</span>, <span class=\"number\">1000</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 更好的</span></div><div class=\"line\">setTimeout(myFunc, <span class=\"number\">1000</span>);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   myFunc(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div><div class=\"line\">&#125;, <span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<p>使用新的Function()构造就类似于eval()，应小心接近。这可能是一个强大的构造，但往往被误用。如果你绝对必须使用eval()，你 可以考虑使用new Function()代替。有一个小的潜在好处，因为在新Function()中作代码评估是在局部函数作用域中运行，所以代码中任何被评估的通过var 定义的变量都不会自动变成全局变量。另一种方法来阻止自动全局变量是封装eval()调用到一个即时函数中。</p>\n<p>考虑下面这个例子，这里仅<code>un</code>作为全局变量污染了命名空间。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> un);    <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> deux); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> trois); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">var</span> jsstring = <span class=\"string\">\"var un = 1; console.log(un);\"</span>;</div><div class=\"line\"><span class=\"built_in\">eval</span>(jsstring); <span class=\"comment\">// logs \"1\"</span></div><div class=\"line\"> </div><div class=\"line\">jsstring = <span class=\"string\">\"var deux = 2; console.log(deux);\"</span>;</div><div class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Function</span>(jsstring)(); <span class=\"comment\">// logs \"2\"</span></div><div class=\"line\"> </div><div class=\"line\">jsstring = <span class=\"string\">\"var trois = 3; console.log(trois);\"</span>;</div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"built_in\">eval</span>(jsstring);</div><div class=\"line\">&#125;()); <span class=\"comment\">// logs \"3\"</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> un); <span class=\"comment\">// number</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> deux); <span class=\"comment\">// \"undefined\"</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> trois); <span class=\"comment\">// \"undefined\"</span></div></pre></td></tr></table></figure>\n<p>另一间eval()和Function构造不同的是eval()可以干扰作用域链，而Function()更安分守己些。不管你在哪里执行 Function()，它只看到全局作用域。所以其能很好的避免本地变量污染。在下面这个例子中，eval()可以访问和修改它外部作用域中的变量，这是 Function做不来的（注意到使用Function和new Function是相同的）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> local = <span class=\"number\">1</span>;</div><div class=\"line\">   <span class=\"built_in\">eval</span>(<span class=\"string\">\"local = 3; console.log(local)\"</span>); <span class=\"comment\">// logs \"3\"</span></div><div class=\"line\">   <span class=\"built_in\">console</span>.log(local); <span class=\"comment\">// logs \"3\"</span></div><div class=\"line\">&#125;());</div><div class=\"line\"> </div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> local = <span class=\"number\">1</span>;</div><div class=\"line\">   <span class=\"built_in\">Function</span>(<span class=\"string\">\"console.log(typeof local);\"</span>)(); <span class=\"comment\">// logs undefined</span></div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<h1 id=\"parseInt-下的数值转换\"><a href=\"#parseInt-下的数值转换\" class=\"headerlink\" title=\"parseInt()下的数值转换\"></a>parseInt()下的数值转换</h1><p>使用parseInt()你可以从字符串中获取数值，该方法接受另一个基数参数，这经常省略，但不应该。当字符串以”0″开头的时候就有可能会出问 题，例如，部分时间进入表单域，在ECMAScript 3中，开头为”0″的字符串被当做8进制处理了，但这已在ECMAScript 5中改变了。为了避免矛盾和意外的结果，总是指定基数参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> month = <span class=\"string\">\"06\"</span>,</div><div class=\"line\">    year = <span class=\"string\">\"09\"</span>;</div><div class=\"line\">month = <span class=\"built_in\">parseInt</span>(month, <span class=\"number\">10</span>);</div><div class=\"line\">year = <span class=\"built_in\">parseInt</span>(year, <span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<p>此例中，如果你忽略了基数参数，如parseInt(year)，返回的值将是0，因为“09”被当做8进制（好比执行 parseInt( year, 8 )），而09在8进制中不是个有效数字。</p>\n<p>替换方法是将字符串转换成数字，包括：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">+<span class=\"string\">\"08\"</span> <span class=\"comment\">// 结果是 8</span></div><div class=\"line\"><span class=\"built_in\">Number</span>(<span class=\"string\">\"08\"</span>) <span class=\"comment\">// 8</span></div></pre></td></tr></table></figure>\n<p>这些通常快于parseInt()，因为parseInt()方法，顾名思意，不是简单地解析与转换。但是，如果你想输入例如“08 hello”，parseInt()将返回数字，而其它以NaN告终。</p>\n<h1 id=\"编码规范\"><a href=\"#编码规范\" class=\"headerlink\" title=\"编码规范\"></a>编码规范</h1><p>建立和遵循编码规范是很重要的，这让你的代码保持一致性，可预测，更易于阅读和理解。一个新的开发者加入这个团队可以通读规范，理解其它团队成员书写的代码，更快上手干活。</p>\n<p>许多激烈的争论发生会议上或是邮件列表上，问题往往针对某些代码规范的特定方面（例如代码缩进，是Tab制表符键还是space空格键）。如果你是 你组织中建议采用规范的，准备好面对各种反对的或是听起来不同但很强烈的观点。要记住，建立和坚定不移地遵循规范要比纠结于规范的细节重要的多。</p>\n<h2 id=\"缩进\"><a href=\"#缩进\" class=\"headerlink\" title=\"缩进\"></a>缩进</h2><p>  代码没有缩进基本上就不能读了。唯一糟糕的事情就是不一致的缩进，因为它看上去像是遵循了规范，但是可能一路上伴随着混乱和惊奇。重要的是规范地使用缩进。</p>\n<p>  一些开发人员更喜欢用tab制表符缩进，因为任何人都可以调整他们的编辑器以自己喜欢的空格数来显示Tab。有些人喜欢空格——通常四个，这都无所谓，只要团队每个人都遵循同一个规范就好了。这本书，例如，使用四个空格缩进，这也是JSLint中默认的缩进。</p>\n<p>  什么应该缩进呢？规则很简单——花括号里面的东西。这就意味着函数体，循环 (do, while, for, for-in)，if，switch，以及对象字面量中的对象属性。下面的代码就是使用缩进的示例：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">outer</span>(<span class=\"params\">a, b</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> c = <span class=\"number\">1</span>,</div><div class=\"line\">        d = <span class=\"number\">2</span>,</div><div class=\"line\">        inner;</div><div class=\"line\">    <span class=\"keyword\">if</span> (a &gt; b) &#123;</div><div class=\"line\">        inner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                <span class=\"attr\">r</span>: c - d</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        inner = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">                <span class=\"attr\">r</span>: c + d</div><div class=\"line\">            &#125;;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> inner;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"花括号\"><a href=\"#花括号\" class=\"headerlink\" title=\"花括号{}\"></a>花括号{}</h2><p>花括号（亦称大括号，下同）应总被使用，即使在它们为可选的时候。技术上将，在in或是for中如果语句仅一条，花括号是不需要的，但是你还是应该总是使用它们，这会让代码更有持续性和易于更新。</p>\n<p>想象下你有一个只有一条语句的for循环，你可以忽略花括号，而没有解析的错误。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 糟糕的实例</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i += <span class=\"number\">1</span>)</div><div class=\"line\">   alert(i);</div></pre></td></tr></table></figure>\n<p>但是，如果，后来，主体循环部分又增加了行代码？</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 糟糕的实例</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i += <span class=\"number\">1</span>)</div><div class=\"line\">   alert(i);</div><div class=\"line\">   alert(i + <span class=\"string\">\" is \"</span> + (i % <span class=\"number\">2</span> ? <span class=\"string\">\"odd\"</span> : <span class=\"string\">\"even\"</span>));</div></pre></td></tr></table></figure>\n<p>第二个alert已经在循环之外，缩进可能欺骗了你。为了长远打算，最好总是使用花括号，即时值一行代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 好的实例</span></div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i += <span class=\"number\">1</span>) &#123;</div><div class=\"line\">   alert(i);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>if条件类似：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 坏</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>)</div><div class=\"line\">   alert(<span class=\"number\">1</span>);</div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">   alert(<span class=\"number\">2</span>);</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 好</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">   alert(<span class=\"number\">1</span>);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">   alert(<span class=\"number\">2</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"左花括号的位置\"><a href=\"#左花括号的位置\" class=\"headerlink\" title=\"左花括号的位置\"></a>左花括号的位置</h2><p>开发人员对于左大括号的位置有着不同的偏好——在同一行或是下一行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</div><div class=\"line\">   alert(<span class=\"string\">\"It's TRUE!\"</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">//或</span></div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>)</div><div class=\"line\">&#123;</div><div class=\"line\">   alert(<span class=\"string\">\"It's TRUE!\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个实例中，仁者见仁智者见智，但也有个案，括号位置不同会有不同的行为表现。这是因为分号插入机制(semicolon insertion mechanism)——JavaScript是不挑剔的，当你选择不使用分号结束一行代码时JavaScript会自己帮你补上。这种行为可能会导致麻 烦，如当你返回对象字面量，而左括号却在下一行的时候：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 警告： 意外的返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span></div><div class=\"line\">  <span class=\"comment\">// 下面代码不执行</span></div><div class=\"line\">   &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : <span class=\"string\">\"Batman\"</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果你希望函数返回一个含有name属性的对象，你会惊讶。由于隐含分号，函数返回undefined。前面的代码等价于：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 警告： 意外的返回值</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">undefined</span>;</div><div class=\"line\">  <span class=\"comment\">// 下面代码不执行</span></div><div class=\"line\">   &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : <span class=\"string\">\"Batman\"</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>总之，总是使用花括号，并始终把在与之前的语句放在同一行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">   <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">name</span> : <span class=\"string\">\"Batman\"</span></div><div class=\"line\">   &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>关于分号注：就像使用花括号，你应该总是使用分号，即使他们可由JavaScript解析器隐式创建。这不仅促进更科学和更严格的代码，而且有助于解决存有疑惑的地方，就如前面的例子显示。</p>\n</blockquote>\n<h2 id=\"空格\"><a href=\"#空格\" class=\"headerlink\" title=\"空格\"></a>空格</h2><p>空格的使用同样有助于改善代码的可读性和一致性。在写英文句子的时候，在逗号和句号后面会使用间隔。在JavaScript中，你可以按照同样的逻辑在列表模样表达式（相当于逗号）和结束语句（相对于完成了“想法”）后面添加间隔。</p>\n<p>适合使用空格的地方包括：</p>\n<ul>\n<li>for循环分号分开后的的部分：如<code>for (var i = 0; i &lt; 10; i += 1) {...}</code></li>\n<li>for循环中初始化的多变量(i和max)：<code>for (var i = 0, max = 10; i &lt; max; i += 1) {...}</code></li>\n<li>分隔数组项的逗号的后面：<code>var a = [1, 2, 3];</code></li>\n<li>对象属性逗号的后面以及分隔属性名和属性值的冒号的后面：<code>var o = {a: 1, b: 2};</code></li>\n<li>限定函数参数：<code>myFunc(a, b, c)</code></li>\n<li>函数声明的花括号的前面：<code>function myFunc() {}</code></li>\n<li>匿名函数表达式function的后面：<code>var myFunc = function () {};</code></li>\n</ul>\n<p>使用空格分开所有的操作符和操作对象是另一个不错的使用，这意味着在<code>+, -, *, =, &lt;, &gt;, &lt;=, &gt;=, ===, !==, &amp;&amp;, ||, +=</code>等前后都需要空格。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 宽松一致的间距</span></div><div class=\"line\"><span class=\"comment\">// 使代码更易读</span></div><div class=\"line\"><span class=\"comment\">// 使得更加“透气”</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"number\">0</span>,</div><div class=\"line\">    a = b + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (a &amp;&amp; b &amp;&amp; c) &#123;</div><div class=\"line\">    d = a % c;</div><div class=\"line\">    a += d;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"comment\">// 反面例子</span></div><div class=\"line\"><span class=\"comment\">// 缺失或间距不一</span></div><div class=\"line\"><span class=\"comment\">// 使代码变得疑惑</span></div><div class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"number\">0</span>,</div><div class=\"line\">    a = b + <span class=\"number\">1</span>;</div><div class=\"line\"><span class=\"keyword\">if</span> (a&amp;&amp;b&amp;&amp;c) &#123;</div><div class=\"line\">    d=a % c;</div><div class=\"line\">    a+= d;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>最后需要注意的一个空格——花括号间距。最好使用空格：</p>\n<ul>\n<li>函数、if-else语句、循环、对象字面量的左花括号的前面({)</li>\n<li>else或while之间的右花括号(})</li>\n</ul>\n<p>空格使用的一点不足就是增加了文件的大小，但是压缩无此问题。</p>\n<blockquote>\n<p>有一个经常被忽略的代码可读性方面是垂直空格的使用。你可以使用空行来分隔代码单元，就像是文学作品中使用段落分隔一样。</p>\n</blockquote>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><p>另一种方法让你的代码更具可预测性和可维护性是采用命名规范。这就意味着你需要用同一种形式给你的变量和函数命名。</p>\n<p>下面是建议的一些命名规范，你可以原样采用，也可以根据自己的喜好作调整。同样，遵循规范要比规范是什么更重要。</p>\n<h3 id=\"以大写字母写构造函数\"><a href=\"#以大写字母写构造函数\" class=\"headerlink\" title=\"以大写字母写构造函数\"></a>以大写字母写构造函数</h3><p>JavaScript并没有类，但有new调用的构造函数：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> adam = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure>\n<p>因为构造函数仍仅仅是函数，仅看函数名就可以帮助告诉你这应该是一个构造函数还是一个正常的函数。</p>\n<p>命名构造函数时首字母大写具有暗示作用，使用小写命名的函数和方法不应该使用new调用：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">MyConstructor</span>(<span class=\"params\"></span>) </span>&#123;...&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;...&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"分隔单词\"><a href=\"#分隔单词\" class=\"headerlink\" title=\"分隔单词\"></a>分隔单词</h3><p>当你的变量或是函数名有多个单词的时候，最好单词的分离遵循统一的规范，有一个常见的做法被称作“驼峰(Camel)命名法”，就是单词小写，每个单词的首字母大写。</p>\n<p>对于构造函数，可以使用大驼峰式命名法(upper camel case)，如<code>MyConstructor()</code>。对于函数和方法名称，你可以使用小驼峰式命名法(lower camel case)，像是<code>myFunction()</code>, <code>calculateArea()</code>和<code>getFirstName()</code>。</p>\n<p>要是变量不是函数呢？开发者通常使用小驼峰式命名法，但还有另外一种做法就是所有单词小写以下划线连接：例如，<code>first_name, favorite_bands,</code> 和 <code>old_company_name</code>，这种标记法帮你直观地区分函数和其他标识——原型和对象。</p>\n<p>ECMAScript的属性和方法均使用Camel标记法，尽管多字的属性名称是罕见的（正则表达式对象的lastIndex和ignoreCase属性）。</p>\n<h3 id=\"其它命名形式\"><a href=\"#其它命名形式\" class=\"headerlink\" title=\"其它命名形式\"></a>其它命名形式</h3><p>有时，开发人员使用命名规范来弥补或替代语言特性。</p>\n<p>例如，JavaScript中没有定义常量的方法（尽管有些内置的像Number, MAX_VALUE），所以开发者都采用全部单词大写的规范来命名这个程序生命周期中都不会改变的变量，如：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 珍贵常数，只可远观</span></div><div class=\"line\"><span class=\"keyword\">var</span> PI = <span class=\"number\">3.14</span>,</div><div class=\"line\">    MAX_WIDTH = <span class=\"number\">800</span>;</div></pre></td></tr></table></figure></p>\n<p>还有另外一个完全大写的惯例：全局变量名字全部大写。全部大写命名全局变量可以加强减小全局变量数量的实践，同时让它们易于区分。</p>\n<p>另外一种使用规范来模拟功能的是私有成员。虽然可以在JavaScript中实现真正的私有，但是开发者发现仅仅使用一个下划线前缀来表示一个私有属性或方法会更容易些。考虑下面的例子：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> person = &#123;</div><div class=\"line\">    <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>._getFirst() + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>._getLast();</div><div class=\"line\">    &#125;,</div><div class=\"line\"> </div><div class=\"line\">    <span class=\"attr\">_getFirst</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">_getLast</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>在此例中，<code>getName()</code>就表示公共方法，部分稳定的API。而<code>_getFirst()</code>和<code>_getLast()</code>则表明了私有。它们仍然是正常的公共方法，但是使用下划线前缀来警告person对象的使用者这些方法在下一个版本中时不能保证工作的，是不能直接使用的。注意，JSLint有些不鸟下划线前缀，除非你设置了noman选项为:false。</p>\n<p>下面是一些常见的<code>_private</code>规范：</p>\n<ul>\n<li>使用尾下划线表示私有，如<code>name_</code>和<code>getElements_()</code></li>\n<li>使用一个下划线前缀表<code>_protected</code>（保护）属性，两个下划线前缀表示<code>__private</code> （私有）属性</li>\n<li>Firefox中一些内置的变量属性不属于该语言的技术部分，使用两个前下划线和两个后下划线表示，如：<code>__proto__</code>和<code>__parent__</code>。</li>\n</ul>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>你必须注释你的代码，即使不会有其他人向你一样接触它。通常，当你深入研究一个问题，你会很清楚的知道这个代码是干嘛用的，但是，当你一周之后再回来看的时候，想必也要耗掉不少脑细胞去搞明白到底怎么工作的。</p>\n<p>很显然，注释不能走极端：每个单独变量或是单独一行。但是，你通常应该记录所有的函数，它们的参数和返回值，或是任何不寻常的技术和方法。要想到注 释可以给你代码未来的阅读者以诸多提示；阅读者需要的是（不要读太多的东西）仅注释和函数属性名来理解你的代码。例如，当你有五六行程序执行特定的任务， 如果你提供了一行代码目的以及为什么在这里的描述的话，阅读者就可以直接跳过这段细节。没有硬性规定注释代码比，代码的某些部分（如正则表达式）可能注释 要比代码多。</p>\n<blockquote>\n<p>最重要的习惯，然而也是最难遵守的，就是保持注释的及时更新，因为过时的注释比没有注释更加的误导人。</p>\n</blockquote>\n<h1 id=\"关于作者\"><a href=\"#关于作者\" class=\"headerlink\" title=\"关于作者\"></a>关于作者</h1><p>Stoyan Stefanov是Yahoo!web开发人员，多个O’Reilly书籍的作者、投稿者和技术评审。他经常在会议和他的博客<a href=\"http://www.zhangxinxu.com/wordpress/2010/10/%e7%bf%bb%e8%af%91-%e9%ab%98%e8%b4%a8%e9%87%8fjavascript%e4%bb%a3%e7%a0%81%e4%b9%a6%e5%86%99%e5%9f%ba%e6%9c%ac%e8%a6%81%e7%82%b9/www.phpied.com\">www.phpied.com</a>上发表web开发主题的演讲。Stoyan还是smush.it图片优化工具的创造者，YUI贡献者，雅虎性能优化工具YSlow 2.0的架构设计师。</p>\n<p>本文转自：<a href=\"http://www.zhangxinxu.com/wordpress/?p=1173\">张鑫旭-翻译-高质量JavaScript代码书写基本要点</a></p>\n<p>英文原文：<a href=\"http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/\">http://net.tutsplus.com/tutorials/javascript-ajax/the-essentials-of-writing-high-quality-javascript/</a></p>\n<h1 id=\"关于本文\"><a href=\"#关于本文\" class=\"headerlink\" title=\"关于本文\"></a>关于本文</h1><p>本文转自<a href=\"http://www.cnblogs.com/TomXu\">TOM大叔</a>的<a href=\"http://www.cnblogs.com/TomXu/archive/2011/12/15/2288411.html\">深入理解JavaScript系列</a></p>\n<blockquote>\n<p>【深入理解JavaScript系列】文章，包括了原创，翻译，转载，整理等各类型文章，原文是TOM大叔的一个非常不错的专题，现将其重新整理发布。谢谢大叔。</p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciwarqf8n0000qdcd0v0q71dq","category_id":"ciwarqf8z0004qdcdje8n1f3a","_id":"ciwarqf960009qdcdh5bfpy72"},{"post_id":"ciwarqf8t0002qdcdqbwdfetc","category_id":"ciwarqf950007qdcdf97fk0k3","_id":"ciwarqf9c000dqdcdlup0mkim"},{"post_id":"ciwarqf930006qdcdpy44pyr7","category_id":"ciwarqf950007qdcdf97fk0k3","_id":"ciwarqf9e000hqdcdbxkqjts9"}],"PostTag":[{"post_id":"ciwarqf8n0000qdcd0v0q71dq","tag_id":"ciwarqf920005qdcdsga605jj","_id":"ciwarqf9a000cqdcdttlo63pc"},{"post_id":"ciwarqf8n0000qdcd0v0q71dq","tag_id":"ciwarqf960008qdcdc912tbop","_id":"ciwarqf9c000eqdcdussqcimj"},{"post_id":"ciwarqf8t0002qdcdqbwdfetc","tag_id":"ciwarqf920005qdcdsga605jj","_id":"ciwarqf9e000gqdcdbcynh5r5"},{"post_id":"ciwarqf930006qdcdpy44pyr7","tag_id":"ciwarqf920005qdcdsga605jj","_id":"ciwarqf9e000iqdcdxf6njonb"}],"Tag":[{"name":"JavaScript","_id":"ciwarqf920005qdcdsga605jj"},{"name":"翻译","_id":"ciwarqf960008qdcdc912tbop"}]}}